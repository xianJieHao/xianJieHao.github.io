<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[post-离职前]]></title>
    <url>%2Fposts%2F3159%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[广州石围塘火车站]]></title>
    <url>%2Fposts%2F43980%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>photo</category>
      </categories>
      <tags>
        <tag>photo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见面试题]]></title>
    <url>%2Fposts%2F39358%2F</url>
    <content type="text"><![CDATA[1、开发中用到比较多的数据结构有哪些？ 2、谈谈你对HashMap的理解，底层基本实现。HashMap怎么解决碰撞问题?假如你回答HasMpa不是线性安全的呢？HashTable是线性安全的，接着问你有没有线性安全的Map,接下来问concurren包。 3、对JVM熟不熟悉？简单说说类加载过程，里面执行了什么操作？问了GC和内存管理，平时在tomcat中有没有进行相关的配置。 4、http协议，get/post的基本区别，tcp/ip协议，三次握手，窗口滑动机制。 5、开发中使用到哪些数据库？mysql存储引擎有哪些？悲观锁和乐观锁使用场景、分布式集群实现原理。 6、springmvc 和 mybatis 的实现原理。 7、redis中基本的存储类型、事务、使用场景。 8、dubbo超时重试;Dubbo超时时间设置。 9、如何保证请求执行顺序 10、分布式事务与分布式锁（扣款不要出现负数） 11、分布式session设置 12、zookper有哪些作用 13、JVM内存模型 14、数据库垂直与水平拆分 15、Mybatis如何分页；如何设置缓存；MySql分页 16、IO与NIO的区别，阻塞与非阻塞的区别]]></content>
  </entry>
  <entry>
    <title><![CDATA[springcloud 概述]]></title>
    <url>%2Fposts%2F41450%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[公 司]]></title>
    <url>%2Fposts%2F3727%2F</url>
    <content type="text"><![CDATA[附近的万科云，从毕业到这里找房子，见证了聊聊无几，毫无生气到现在连大妈们都要抢占大方跳广场舞，每当旁晚下班经过，溜娃的，遛狗的，老人，小孩，情侣，很是热闹 依旧是夕阳射在公司大楼的玻璃墙上，角度不好，真实景色还真的挺不错！ 晚上下班，昏黄的路灯映照下的马路，公交站。旁边在建地铁，已经一年多了！ 每天早晨上班经过这条路，忽然发现晨光渗透过树叶的景象很美。赶紧掏出索尼大法拍下，像是美丽的偶遇。忙碌的脚步往往容易忽视生活中美好的点点滴滴！ 日常工作 下班的傍晚，每天都看到的晚霞！ 篮球]]></content>
      <categories>
        <category>photo</category>
      </categories>
      <tags>
        <tag>photo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[致某个让我爱慕而不能再靠近的人]]></title>
    <url>%2Fposts%2F16656%2F</url>
    <content type="text"><![CDATA[已经很久没有见你了，准确的说，不知道以什么理由联系你……明明就在身边，却找不到之前那种给你发个微信都可以毫无顾虑，甚至不分时间段的感觉了……我不知道这算不算故事。。。或者至少在你眼中应该不算，，，只是再正常不过的普通朋友关系……那天我发了神经一样冲动发微信跟你表白，说我喜欢你三年，然后，内心小鹿乱撞，心扑通扑通的跳动，我知道这种感觉，是很多年没有出现的，类似高考那两天的午睡前的心跳。完后我一下钻进我被子，害怕知道结果又害怕不知道结果。这是得到肯定结果的概率接近为零的举动。我几乎没干过心理完全没有底的事情，可是，如果这种冲动能控制，要心有何用。我记得你是毫无延迟的回了一句，“如果拒绝呢，我们还没一起玩吗？”。我大概明白这就是你最直接的回答。或者你在此之前已经想过这个答案，只不过只要我一问，你就能直接不费力气思考的回答上来了。那一瞬间，我的心态已经奔溃，似乎在预料之中又好似预料之外。我心中一股落寞与不甘心，输了个字母gun,但是冷静冷静，删掉。差点发了出去。那一刻甚至想，如果我从来没有认识你该好，宁愿从来没有认识过你，从来。那天夜里我睡不着觉，心跳了很久！翻来覆去，久久不能平静，思绪混乱。应该是很累了，逐渐睡去。午夜突然惊醒，忘了做了什么梦。醒来后还处在朦朦胧胧的状态之中，一股失落感涌上心头，还没回过神了是怎么回事。感觉像是小时候失去心爱的玩具，或者是小时候那种自己解释不来为什么一醒来就哭。小时候有过一段时间，一睡觉醒来就哭泣，为什么我会哭，不知道问为什么哭泣，但是那种感觉应该跟此时是一样的。现在想想可能是一觉醒过来发现家里没人了，剩下我自己的那种感觉被全世界抛弃的孤独感。第二天，早上阳光刚刚好透过玻璃的窗帘，映射在我那盘绿薄植物上，格外衬景，我假装跟往常一样带着愉悦的心情上班，并且发了个说说，“早上好”，并配一张办公室的照片。这样做的目的是告诉你，i am jsut ok… 我没事，我很好。一早上没有干活，一直在思考为什么，难道我真的很糟糕。午睡时间到了，早早吃饱躺下。以往是工作压力难以入睡，而这次不是。这样的情绪一直维持了两个星期，失眠了两个星期。我没有给你发任何信息，也没见你本人。你给我发的信息也不回复。那段时间里，我听了一首童曲《小蛙跳》,每当欢快的前奏响起，我暂时性释放一下糟糕的心情，郁郁寡欢的情绪一下子抛出脑后。“快乐池塘栽种了梦想就变成海洋,鼓的眼睛大嘴巴同样唱的响亮,借我一双小翅膀就能飞向太阳,我相信奇迹就在身上,啦……” 治愈系的节奏，震动着敏感的神经。冷静过后，我从新思考怎么面对你，我不知道怎么面对你。我对你的定位是什么，红颜知己？掏心掏肺那种？还是一个最普通的那个朋友关系。反正我不能将你放在我的“圈子”最内层的人了。就像周传雄《冬天的秘密》里面，“如果我说我真的爱你，谁来收拾那些被破坏的友谊”。我们要以什么相处模式？我觉得我们回不去那种普通朋友的关系了。因为我找不到那种感觉了。每次想要分享点什么事情，或者找你说说话，总感觉有点怪怪的，毕竟被你拒绝了。只要一想起被你狠狠拒绝的那种心情，尽管再多想要讲的话都会憋进肚子了,断掉一切想要见你或者联系你的念头。你觉得我太认真了，你不知道我是那种遇到什么人表现成什么样子的人。我对你认真是我觉得你是我值得认真对待的人。我的本性，毫无掩饰的展露在你面前，你却说我太认真。可是我们都没有错！你依旧是那个你，而我还是那个我。你依然对我是以往的朋友的感觉，我依然保持着喜欢你的感觉。只不过不表现出来，因为感觉没有什么用，只是徒劳的自欺情绪罢了。我不能因为你说不喜欢我而断了所有的关系，突然变成一个生命中的路人甲。我决定假装成一个普通朋友关系保持些许联系。实际上我对你完全不存在纯友谊。喜欢了就是喜欢了，没有什么好抗拒的。与其说强迫自己不喜欢你了，还不如承认就是喜欢你，怎么了。或许到了某个时间点，你有了陪伴，我就真的放弃跟你联系。因为我可能会很心疼。我一直安慰自己：被拒绝也是生活的一部分，生活没有想象中的美好，但它是真实的。 var password = prompt("请输入密码:"); if(password == "123456"){ document.getElementById("page").style.display="block"; }else{ alert("密码错误"); history.back(); }]]></content>
      <categories>
        <category>me</category>
      </categories>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot基础教程]]></title>
    <url>%2Fposts%2F26056%2F</url>
    <content type="text"><![CDATA[今日大纲 了解Spring的发展 掌握Spring的java配置方式 学习Spring Boot 使用Spring Boot来改造购物车系统 Spring的发展Spring1.x 时代在Spring1.x时代，都是通过xml文件配置bean，随着项目的不断扩大，需要将xml配置分放到不同的配置文件中，需要频繁的在java类和xml配置文件中切换。 Spring2.x时代随着JDK1.5带来的注解支持，Spring2.x可以使用注解对Bean进行申明和注入，大大的减少了xml配置文件，同时也大大简化了项目的开发。 那么，问题来了，究竟是应该使用xml还是注解呢？ 最佳实践： 应用的基本配置用xml，比如：数据源、资源文件等； 业务开发用注解，比如：Service中注入bean等； Spring3.x到Spring4.x从Spring3.x开始提供了Java配置方式，使用Java配置方式可以更好的理解你配置的Bean，现在我们就处于这个时代，并且Spring4.x和Springboot都推荐使用java配置的方式。 Spring的Java配置方式Java配置是Spring4.x推荐的配置方式，可以完全替代xml配置。 \@Configuration 和 \@BeanSpring的Java配置方式是通过 \@Configuration 和 \@Bean 这两个注解实现的： 1、\@Configuration 作用于类上，相当于一个xml配置文件； 2、\@Bean 作用于方法上，相当于xml配置中的\&lt;bean>； 示例该示例演示了通过Java配置的方式进行配置Spring，并且实现了Spring IOC功能。 创建工程以及导入依赖 &lt;project xmlns= &quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi= &quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation= &quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; &gt; &lt;modelVersion &gt;4.0.0 &lt;/modelVersion &gt; &lt;groupId &gt;cn.itcast.springboot &lt;/groupId &gt; &lt;artifactId &gt; itcast - springboot &lt;/artifactId &gt; &lt;version &gt;1.0.0-SNAPSHOT &lt;/version &gt; &lt;packaging &gt;war &lt;/packaging &gt; &lt;dependencies &gt; &lt;dependency &gt; &lt;groupId &gt;org.springframework &lt;/groupId &gt; &lt;artifactId &gt;spring- webmvc &lt;/artifactId &gt; &lt;version &gt;4.3.7.RELEASE &lt;/version &gt; &lt;/dependency &gt; &lt;!-- 连接池 -- &gt; &lt;dependency &gt; &lt;groupId &gt;com.jolbox &lt;/groupId &gt; &lt;artifactId &gt; bonecp -spring &lt;/artifactId &gt; &lt;version &gt;0.8.0.RELEASE &lt;/version &gt; &lt;/dependency &gt; &lt;/dependencies &gt; &lt;build &gt; &lt;finalName &gt; $&#123;project.artifactId&#125; &lt;/finalName &gt; &lt;plugins &gt; &lt;!-- 资源文件拷贝插件 -- &gt; &lt;plugin &gt; &lt;groupId &gt;org.apache.maven.plugins &lt;/groupId &gt; &lt;artifactId &gt; maven -resources- plugin &lt;/artifactId &gt; &lt;configuration &gt; &lt;encoding &gt;UTF-8 &lt;/encoding &gt; &lt;/configuration &gt; &lt;/plugin &gt; &lt;!-- java编译插件 -- &gt; &lt;plugin &gt; &lt;groupId &gt;org.apache.maven.plugins &lt;/groupId &gt; &lt;artifactId &gt; maven -compiler- plugin &lt;/artifactId &gt; &lt;configuration &gt; &lt;source &gt;1.7 &lt;/source &gt; &lt;target &gt;1.7 &lt;/target &gt; &lt;encoding &gt;UTF-8 &lt;/encoding &gt; &lt;/configuration &gt; &lt;/plugin &gt; &lt;/plugins &gt; &lt;pluginManagement &gt; &lt;plugins &gt; &lt;!-- 配置 Tomcat 插件 -- &gt; &lt;plugin &gt; &lt;groupId &gt;org.apache.tomcat.maven &lt;/groupId &gt; &lt;artifactId &gt;tomcat7- maven - plugin &lt;/artifactId &gt; &lt;version &gt;2.2 &lt;/version &gt; &lt;/plugin &gt; &lt;/plugins &gt; &lt;/pluginManagement &gt; &lt;/build &gt; &lt;/project &gt; 编写User对象 public class User &#123; private String username; private String password; private Integer age; public String getUsername() &#123; return username;&#125; public void setUsername(String username) &#123; this .username = username;&#125; public String getPassword() &#123; return password;&#125; public void setPassword(String password) &#123; this .password = password;&#125; public Integer getAge() &#123; return age;&#125; public void setAge(Integer age) &#123; this .age = age;&#125;&#125; 编写UserDAO 用于模拟与数据库的交互 public class UserDAO &#123; public List &lt;User &gt; queryUserList()&#123;List &lt;User &gt; result = new ArrayList &lt;User &gt;();// 模拟数据库的查询 for ( int i = 0; i &lt; 10; i++) &#123;User user = new User();user.setUsername(&quot;username_&quot; + i);user.setPassword(&quot;password_&quot; + i);user.setAge(i + 1);result.add(user);&#125; return result;&#125;&#125; 编写UserService 用于实现User数据操作业务逻辑 @Service public class UserService &#123; @Autowired // 注入Spring容器中的bean对象 private UserDAO userDAO; public List &lt;User &gt; queryUserList() &#123;// 调用userDAO中的方法进行查询 return this .userDAO.queryUserList();&#125;&#125; 编写SpringConfig 用于实例化Spring容器 @Configuration //通过该注解来表明该类是一个Spring的配置，相当于一个 xml 文件 @ComponentScan(basePackages = &quot;cn.itcast.springboot.javaconfig&quot;) //配置扫描包 public class SpringConfig &#123; @Bean // 通过该注解来表明是一个Bean对象，相当于 xml 中的 &lt;bean &gt; public UserDAO getUserDAO()&#123; return new UserDAO(); // 直接new对象做演示&#125;&#125; 编写测试方法 用于启动Spring容器 public class Main &#123; public static void main(String[] args) &#123;// 通过Java配置来实例化Spring容器AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SpringConfig. class );// 在Spring容器中获取Bean对象UserService userService = context.getBean(UserService. class );// 调用对象中的方法List &lt;User &gt; list = userService.queryUserList(); for (User user : list) &#123;System. out .println(user.getUsername() + &quot;, &quot; + user.getPassword() + &quot;, &quot; +user.getPassword());&#125;// 销毁该容器context.destroy();&#125;&#125; 测试效果 小结从以上的示例中可以看出，使用Java代码就完美的替代xml配置文件，并且结构更加的清晰。 实战读取外部的资源配置文件通过\@PropertySource可以指定读取的配置文件，通过\@Value注解获取值，具体用法： @Configuration //通过该注解来表明该类是一个Spring的配置，相当于一个 xml 文件 @ComponentScan(basePackages = &quot;cn.itcast.springboot.javaconfig&quot;) //配置扫描包 @PropertySource(value= &#123;&quot;classpath:jdbc.properties&quot;&#125;) public class SpringConfig &#123; @Value(&quot; $&#123;jdbc.url&#125;&quot;) private String jdbcUrl; @Bean // 通过该注解来表明是一个Bean对象，相当于 xml 中的 &lt;bean &gt; public UserDAO getUserDAO()&#123; return new UserDAO(); // 直接new对象做演示&#125;&#125; 思考： 如何配置多个配置文件？ 如果配置的配置文件不存在会怎么样？ 配置数据库连接池导入依赖： &lt;!-- 连接池 -- &gt;&lt;dependency &gt;&lt;groupId &gt;com.jolbox &lt;/groupId &gt;&lt;artifactId &gt; bonecp -spring &lt;/artifactId &gt;&lt;version &gt;0.8.0.RELEASE &lt;/version &gt;&lt;/dependency &gt; 之前的Spring xml配置： &lt;!-- 定义数据源 -- &gt; &lt;bean id= &quot;dataSource&quot; class= &quot;com.jolbox.bonecp.BoneCPDataSource&quot; destroy-method= &quot;close&quot; &gt; &lt;!-- 数据库驱动 -- &gt; &lt;property name= &quot;driverClass&quot; value= &quot; $&#123;jdbc.driverClassName&#125;&quot; / &gt; &lt;!-- 相应驱动的jdbcUrl -- &gt; &lt;property name= &quot;jdbcUrl&quot; value= &quot; $&#123;jdbc.url&#125;&quot; / &gt; &lt;!-- 数据库的用户名 -- &gt; &lt;property name= &quot;username&quot; value= &quot; $&#123;jdbc.username&#125;&quot; / &gt; &lt;!-- 数据库的密码 -- &gt; &lt;property name= &quot;password&quot; value= &quot; $&#123;jdbc.password&#125;&quot; / &gt; &lt;!--检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0-- &gt; &lt;property name= &quot;idleConnectionTestPeriod&quot; value= &quot;60&quot; / &gt; &lt;!--连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0-- &gt; &lt;property name= &quot;idleMaxAge&quot; value= &quot;30&quot; / &gt; &lt;!-- 每个分区最大的连接数 -- &gt; &lt;!--判断依据：请求并发数 -- &gt; &lt;property name= &quot;maxConnectionsPerPartition&quot; value= &quot;100&quot; / &gt; &lt;!-- 每个分区最小的连接数 -- &gt; &lt;property name= &quot;minConnectionsPerPartition&quot; value= &quot;5&quot; / &gt; &lt;/bean &gt; 参考xml配置改造成java配置方式： @Value(&quot; $&#123;jdbc.url&#125;&quot;) private String jdbcUrl; @Value(&quot; $&#123;jdbc.driverClassName&#125;&quot;) private String jdbcDriverClassName; @Value(&quot; $&#123;jdbc.username&#125;&quot;) private String jdbcUsername; @Value(&quot; $&#123;jdbc.password&#125;&quot;) private String jdbcPassword; @Bean(destroyMethod = &quot;close&quot;) public DataSource dataSource() &#123;BoneCPDataSource boneCPDataSource = new BoneCPDataSource();// 数据库驱动boneCPDataSource.setDriverClass(jdbcDriverClassName);// 相应驱动的jdbcUrlboneCPDataSource.setJdbcUrl(jdbcUrl);// 数据库的用户名boneCPDataSource.setUsername(jdbcUsername);// 数据库的密码boneCPDataSource.setPassword(jdbcUsername);//检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0boneCPDataSource.setIdleConnectionTestPeriodInMinutes(60);// 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0boneCPDataSource.setIdleMaxAgeInMinutes(30);// 每个分区最大的连接数boneCPDataSource.setMaxConnectionsPerPartition(100);// 每个分区最小的连接数boneCPDataSource.setMinConnectionsPerPartition(5); return boneCPDataSource;&#125; 思考： 如何使用该DataSource对象？ Spring Boot什么是Spring Boot Spring Boot的优缺点 快速入门设置spring boot的parent&lt;parent &gt;&lt;groupId &gt;org.springframework.boot &lt;/groupId &gt;&lt;artifactId &gt;spring-boot-starter-parent &lt;/artifactId &gt;&lt;version &gt;1.5.2.RELEASE &lt;/version &gt;&lt;/parent &gt; 说明：Spring boot的项目必须要将parent设置为springboot的parent，该parent包含了大量默认的配置，大大简化了我们的开发。 导入spring boot的web支持&lt;dependency &gt;&lt;groupId &gt;org.springframework.boot &lt;/groupId &gt;&lt;artifactId &gt;spring-boot-starter-web &lt;/artifactId &gt;&lt;/dependency &gt; 添加Spring boot的插件&gt; &lt;plugin &gt; &lt;groupId &gt;org.springframework.boot &lt;/groupId &gt; &lt;artifactId &gt;spring-boot- maven - plugin &lt;/artifactId &gt; &lt;/plugin &gt; 编写第一个Spring Boot的应用 @Controller @SpringBootApplication @Configuration public class HelloApplication &#123; @RequestMapping(&quot;hello&quot;) @ResponseBody public String hello()&#123; return &quot;hello world！&quot;;&#125; public static void main(String[] args) &#123;SpringApplication. run (HelloApplication. class , args);&#125;&#125; 代码说明： 1、\@SpringBootApplication：SpringBoot项目的核心注解，主要目的是开启自动配置。； 2、\@Configuration：这是一个配置Spring的配置类； 3、\@Controller：标明这是一个SpringMVC的Controller控制器； 4、main方法：在main方法中启动一个应用，即：这个应用的入口； 启动应用在Spring Boot项目中，启动的方式有两种，一种是直接run JavaApplication另外一种是通过Spring Boot的Maven插件运行。 第一种： 第二种： 启动效果： 看到如下信息就说明启动成功了： INFO 6188 — [ main] c.i.springboot.demo.HelloApplication : StartedHelloApplication in 3.281 seconds (JVM running for 3.601) 测试打开浏览器，输入地址： 效果： 是不是很Easy? Spring Boot的核心入口类和\@SpringBootApplicationSpring Boot的项目一般都会有Application的入口类，入口类中会有main方法，这是一个标准的Java应用程序的入口方法。 \@SpringBootApplication注解是Spring Boot的核心注解，它其实是一个组合注解： 该注解主要组合了以下注解： \@SpringBootConfiguration：这是SpringBoot项目的配置注解，这也是一个组合注解： 在Spring Boot项目中推荐使用\@ SpringBootConfiguration替代\@Configuration \@EnableAutoConfiguration：启用自动配置，该注解会使SpringBoot根据项目中依赖的jar包自动配置项目的配置项： 如：我们添加了spring-boot-starter-web的依赖，项目中也就会引入SpringMVC的依赖，SpringBoot就会自动配置tomcat和SpringMVC \@ComponentScan：默认扫描\@SpringBootApplication所在类的同级目录以及它的子目录。 关闭自动配置通过上述，我们得知，Spring Boot会根据项目中的jar包依赖，自动做出配置，SpringBoot支持的自动配置如下（非常多）： 如果我们不需要Spring Boot自动配置，想关闭某一项的自动配置，该如何设置呢？ 比如：我们不想自动配置Redis，想手动配置。 当然了，其他的配置就类似了。 自定义Banner启动Spring Boot项目后会看到这样的图案： 这个图片其实是可以自定义的： 打开网站：http://patorjk.com/software/taag/#p=display&amp;h=3&amp;v=3&amp;f=4Max&amp;t=itcast%20Spring%20Boot 拷贝生成的字符到一个文本文件中，并且将该文件命名为banner.txt 将banner.txt拷贝到项目的resources目录中： 重新启动程序，查看效果： 好像没有默认的好看啊！！！ 如果不想看到任何的banner，也是可以将其关闭的： 全局配置文件SpringBoot项目使用一个全局的配置文件application.properties或者是application.yml，在resources目录下或者类路径下的/config下，一般我们放到resources下。 修改tomcat的端口为8088 重新启动应用，查看效果： 修改进入DispatcherServlet的规则为： .html 测试： 更多的配置： # =================================================================== # COMMON SPRING BOOT PROPERTIES # # This sample file is provided as a guideline. Do NOT copy it in its # entirety to your own application. ^ ^ ^ # =================================================================== # ---------------------------------------- # CORE PROPERTIES # ---------------------------------------- # BANNER banner.charset=UTF-8 # Banner file encoding. banner.location=classpath:banner.txt # Banner file location. banner.image.location=classpath:banner.gif # Banner image file location(jpg/png can also be used). banner.image.width= # Width of the banner image in chars (default 76) banner.image.height= # Height of the banner image in chars (default based onimage height) banner.image.margin= # Left hand image margin in chars (default 2) banner.image.invert= # If images should be inverted for dark terminal themes(default false) # LOGGING logging.config= # Location of the logging configuration file. For instance `classpath:logback.xml ` for Logback logging.exception-conversion-word=%wEx # Conversion word used when loggingexceptions. logging.file= # Log file name. For instance `myapp.log ` logging.level. = # Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG ` logging.path= # Location of the log file. For instance `/var/log ` logging.pattern.console= # Appender pattern for output to the console. Onlysupported with the default logback setup. logging.pattern.file= # Appender pattern for output to the file. Onlysupported with the default logback setup. logging.pattern.level= # Appender pattern for log level (default %5p). Onlysupported with the default logback setup. logging.register-shutdown-hook=false # Register a shutdown hook for thelogging system when it is initialized. # AOP spring.aop.auto=true # Add @EnableAspectJAutoProxy. spring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxiesare to be created (true) as opposed to standard Java interface-based proxies(false). # IDENTITY( [ContextIdApplicationContextInitializer](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/context/ContextIdApplicationContextInitializer.java))spring.application.index= # Application index. spring.application.name= # Application name. # ADMIN( [SpringApplicationAdminJmxAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.java))spring.application.admin.enabled=false # Enable admin features for theapplication. spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean. # AUTO-CONFIGURATION spring.autoconfigure.exclude= # Auto-configuration classes to exclude. # SPRING CORE spring.beaninfo.ignore=true # Skip search of BeanInfo classes. # SPRING CACHE( [CacheProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java))spring.cache.cache-names= # Comma-separated list of cache names to create ifsupported by the underlying cache manager. spring.cache.caffeine.spec= # The spec to use to create caches. CheckCaffeineSpec for more details on the spec format. spring.cache.couchbase.expiration=0 # Entry expiration in milliseconds. Bydefault the entries never expire. spring.cache.ehcache.config= # The location of the configuration file to useto initialize EhCache. spring.cache.guava.spec= # The spec to use to create caches. CheckCacheBuilderSpec for more details on the spec format. spring.cache.infinispan.config= # The location of the configuration file touse to initialize Infinispan. spring.cache.jcache.config= # The location of the configuration file to use toinitialize the cache manager. spring.cache.jcache.provider= # Fully qualified name of the CachingProviderimplementation to use to retrieve the JSR-107 compliant cache manager. Onlyneeded if more than one JSR-107 implementation is available on the classpath. spring.cache.type= # Cache type, auto-detected according to the environment bydefault. # SPRING CONFIG - using environment property only( [ConfigFileApplicationListener](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java))spring.config.location= # Config file locations. spring.config.name=application # Config file name. # HAZELCAST( [HazelcastProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastProperties.java))spring.hazelcast.config= # The location of the configuration file to use toinitialize Hazelcast. # PROJECT INFORMATION( [ProjectInfoProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoProperties.java))spring.info.build.location=classpath:META-INF/build-info.properties # Locationof the generated build-info.properties file. spring.info.git.location=classpath:git.properties # Location of the generatedgit.properties file. # JMX spring.jmx.default-domain= # JMX domain name. spring.jmx.enabled=true # Expose management beans to the JMX domain. spring.jmx.server=mbeanServer # MBeanServer bean name. # Email( [MailProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java))spring.mail.default-encoding=UTF-8 # Default MimeMessage encoding. spring.mail.host= # SMTP server host. For instance `smtp.example.com ` spring.mail.jndi-name= # Session JNDI name. When set, takes precedence toothers mail settings. spring.mail.password= # Login password of the SMTP server. spring.mail.port= # SMTP server port. spring.mail.properties. = # Additional JavaMail session properties. spring.mail.protocol=smtp # Protocol used by the SMTP server. spring.mail.test-connection=false # Test that the mail server is available onstartup. spring.mail.username= # Login user of the SMTP server. # APPLICATION SETTINGS( [SpringApplication](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java))spring.main.banner-mode=console # Mode used to display the banner when theapplication runs. spring.main.sources= # Sources (class name, package name or XML resourcelocation) to include in the ApplicationContext. spring.main.web-environment= # Run the application in a web environment(auto-detected by default). # FILE ENCODING( [FileEncodingApplicationListener](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/context/FileEncodingApplicationListener.java))spring.mandatory-file-encoding= # Expected character encoding the applicationmust use. # INTERNATIONALIZATION( [MessageSourceAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java))spring.messages.always-use-message-format=false # Set whether to always applythe MessageFormat rules, parsing even messages without arguments. spring.messages.basename=messages # Comma-separated list of basenames, eachfollowing the ResourceBundle convention. spring.messages.cache-seconds=-1 # Loaded resource bundle files cacheexpiration, in seconds. When set to -1, bundles are cached forever. spring.messages.encoding=UTF-8 # Message bundles encoding. spring.messages.fallback-to-system-locale=true # Set whether to fall back tothe system Locale if no files for a specific Locale have been found. # OUTPUT spring.output.ansi.enabled=detect # Configure the ANSI output. # PID FILE( [ApplicationPidFileWriter](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPidFileWriter.java))spring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used butit cannot write the PID file. spring.pid.file= # Location of the PID file to write (ifApplicationPidFileWriter is used). # PROFILES spring.profiles.active= # Comma-separated list (or list if using YAML) of [activeprofiles](http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#howto-set-active-spring-profiles).spring.profiles.include= # Unconditionally activate the specified commaseparated profiles (or list of profiles if using YAML). # SENDGRID( [SendGridAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridAutoConfiguration.java))spring.sendgrid.api-key= # SendGrid api key (alternative tousername/password) spring.sendgrid.username= # SendGrid account username spring.sendgrid.password= # SendGrid account password spring.sendgrid.proxy.host= # SendGrid proxy host spring.sendgrid.proxy.port= # SendGrid proxy port # ---------------------------------------- # WEB PROPERTIES # ---------------------------------------- # EMBEDDED SERVER CONFIGURATION( [ServerProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java))server.address= # Network address to which the server should bind to. server.compression.enabled=false # If response compression is enabled. server.compression.excluded-user-agents= # List of user-agents to exclude fromcompression. server.compression.mime-types= # Comma-separated list of MIME types thatshould be compressed. For instance `text/html,text/css,application/json ` server.compression.min-response-size= # Minimum response size that is requiredfor compression to be performed. For instance 2048 server.connection-timeout= # Time in milliseconds that connectors will waitfor another HTTP request before closing the connection. When not set, theconnector&apos;s container-specific default will be used. Use a value of -1 toindicate no (i.e. infinite) timeout. server.context-parameters. = # Servlet context init parameters. For instance `server.context-parameters.a=alpha ` server.context-path= # Context path of the application. server.display-name=application # Display name of the application. server.max-http-header-size=0 # Maximum size in bytes of the HTTP messageheader. server.error.include-stacktrace=never # When to include a &quot;stacktrace&quot;attribute. server.error.path=/error # Path of the error controller. server.error.whitelabel.enabled=true # Enable the default error page displayedin browsers in case of a server error. server.jetty.acceptors= # Number of acceptor threads to use. server.jetty.max-http-post-size=0 # Maximum size in bytes of the HTTP post orput content. server.jetty.selectors= # Number of selector threads to use. server.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet # The classname of the JSP servlet. server.jsp-servlet.init-parameters. = # Init parameters used to configure theJSP servlet server.jsp-servlet.registered=true # Whether or not the JSP servlet isregistered server.port=8080 # Server HTTP port. server.server-header= # Value to use for the Server response header (no headeris sent if empty) server.servlet-path=/ # Path of the main dispatcher servlet. server.use-forward-headers= # If X-Forwarded- headers should be applied tothe HttpRequest. server.session.cookie.comment= # Comment for the session cookie. server.session.cookie.domain= # Domain for the session cookie. server.session.cookie.http-only= # &quot;HttpOnly&quot; flag for the session cookie. server.session.cookie.max-age= # Maximum age of the session cookie inseconds. server.session.cookie.name= # Session cookie name. server.session.cookie.path= # Path of the session cookie. server.session.cookie.secure= # &quot;Secure&quot; flag for the session cookie. server.session.persistent=false # Persist session data between restarts. server.session.store-dir= # Directory used to store session data. server.session.timeout= # Session timeout in seconds. server.session.tracking-modes= # Session tracking modes (one or more of thefollowing: &quot;cookie&quot;, &quot;url&quot;, &quot;ssl&quot;). server.ssl.ciphers= # Supported SSL ciphers. server.ssl.client-auth= # Whether client authentication is wanted (&quot;want&quot;) orneeded (&quot;need&quot;). Requires a trust store. server.ssl.enabled= # Enable SSL support. server.ssl.enabled-protocols= # Enabled SSL protocols. server.ssl.key-alias= # Alias that identifies the key in the key store. server.ssl.key-password= # Password used to access the key in the key store. server.ssl.key-store= # Path to the key store that holds the SSL certificate(typically a jks file). server.ssl.key-store-password= # Password used to access the key store. server.ssl.key-store-provider= # Provider for the key store. server.ssl.key-store-type= # Type of the key store. server.ssl.protocol=TLS # SSL protocol to use. server.ssl.trust-store= # Trust store that holds SSL certificates. server.ssl.trust-store-password= # Password used to access the trust store. server.ssl.trust-store-provider= # Provider for the trust store. server.ssl.trust-store-type= # Type of the trust store. server.tomcat.accept-count= # Maximum queue length for incoming connectionrequests when all possible request processing threads are in use. server.tomcat.accesslog.buffered=true # Buffer output such that it is onlyflushed periodically. server.tomcat.accesslog.directory=logs # Directory in which log files arecreated. Can be relative to the tomcat base dir or absolute. server.tomcat.accesslog.enabled=false # Enable access log. server.tomcat.accesslog.pattern=common # Format pattern for access logs. server.tomcat.accesslog.prefix=access_log # Log file name prefix. server.tomcat.accesslog.rename-on-rotate=false # Defer inclusion of the datestamp in the file name until rotate time. server.tomcat.accesslog.request-attributes-enabled=false # Set requestattributes for IP address, Hostname, protocol and port used for the request. server.tomcat.accesslog.rotate=true # Enable access log rotation. server.tomcat.accesslog.suffix=.log # Log file name suffix. server.tomcat.additional-tld-skip-patterns= # Comma-separated list ofadditional patterns that match jars to ignore for TLD scanning. server.tomcat.background-processor-delay=30 # Delay in seconds between theinvocation of backgroundProcess methods. server.tomcat.basedir= # Tomcat base directory. If not specified a temporarydirectory will be used. server.tomcat.internal-proxies=10 . d&#123;1,3&#125; . d&#123;1,3&#125; . d&#123;1,3&#125; | 192 .168 . d&#123;1,3&#125; . d&#123;1,3&#125; | 169 .254 . d&#123;1,3&#125; . d&#123;1,3&#125; | 127 . d&#123;1,3&#125; . d&#123;1,3&#125; . d&#123;1,3&#125; | 172 .1[6-9]&#123;1&#125; . d&#123;1,3&#125; . d&#123;1,3&#125; | 172 .2[0-9]&#123;1&#125; . d&#123;1,3&#125; . d&#123;1,3&#125; | 172 .3[0-1]&#123;1&#125; . d&#123;1,3&#125; . d&#123;1,3&#125; # regular expression matchingtrusted IP addresses. server.tomcat.max-connections= # Maximum number of connections that the serverwill accept and process at any given time. server.tomcat.max-http-post-size=0 # Maximum size in bytes of the HTTP postcontent. server.tomcat.max-threads=0 # Maximum amount of worker threads. server.tomcat.min-spare-threads=0 # Minimum amount of worker threads. server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used tooverride the original port value. server.tomcat.protocol-header= # Header that holds the incoming protocol,usually named &quot;X-Forwarded-Proto&quot;. server.tomcat.protocol-header-https-value=https # Value of the protocol headerthat indicates that the incoming request uses SSL. server.tomcat.redirect-context-root= # Whether requests to the context rootshould be redirected by appending a / to the path. server.tomcat.remote-ip-header= # Name of the http header from which theremote ip is extracted. For instance `X-FORWARDED-FOR ` server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode theURI. server.undertow.accesslog.dir= # Undertow access log directory. server.undertow.accesslog.enabled=false # Enable access log. server.undertow.accesslog.pattern=common # Format pattern for access logs. server.undertow.accesslog.prefix=access_log. # Log file name prefix. server.undertow.accesslog.rotate=true # Enable access log rotation. server.undertow.accesslog.suffix=log # Log file name suffix. server.undertow.buffer-size= # Size of each buffer in bytes. server.undertow.buffers-per-region= # Number of buffer per region. server.undertow.direct-buffers= # Allocate buffers outside the Java heap. server.undertow.io-threads= # Number of I/O threads to create for the worker. server.undertow.max-http-post-size=0 # Maximum size in bytes of the HTTP postcontent. server.undertow.worker-threads= # Number of worker threads. # FREEMARKER( [FreeMarkerAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java))spring.freemarker.allow-request-override=false # Set whetherHttpServletRequest attributes are allowed to override (hide) controllergenerated model attributes of the same name. spring.freemarker.allow-session-override=false # Set whether HttpSessionattributes are allowed to override (hide) controller generated model attributesof the same name. spring.freemarker.cache=false # Enable template caching. spring.freemarker.charset=UTF-8 # Template encoding. spring.freemarker.check-template-location=true # Check that the templateslocation exists. spring.freemarker.content-type=text/html # Content-Type value. spring.freemarker.enabled=true # Enable MVC view resolution for thistechnology. spring.freemarker.expose-request-attributes=false # Set whether all requestattributes should be added to the model prior to merging with the template. spring.freemarker.expose-session-attributes=false # Set whether allHttpSession attributes should be added to the model prior to merging with thetemplate. spring.freemarker.expose-spring-macro-helpers=true # Set whether to expose aRequestContext for use by Spring&apos;s macro library, under the name&quot;springMacroRequestContext&quot;. spring.freemarker.prefer-file-system-access=true # Prefer file system accessfor template loading. File system access enables hot detection of templatechanges. spring.freemarker.prefix= # Prefix that gets prepended to view names whenbuilding a URL. spring.freemarker.request-context-attribute= # Name of the RequestContextattribute for all views. spring.freemarker.settings. = # Well-known FreeMarker keys which will bepassed to FreeMarker&apos;s Configuration. spring.freemarker.suffix= # Suffix that gets appended to view names whenbuilding a URL. spring.freemarker.template-loader-path=classpath:/templates/ # Comma-separatedlist of template paths. spring.freemarker.view-names= # White list of view names that can beresolved. # GROOVY TEMPLATES( [GroovyTemplateAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java))spring.groovy.template.allow-request-override=false # Set whetherHttpServletRequest attributes are allowed to override (hide) controllergenerated model attributes of the same name. spring.groovy.template.allow-session-override=false # Set whether HttpSessionattributes are allowed to override (hide) controller generated model attributesof the same name. spring.groovy.template.cache= # Enable template caching. spring.groovy.template.charset=UTF-8 # Template encoding. spring.groovy.template.check-template-location=true # Check that the templateslocation exists. spring.groovy.template.configuration. = # See GroovyMarkupConfigurer spring.groovy.template.content-type=test/html # Content-Type value. spring.groovy.template.enabled=true # Enable MVC view resolution for thistechnology. spring.groovy.template.expose-request-attributes=false # Set whether allrequest attributes should be added to the model prior to merging with thetemplate. spring.groovy.template.expose-session-attributes=false # Set whether allHttpSession attributes should be added to the model prior to merging with thetemplate. spring.groovy.template.expose-spring-macro-helpers=true # Set whether toexpose a RequestContext for use by Spring&apos;s macro library, under the name&quot;springMacroRequestContext&quot;. spring.groovy.template.prefix= # Prefix that gets prepended to view names whenbuilding a URL. spring.groovy.template.request-context-attribute= # Name of the RequestContextattribute for all views. spring.groovy.template.resource-loader-path=classpath:/templates/ # Templatepath. spring.groovy.template.suffix=.tpl # Suffix that gets appended to view nameswhen building a URL. spring.groovy.template.view-names= # White list of view names that can beresolved. # SPRING HATEOAS( [HateoasProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HateoasProperties.java))spring.hateoas.use-hal-as-default-json-/images/media-type=true # Specify ifapplication/hal+json responses should be sent to requests that acceptapplication/json. # HTTP message conversion spring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapperto use for HTTP message conversion. Set to &quot;gson&quot; to force the use of Gson whenboth it and Jackson are on the classpath. # HTTP encoding( [HttpEncodingProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpEncodingProperties.java))spring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses.Added to the &quot;Content-Type&quot; header if not set explicitly. spring.http.encoding.enabled=true # Enable http encoding support. spring.http.encoding.force= # Force the encoding to the configured charset onHTTP requests and responses. spring.http.encoding.force-request= # Force the encoding to the configuredcharset on HTTP requests. Defaults to true when &quot;force&quot; has not been specified. spring.http.encoding.force-response= # Force the encoding to the configuredcharset on HTTP responses. spring.http.encoding.mapping= # Locale to Encoding mapping. # MULTIPART( [MultipartProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java))spring.http.multipart.enabled=true # Enable support of multi-part uploads. spring.http.multipart.file-size-threshold=0 # Threshold after which files willbe written to disk. Values can use the suffixed &quot;MB&quot; or &quot;KB&quot; to indicate aMegabyte or Kilobyte size. spring.http.multipart.location= # Inter/images/mediate location of uploaded files. spring.http.multipart.max-file-size=1MB # Max file size. Values can use thesuffixed &quot;MB&quot; or &quot;KB&quot; to indicate a Megabyte or Kilobyte size. spring.http.multipart.max-request-size=10MB # Max request size. Values can usethe suffixed &quot;MB&quot; or &quot;KB&quot; to indicate a Megabyte or Kilobyte size. spring.http.multipart.resolve-lazily=false # Whether to resolve the multipartrequest lazily at the time of file or parameter access. # JACKSON( [JacksonProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonProperties.java))spring.jackson.date-format= # Date format string or a fully-qualified dateformat class name. For instance `yyyy-MM-dd HH:mm:ss `. spring.jackson.default-property-inclusion= # Controls the inclusion ofproperties during serialization. spring.jackson.deserialization. = # Jackson on/off features that affect theway Java objects are deserialized. spring.jackson.generator. = # Jackson on/off features for generators. spring.jackson.joda-date-time-format= # Joda date time format string. If notconfigured, &quot;date-format&quot; will be used as a fallback if it is configured with aformat string. spring.jackson.locale= # Locale used for formatting. spring.jackson.mapper. = # Jackson general purpose on/off features. spring.jackson.parser. = # Jackson on/off features for parsers. spring.jackson.property-naming-strategy= # One of the constants on Jackson&apos;sPropertyNamingStrategy. Can also be a fully-qualified class name of aPropertyNamingStrategy subclass. spring.jackson.serialization. = # Jackson on/off features that affect the wayJava objects are serialized. spring.jackson.time-zone= # Time zone used when formatting dates. For instance `America/Los_Angeles ` # JERSEY( [JerseyProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyProperties.java))spring.jersey.application-path= # Path that serves as the base URI for theapplication. Overrides the value of &quot; @ApplicationPath&quot; if specified. spring.jersey.filter.order=0 # Jersey filter chain order. spring.jersey.init. = # Init parameters to pass to Jersey via the servlet orfilter. spring.jersey.servlet.load-on-startup=-1 # Load on startup priority of theJersey servlet. spring.jersey.type=servlet # Jersey integration type. # SPRING LDAP( [LdapProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapProperties.java))spring.ldap.urls= # LDAP URLs of the server. spring.ldap.base= # Base suffix from which all operations should originate. spring.ldap.username= # Login user of the server. spring.ldap.password= # Login password of the server. spring.ldap.base-environment. = # LDAP specification settings. # EMBEDDED LDAP( [EmbeddedLdapProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapProperties.java))spring.ldap.embedded.base-dn= # The base DN spring.ldap.embedded.credential.username= # Embedded LDAP username. spring.ldap.embedded.credential.password= # Embedded LDAP password. spring.ldap.embedded.ldif=classpath:schema.ldif # Schema (LDIF) scriptresource reference. spring.ldap.embedded.port= # Embedded LDAP port. spring.ldap.embedded.validation.enabled=true # Enable LDAP schema validation. spring.ldap.embedded.validation.schema= # Path to the custom schema. # SPRING MOBILE DEVICE VIEWS( [DeviceDelegatingViewResolverAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java))spring.mobile.devicedelegatingviewresolver.enable-fallback=false # Enablesupport for fallback resolution. spring.mobile.devicedelegatingviewresolver.enabled=false # Enable device viewresolver. spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix thatgets prepended to view names for mobile devices. spring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that getsappended to view names for mobile devices. spring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that getsprepended to view names for normal devices. spring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that getsappended to view names for normal devices. spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix thatgets prepended to view names for tablet devices. spring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that getsappended to view names for tablet devices. # SPRING MOBILE SITE PREFERENCE( [SitePreferenceAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/SitePreferenceAutoConfiguration.java))spring.mobile.sitepreference.enabled=true # Enable SitePreferenceHandler. # MUSTACHE TEMPLATES( [MustacheAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java))spring.mustache.allow-request-override= # Set whether HttpServletRequestattributes are allowed to override (hide) controller generated model attributesof the same name. spring.mustache.allow-session-override= # Set whether HttpSession attributesare allowed to override (hide) controller generated model attributes of the samename. spring.mustache.cache= # Enable template caching. spring.mustache.charset= # Template encoding. spring.mustache.check-template-location= # Check that the templates locationexists. spring.mustache.content-type= # Content-Type value. spring.mustache.enabled= # Enable MVC view resolution for this technology. spring.mustache.expose-request-attributes= # Set whether all requestattributes should be added to the model prior to merging with the template. spring.mustache.expose-session-attributes= # Set whether all HttpSessionattributes should be added to the model prior to merging with the template. spring.mustache.expose-spring-macro-helpers= # Set whether to expose aRequestContext for use by Spring&apos;s macro library, under the name&quot;springMacroRequestContext&quot;. spring.mustache.prefix=classpath:/templates/ # Prefix to apply to templatenames. spring.mustache.request-context-attribute= # Name of the RequestContextattribute for all views. spring.mustache.suffix=.html # Suffix to apply to template names. spring.mustache.view-names= # White list of view names that can be resolved. # SPRING MVC( [WebMvcProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java))spring.mvc.async.request-timeout= # Amount of time (in milliseconds) beforeasynchronous request handling times out. spring.mvc.date-format= # Date format to use. For instance `dd/MM/yyyy `. spring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to theFrameworkServlet doService method. spring.mvc.dispatch-options-request=true # Dispatch OPTIONS requests to theFrameworkServlet doService method. spring.mvc.favicon.enabled=true # Enable resolution of favicon.ico. spring.mvc.formcontent.putfilter.enabled=true # Enable Spring&apos;sHttpPutFormContentFilter. spring.mvc.ignore-default-model-on-redirect=true # If the content of the&quot;default&quot; model should be ignored during redirect scenarios. spring.mvc.locale= # Locale to use. By default, this locale is overridden bythe &quot;Accept-Language&quot; header. spring.mvc.locale-resolver=accept-header # Define how the locale should beresolved. spring.mvc.log-resolved-exception=false # Enable warn logging of exceptionsresolved by a &quot;HandlerExceptionResolver&quot;. spring.mvc./images/media-types. = # Maps file extensions to /images/media types for contentnegotiation. spring.mvc.message-codes-resolver-format= # Formatting strategy for messagecodes. For instance `PREFIX_ERROR_CODE `. spring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the SpringWeb Services servlet. spring.mvc.static-path-pattern=/ # Path pattern used for staticresources. spring.mvc.throw-exception-if-no-handler-found=false # If a&quot;NoHandlerFoundException&quot; should be thrown if no Handler was found to process arequest. spring.mvc.view.prefix= # Spring MVC view prefix. spring.mvc.view.suffix= # Spring MVC view suffix. # SPRING RESOURCES HANDLING( [ResourceProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java))spring.resources.add-mappings=true # Enable default resource handling. spring.resources.cache-period= # Cache period for the resources served by theresource handler, in seconds. spring.resources.chain.cache=true # Enable caching in the Resource chain. spring.resources.chain.enabled= # Enable the Spring Resource Handling chain.Disabled by default unless at least one strategy has been enabled. spring.resources.chain.gzipped=false # Enable resolution of already gzippedresources. spring.resources.chain.html-application-cache=false # Enable HTML5 applicationcache manifest rewriting. spring.resources.chain.strategy.content.enabled=false # Enable the contentVersion Strategy. spring.resources.chain.strategy.content.paths=/ # Comma-separated list ofpatterns to apply to the Version Strategy. spring.resources.chain.strategy.fixed.enabled=false # Enable the fixed VersionStrategy. spring.resources.chain.strategy.fixed.paths=/ # Comma-separated list ofpatterns to apply to the Version Strategy. spring.resources.chain.strategy.fixed.version= # Version string to use for theVersion Strategy. spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources. # SPRING SESSION( [SessionProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java))spring.session.hazelcast.flush-mode=on-save # Sessions flush mode. spring.session.hazelcast.map-name=spring:session:sessions # Name of the mapused to store sessions. spring.session.jdbc.initializer.enabled= # Create the required session tableson startup if necessary. Enabled automatically if the default table name is setor a custom schema is configured. spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema- @ @platform @ @.sql # Path to the SQL file to use to initialize the database schema. spring.session.jdbc.table-name=SPRING_SESSION # Name of database table used tostore sessions. spring.session.mongo.collection-name=sessions # Collection name used to storesessions. spring.session.redis.flush-mode=on-save # Sessions flush mode. spring.session.redis.namespace= # Namespace for keys used to store sessions. spring.session.store-type= # Session store type. # SPRING SOCIAL( [SocialWebAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java))spring.social.auto-connection-views=false # Enable the connection status viewfor supported providers. # SPRING SOCIAL FACEBOOK( [FacebookAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAutoConfiguration.java))spring.social.facebook.app-id= # your application&apos;s Facebook App ID spring.social.facebook.app-secret= # your application&apos;s Facebook App Secret # SPRING SOCIAL LINKEDIN( [LinkedInAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/LinkedInAutoConfiguration.java))spring.social.linkedin.app-id= # your application&apos;s LinkedIn App ID spring.social.linkedin.app-secret= # your application&apos;s LinkedIn App Secret # SPRING SOCIAL TWITTER( [TwitterAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/TwitterAutoConfiguration.java))spring.social.twitter.app-id= # your application&apos;s Twitter App ID spring.social.twitter.app-secret= # your application&apos;s Twitter App Secret # THYMELEAF( [ThymeleafAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java))spring.thymeleaf.cache=true # Enable template caching. spring.thymeleaf.check-template=true # Check that the template exists beforerendering it. spring.thymeleaf.check-template-location=true # Check that the templateslocation exists. spring.thymeleaf.content-type=text/html # Content-Type value. spring.thymeleaf.enabled=true # Enable MVC Thymeleaf view resolution. spring.thymeleaf.encoding=UTF-8 # Template encoding. spring.thymeleaf.excluded-view-names= # Comma-separated list of view namesthat should be excluded from resolution. spring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. Seealso StandardTemplateModeHandlers. spring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended toview names when building a URL. spring.thymeleaf.suffix=.html # Suffix that gets appended to view names whenbuilding a URL. spring.thymeleaf.template-resolver-order= # Order of the template resolver inthe chain. spring.thymeleaf.view-names= # Comma-separated list of view names that can beresolved. # SPRING WEB SERVICES( [WebServicesProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/WebServicesProperties.java))spring.webservices.path=/services # Path that serves as the base URI for theservices. spring.webservices.servlet.init= # Servlet init parameters to pass to SpringWeb Services. spring.webservices.servlet.load-on-startup=-1 # Load on startup priority ofthe Spring Web Services servlet. # ---------------------------------------- # SECURITY PROPERTIES # ---------------------------------------- # SECURITY( [SecurityProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java))security.basic.authorize-mode=role # Security authorize mode to apply. security.basic.enabled=true # Enable basic authentication. security.basic.path=/ # Comma-separated list of paths to secure. security.basic.realm=Spring # HTTP basic realm name. security.enable-csrf=false # Enable Cross Site Request Forgery support. security.filter-order=0 # Security filter chain order. security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Securityfilter chain dispatcher types. security.headers.cache=true # Enable cache control HTTP headers. security.headers.content-security-policy= # Value for content security policyheader. security.headers.content-security-policy-mode=default # Content securitypolicy mode. security.headers.content-type=true # Enable &quot;X-Content-Type-Options&quot; header. security.headers.frame=true # Enable &quot;X-Frame-Options&quot; header. security.headers.hsts=all # HTTP Strict Transport Security (HSTS) mode (none,domain, all). security.headers.xss=true # Enable cross site scripting (XSS) protection. security.ignored= # Comma-separated list of paths to exclude from the defaultsecured paths. security.require-ssl=false # Enable secure channel for all requests. security.sessions=stateless # Session creation policy (always, never,if_required, stateless). security.user.name=user # Default user name. security.user.password= # Password for the default user name. A randompassword is logged on startup by default. security.user.role=USER # Granted roles for the default user name. # SECURITY OAUTH2 CLIENT( [OAuth2ClientProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/OAuth2ClientProperties.java))security.oauth2.client.client-id= # OAuth2 client id. security.oauth2.client.client-secret= # OAuth2 client secret. A random secretis generated by default # SECURITY OAUTH2 RESOURCES( [ResourceServerProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerProperties.java))security.oauth2.resource.filter-order= # The order of the filter chain used toauthenticate tokens. security.oauth2.resource.id= # Identifier of the resource. security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be setif the value is not available and the key is public. security.oauth2.resource.jwt.key-value= # The verification key of the JWTtoken. Can either be a symmetric secret or PEM-encoded RSA public key. security.oauth2.resource.prefer-token-info=true # Use the token info, can beset to false to use the user info. security.oauth2.resource.service-id=resource # security.oauth2.resource.token-info-uri= # URI of the token decodingendpoint. security.oauth2.resource.token-type= # The token type to send when using theuserInfoUri. security.oauth2.resource.user-info-uri= # URI of the user endpoint. # SECURITY OAUTH2 SSO( [OAuth2SsoProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2SsoProperties.java))security.oauth2.sso.filter-order= # Filter order to apply if not providing anexplicit WebSecurityConfigurerAdapter security.oauth2.sso.login-path=/login # Path to the login page, i.e. the onethat triggers the redirect to the OAuth2 Authorization Server # ---------------------------------------- # DATA PROPERTIES # ---------------------------------------- # FLYWAY( [FlywayProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java))flyway.baseline-description= # flyway.baseline-version=1 # version to start migration flyway.baseline-on-migrate= # flyway.check-location=false # Check that migration scripts location exists. flyway.clean-on-validation-error= # flyway.enabled=true # Enable flyway. flyway.encoding= # flyway.ignore-failed-future-migration= # flyway.init-sqls= # SQL statements to execute to initialize a connectionim/images/mediately after obtaining it. flyway.locations=classpath:db/migration # locations of migrations scripts flyway.out-of-order= # flyway.password= # JDBC password if you want Flyway to create its ownDataSource flyway.placeholder-prefix= # flyway.placeholder-replacement= # flyway.placeholder-suffix= # flyway.placeholders. = # flyway.schemas= # schemas to update flyway.sql-migration-prefix=V # flyway.sql-migration-separator= # flyway.sql-migration-suffix=.sql # flyway.table= # flyway.url= # JDBC url of the database to migrate. If not set, the primaryconfigured data source is used. flyway.user= # Login user of the database to migrate. flyway.validate-on-migrate= # # LIQUIBASE( [LiquibaseProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java))liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Changelog configuration path. liquibase.check-change-log-location=true # Check the change log locationexists. liquibase.contexts= # Comma-separated list of runtime contexts to use. liquibase.default-schema= # Default database schema. liquibase.drop-first=false # Drop the database schema first. liquibase.enabled=true # Enable liquibase support. liquibase.labels= # Comma-separated list of runtime labels to use. liquibase.parameters. = # Change log parameters. liquibase.password= # Login password of the database to migrate. liquibase.rollback-file= # File to which rollback SQL will be written when anupdate is performed. liquibase.url= # JDBC url of the database to migrate. If not set, the primaryconfigured data source is used. liquibase.user= # Login user of the database to migrate. # COUCHBASE( [CouchbaseProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java))spring.couchbase.bootstrap-hosts= # Couchbase nodes (host or IP address) tobootstrap from. spring.couchbase.bucket.name=default # Name of the bucket to connect to. spring.couchbase.bucket.password= # Password of the bucket. spring.couchbase.env.endpoints.key-value=1 # Number of sockets per nodeagainst the Key/value service. spring.couchbase.env.endpoints.query=1 # Number of sockets per node againstthe Query (N1QL) service. spring.couchbase.env.endpoints.view=1 # Number of sockets per node against theview service. spring.couchbase.env.ssl.enabled= # Enable SSL support. Enabled automaticallyif a &quot;keyStore&quot; is provided unless specified otherwise. spring.couchbase.env.ssl.key-store= # Path to the JVM key store that holds thecertificates. spring.couchbase.env.ssl.key-store-password= # Password used to access the keystore. spring.couchbase.env.timeouts.connect=5000 # Bucket connections timeout inmilliseconds. spring.couchbase.env.timeouts.key-value=2500 # Blocking operations performedon a specific key timeout in milliseconds. spring.couchbase.env.timeouts.query=7500 # N1QL query operations timeout inmilliseconds. spring.couchbase.env.timeouts.socket-connect=1000 # Socket connect connectionstimeout in milliseconds. spring.couchbase.env.timeouts.view=7500 # Regular and geospatial viewoperations timeout in milliseconds. # DAO( [PersistenceExceptionTranslationAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java))spring.dao.exceptiontranslation.enabled=true # Enable thePersistenceExceptionTranslationPostProcessor. # CASSANDRA( [CassandraProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java))spring.data.cassandra.cluster-name= # Name of the Cassandra cluster. spring.data.cassandra.compression=none # Compression supported by theCassandra binary protocol. spring.data.cassandra.connect-timeout-millis= # Socket option: connection timeout. spring.data.cassandra.consistency-level= # Queries consistency level. spring.data.cassandra.contact-points=localhost # Comma-separated list ofcluster node addresses. spring.data.cassandra.fetch-size= # Queries default fetch size. spring.data.cassandra.keyspace-name= # Keyspace name to use. spring.data.cassandra.load-balancing-policy= # Class name of the loadbalancing policy. spring.data.cassandra.port= # Port of the Cassandra server. spring.data.cassandra.password= # Login password of the server. spring.data.cassandra.read-timeout-millis= # Socket option: read time out. spring.data.cassandra.reconnection-policy= # Reconnection policy class. spring.data.cassandra.retry-policy= # Class name of the retry policy. spring.data.cassandra.serial-consistency-level= # Queries serial consistencylevel. spring.data.cassandra.schema-action=none # Schema action to take at startup. spring.data.cassandra.ssl=false # Enable SSL support. spring.data.cassandra.username= # Login user of the server. # DATA COUCHBASE( [CouchbaseDataProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseDataProperties.java))spring.data.couchbase.auto-index=false # Automatically create views andindexes. spring.data.couchbase.consistency=read-your-own-writes # Consistency to applyby default on generated queries. spring.data.couchbase.repositories.enabled=true # Enable Couchbaserepositories. # ELASTICSEARCH( [ElasticsearchProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchProperties.java))spring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch clustername. spring.data.elasticsearch.cluster-nodes= # Comma-separated list of clusternode addresses. If not specified, starts a client node. spring.data.elasticsearch.properties. = # Additional properties used toconfigure the client. spring.data.elasticsearch.repositories.enabled=true # Enable Elasticsearchrepositories. # DATA LDAP spring.data.ldap.repositories.enabled=true # Enable LDAP repositories. # MONGODB( [MongoProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java))spring.data.mongodb.authentication-database= # Authentication database name. spring.data.mongodb.database=test # Database name. spring.data.mongodb.field-naming-strategy= # Fully qualified name of theFieldNamingStrategy to use. spring.data.mongodb.grid-fs-database= # GridFS database name. spring.data.mongodb.host=localhost # Mongo server host. Cannot be set withuri. spring.data.mongodb.password= # Login password of the mongo server. Cannot beset with uri. spring.data.mongodb.port=27017 # Mongo server port. Cannot be set with uri. spring.data.mongodb.repositories.enabled=true # Enable Mongo repositories. spring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. Cannotbe set with host, port and credentials. spring.data.mongodb.username= # Login user of the mongo server. Cannot be setwith uri. # DATA REDIS spring.data.redis.repositories.enabled=true # Enable Redis repositories. # NEO4J( [Neo4jProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jProperties.java))spring.data.neo4j.compiler= # Compiler to use. spring.data.neo4j.embedded.enabled=true # Enable embedded mode if the embeddeddriver is available. spring.data.neo4j.open-in-view=false # Register OpenSessionInViewInterceptor.Binds a Neo4j Session to the thread for the entire processing of the request. spring.data.neo4j.password= # Login password of the server. spring.data.neo4j.repositories.enabled=true # Enable Neo4j repositories. spring.data.neo4j.uri= # URI used by the driver. Auto-detected by default. spring.data.neo4j.username= # Login user of the server. # DATA REST( [RepositoryRestProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/rest/RepositoryRestProperties.java))spring.data.rest.base-path= # Base path to be used by Spring Data REST toexpose repository resources. spring.data.rest.default-page-size= # Default size of pages. spring.data.rest.detection-strategy=default # Strategy to use to determinewhich repositories get exposed. spring.data.rest.enable-enum-translation= # Enable enum value translation viathe Spring Data REST default resource bundle. spring.data.rest.limit-param-name= # Name of the URL query string parameterthat indicates how many results to return at once. spring.data.rest.max-page-size= # Maximum size of pages. spring.data.rest.page-param-name= # Name of the URL query string parameterthat indicates what page to return. spring.data.rest.return-body-on-create= # Return a response body aftercreating an entity. spring.data.rest.return-body-on-update= # Return a response body afterupdating an entity. spring.data.rest.sort-param-name= # Name of the URL query string parameterthat indicates what direction to sort results. # SOLR( [SolrProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrProperties.java))spring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if&quot;zk-host&quot; is set. spring.data.solr.repositories.enabled=true # Enable Solr repositories. spring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT. # DATASOURCE( [DataSourceAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java)&amp;[DataSourceProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java))spring.datasource.continue-on-error=false # Do not stop if an error occurswhile initializing the database. spring.datasource.data= # Data (DML) script resource references. spring.datasource.data-username= # User of the database to execute DML scripts(if different). spring.datasource.data-password= # Password of the database to execute DMLscripts (if different). spring.datasource.dbcp2. = # Commons DBCP2 specific settings spring.datasource.driver-class-name= # Fully qualified name of the JDBCdriver. Auto-detected based on the URL by default. spring.datasource.generate-unique-name=false # Generate a random datasourcename. spring.datasource.hikari. = # Hikari specific settings spring.datasource.initialize=true # Populate the database using &apos;data.sql&apos;. spring.datasource.jmx-enabled=false # Enable JMX support (if provided by theunderlying pool). spring.datasource.jndi-name= # JNDI location of the datasource. Class, url,username &amp; password are ignored when set. spring.datasource.name=testdb # Name of the datasource. spring.datasource.password= # Login password of the database. spring.datasource.platform=all # Platform to use in the schema resource(schema- $&#123;platform&#125;.sql). spring.datasource.schema= # Schema (DDL) script resource references. spring.datasource.schema-username= # User of the database to execute DDLscripts (if different). spring.datasource.schema-password= # Password of the database to execute DDLscripts (if different). spring.datasource.separator=; # Statement separator in SQL initializationscripts. spring.datasource.sql-script-encoding= # SQL scripts encoding. spring.datasource.tomcat. = # Tomcat datasource specific settings spring.datasource.type= # Fully qualified name of the connection poolimplementation to use. By default, it is auto-detected from the classpath. spring.datasource.url= # JDBC url of the database. spring.datasource.username= # JEST (Elasticsearch HTTP client)( [JestProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jest/JestProperties.java))spring.elasticsearch.jest.connection-timeout=3000 # Connection timeout inmilliseconds. spring.elasticsearch.jest.multi-threaded=true # Enable connection requestsfrom multiple execution threads. spring.elasticsearch.jest.password= # Login password. spring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client shoulduse. spring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client shoulduse. spring.elasticsearch.jest.read-timeout=3000 # Read timeout in milliseconds. spring.elasticsearch.jest.uris=http://localhost:9200 # Comma-separated list ofthe Elasticsearch instances to use. spring.elasticsearch.jest.username= # Login user. # H2 Web Console( [H2ConsoleProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleProperties.java))spring.h2.console.enabled=false # Enable the console. spring.h2.console.path=/h2-console # Path at which the console will beavailable. spring.h2.console.settings.trace=false # Enable trace output. spring.h2.console.settings.web-allow-others=false # Enable remote access. # JOOQ( [JooqAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfiguration.java))spring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with theconfigured datasource. For instance `POSTGRES ` # JPA( [JpaBaseConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java),[HibernateJpaAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java))spring.data.jpa.repositories.enabled=true # Enable JPA repositories. spring.jpa.database= # Target database to operate on, auto-detected bydefault. Can be alternatively set using the &quot;databasePlatform&quot; property. spring.jpa.database-platform= # Name of the target database to operate on,auto-detected by default. Can be alternatively set using the &quot;Database&quot; enum. spring.jpa.generate-ddl=false # Initialize the schema on startup. spring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the&quot;hibernate.hbm2ddl.auto&quot; property. Default to &quot;create-drop&quot; when using anembedded database, &quot;none&quot; otherwise. spring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit namingstrategy fully qualified name. spring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical namingstrategy fully qualified name. spring.jpa.hibernate.naming.strategy= # Hibernate 4 naming strategy fullyqualified name. Not supported with Hibernate 5. spring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate&apos;s newerIdentifierGenerator for AUTO, TABLE and SEQUENCE. spring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor.Binds a JPA EntityManager to the thread for the entire processing of therequest. spring.jpa.properties. = # Additional native properties to set on the JPAprovider. spring.jpa.show-sql=false # Enable logging of SQL statements. # JTA( [JtaAutoConfiguration](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfiguration.java))spring.jta.enabled=true # Enable JTA support. spring.jta.log-dir= # Transaction logs directory. spring.jta.transaction-manager-id= # Transaction manager unique identifier. # ATOMIKOS( [AtomikosProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosProperties.java))spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout,in seconds, for borrowing connections from the pool. spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true #Whether or not to ignore the transacted flag when creating session. spring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whetheror not local transactions are desired. spring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, inseconds, between runs of the pool&apos;s maintenance thread. spring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds,after which connections are cleaned up from the pool. spring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds,that a connection can be pooled for before being destroyed. 0 denotes no limit. spring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size ofthe pool. spring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size ofthe pool. spring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, inseconds, for borrowed connections. 0 denotes no limit. spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery. spring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, inseconds, for borrowing connections from the pool. spring.jta.atomikos.datasource.default-isolation-level= # Default isolationlevel of connections provided by the pool. spring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, forestablishing a database connection. spring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds,between runs of the pool&apos;s maintenance thread. spring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, afterwhich connections are cleaned up from the pool. spring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that aconnection can be pooled for before being destroyed. 0 denotes no limit. spring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of thepool. spring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of thepool. spring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds,for borrowed connections. 0 denotes no limit. spring.jta.atomikos.datasource.test-query= # SQL query or statement used tovalidate a connection before returning it. spring.jta.atomikos.datasource.unique-resource-name=dataSource # The uniquename used to identify the resource during recovery. spring.jta.atomikos.properties.checkpoint-interval=500 # Interval betweencheckpoints. spring.jta.atomikos.properties.console-file-count=1 # Number of debug logsfiles that can be created. spring.jta.atomikos.properties.console-file-limit=-1 # How many bytes can bestored at most in debug logs files. spring.jta.atomikos.properties.console-file-name=tm.out # Debug logs filename. spring.jta.atomikos.properties.console-log-level=warn # Console log level. spring.jta.atomikos.properties.default-jta-timeout=10000 # Default timeout forJTA transactions. spring.jta.atomikos.properties.enable-logging=true # Enable disk logging. spring.jta.atomikos.properties.force-shutdown-on-vm-exit=false # Specify if aVM shutdown should trigger forced shutdown of the transaction core. spring.jta.atomikos.properties.log-base-dir= # Directory in which the logfiles should be stored. spring.jta.atomikos.properties.log-base-name=tmlog # Transactions log filebase name. spring.jta.atomikos.properties.max-actives=50 # Maximum number of activetransactions. spring.jta.atomikos.properties.max-timeout=300000 # Maximum timeout (inmilliseconds) that can be allowed for transactions. spring.jta.atomikos.properties.output-dir= # Directory in which to store thedebug log files. spring.jta.atomikos.properties.serial-jta-transactions=true # Specify ifsub-transactions should be joined when possible. spring.jta.atomikos.properties.service= # Transaction manager implementationthat should be started. spring.jta.atomikos.properties.threaded-two-phase-commit=true # Use different(and concurrent) threads for two-phase commit on the participating resources. spring.jta.atomikos.properties.transaction-manager-unique-name= # Transactionmanager&apos;s unique name. # BITRONIX spring.jta.bitronix.connectionfactory.acquire-increment=1 # Number ofconnections to create when growing the pool. spring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, inseconds, to wait before trying to acquire a connection again after an invalidconnection was acquired. spring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, inseconds, for acquiring connections from the pool. spring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whetheror not the transaction manager should allow mixing XA and non-XA transactions. spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false #Whether or not the transaction timeout should be set on the XAResource when itis enlisted. spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true #Whether or not resources should be enlisted and delisted automatically. spring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whetheror not produces and consumers should be cached. spring.jta.bitronix.connectionfactory.defer-connection-release=true # Whetheror not the provider can run many transactions on the same connection andsupports transaction interleaving. spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whetheror not recovery failures should be ignored. spring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds,after which connections are cleaned up from the pool. spring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size ofthe pool. 0 denotes no limit. spring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size ofthe pool. spring.jta.bitronix.connectionfactory.password= # The password to use toconnect to the JMS provider. spring.jta.bitronix.connectionfactory.share-transaction-connections=false #Whether or not connections in the ACCESSIBLE state can be shared within thecontext of a transaction. spring.jta.bitronix.connectionfactory.test-connections=true # Whether or notconnections should be tested when acquired from the pool. spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # Theposition that this resource should take during two-phase commit (always first isInteger.MIN_VALUE, always last is Integer.MAX_VALUE). spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # Theunique name used to identify the resource during recovery. spring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOINshould be used when starting XAResources.spring.jta.bitronix.connectionfactory.user= # The user to use to connect tothe JMS provider. spring.jta.bitronix.datasource.acquire-increment=1 # Number of connections tocreate when growing the pool. spring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, towait before trying to acquire a connection again after an invalid connection wasacquired. spring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds,for acquiring connections from the pool. spring.jta.bitronix.datasource.allow-local-transactions=true # Whether or notthe transaction manager should allow mixing XA and non-XA transactions. spring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether ornot the transaction timeout should be set on the XAResource when it isenlisted. spring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether ornot resources should be enlisted and delisted automatically. spring.jta.bitronix.datasource.cursor-holdability= # The default cursorholdability for connections. spring.jta.bitronix.datasource.defer-connection-release=true # Whether or notthe database can run many transactions on the same connection and supportstransaction interleaving. spring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether or notConnection.isValid() is called when acquiring a connection from the pool. spring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether or notrecovery failures should be ignored. spring.jta.bitronix.datasource.isolation-level= # The default isolation levelfor connections. spring.jta.bitronix.datasource.local-auto-commit= # The default auto-commitmode for local transactions. spring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, forestablishing a database connection. spring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, afterwhich connections are cleaned up from the pool. spring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of thepool. 0 denotes no limit. spring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of thepool. spring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The targetsize of the prepared statement cache. 0 disables the cache. spring.jta.bitronix.datasource.share-transaction-connections=false # Whetheror not connections in the ACCESSIBLE state can be shared within the context of atransaction. spring.jta.bitronix.datasource.test-query= # SQL query or statement used tovalidate a connection before returning it. spring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position thatthis resource should take during two-phase commit (always first isInteger.MIN_VALUE, always last is Integer.MAX_VALUE). spring.jta.bitronix.datasource.unique-name=dataSource # The unique name usedto identify the resource during recovery. spring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should beused when starting XAResources.spring.jta.bitronix.properties.allow-multiple-lrc=false # Allow multiple LRCresources to be enlisted into the same transaction. spring.jta.bitronix.properties.asynchronous2-pc=false # Enable asynchronouslyexecution of two phase commit. spring.jta.bitronix.properties.background-recovery-interval-seconds=60 #Interval in seconds at which to run the recovery process in the background. spring.jta.bitronix.properties.current-node-only-recovery=true # Recover onlythe current node. spring.jta.bitronix.properties.debug-zero-resource-transaction=false # Log thecreation and commit call stacks of transactions executed without a singleenlisted resource. spring.jta.bitronix.properties.default-transaction-timeout=60 # Defaulttransaction timeout in seconds. spring.jta.bitronix.properties.disable-jmx=false # Enable JMX support. spring.jta.bitronix.properties.exception-analyzer= # Set the fully qualifiedname of the exception analyzer implementation to use. spring.jta.bitronix.properties.filter-log-status=false # Enable filtering oflogs so that only mandatory logs are written. spring.jta.bitronix.properties.force-batching-enabled=true # Set if diskforces are batched. spring.jta.bitronix.properties.forced-write-enabled=true # Set if logs areforced to disk. spring.jta.bitronix.properties.graceful-shutdown-interval=60 # Maximum amountof seconds the TM will wait for transactions to get done before aborting them atshutdown time. spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry. spring.jta.bitronix.properties.jndi-user-transaction-name= # JNDI name of theUserTransaction. spring.jta.bitronix.properties.journal=disk # Name of the journal. Can be&apos;disk&apos;, &apos;null&apos; or a class name. spring.jta.bitronix.properties.log-part1-filename=btm1.tlog # Name of thefirst fragment of the journal. spring.jta.bitronix.properties.log-part2-filename=btm2.tlog # Name of thesecond fragment of the journal. spring.jta.bitronix.properties.max-log-size-in-mb=2 # Maximum size inmegabytes of the journal fragments. spring.jta.bitronix.properties.resource-configuration-filename= #ResourceLoader configuration file name. spring.jta.bitronix.properties.server-id= # ASCII ID that must uniquelyidentify this TM instance. Default to the machine&apos;s IP address. spring.jta.bitronix.properties.skip-corrupted-logs=false # Skip corruptedtransactions log entries. spring.jta.bitronix.properties.warn-about-zero-resource-transaction=true # Loga warning for transactions executed without a single enlisted resource. # NARAYANA( [NarayanaProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/jta/narayana/NarayanaProperties.java))spring.jta.narayana.default-timeout=60 # Transaction timeout in seconds. spring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner # Comma-separated list of expiry scanners. spring.jta.narayana.log-dir= # Transaction object store directory. spring.jta.narayana.one-phase-commit=true # Enable one phase commitoptimisation. spring.jta.narayana.periodic-recovery-period=120 # Interval in which periodicrecovery scans are performed in seconds. spring.jta.narayana.recovery-backoff-period=10 # Back off period between firstand second phases of the recovery scan in seconds. spring.jta.narayana.recovery-db-pass= # Database password to be used byrecovery manager. spring.jta.narayana.recovery-db-user= # Database username to be used byrecovery manager. spring.jta.narayana.recovery-jms-pass= # JMS password to be used by recoverymanager. spring.jta.narayana.recovery-jms-user= # JMS username to be used by recoverymanager. spring.jta.narayana.recovery-modules= # Comma-separated list of recoverymodules. spring.jta.narayana.transaction-manager-id=1 # Unique transaction manager id. spring.jta.narayana.xa-resource-orphan-filters= # Comma-separated list oforphan filters. # EMBEDDED MONGODB( [EmbeddedMongoProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoProperties.java))spring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of featuresto enable. spring.mongodb.embedded.storage.database-dir= # Directory used for datastorage. spring.mongodb.embedded.storage.oplog-size= # Maximum size of the oplog inmegabytes. spring.mongodb.embedded.storage.repl-set-name= # Name of the replica set. spring.mongodb.embedded.version=2.6.10 # Version of Mongo to use. # REDIS( [RedisProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java))spring.redis.cluster.max-redirects= # Maximum number of redirects to followwhen executing commands across the cluster. spring.redis.cluster.nodes= # Comma-separated list of &quot;host:port&quot; pairs tobootstrap from. spring.redis.database=0 # Database index used by the connection factory. spring.redis.url= # Connection URL, will override host, port and password(user will be ignored), e.g. redis://user:password @example.com:6379 spring.redis.host=localhost # Redis server host. spring.redis.password= # Login password of the redis server. spring.redis.ssl=false # Enable SSL support. spring.redis.pool.max-active=8 # Max number of connections that can beallocated by the pool at a given time. Use a negative value for no limit. spring.redis.pool.max-idle=8 # Max number of &quot;idle&quot; connections in the pool.Use a negative value to indicate an unlimited number of idle connections. spring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) aconnection allocation should block before throwing an exception when the pool isexhausted. Use a negative value to block indefinitely. spring.redis.pool.min-idle=0 # Target for the minimum number of idleconnections to maintain in the pool. This setting only has an effect if it ispositive. spring.redis.port=6379 # Redis server port. spring.redis.sentinel.master= # Name of Redis server. spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs. spring.redis.timeout=0 # Connection timeout in milliseconds. # TRANSACTION( [TransactionProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionProperties.java))spring.transaction.default-timeout= # Default transaction timeout in seconds. spring.transaction.rollback-on-commit-failure= # Perform the rollback oncommit failures. # ---------------------------------------- # INTEGRATION PROPERTIES # ---------------------------------------- # ACTIVEMQ( [ActiveMQProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java))spring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated bydefault. For instance `tcp://localhost:61616 ` spring.activemq.in-memory=true # Specify if the default broker URL should bein memory. Ignored if an explicit broker has been specified. spring.activemq.password= # Login password of the broker. spring.activemq.user= # Login user of the broker. spring.activemq.packages.trust-all=false # Trust all packages. spring.activemq.packages.trusted= # Comma-separated list of specific packagesto trust (when not trusting all packages). spring.activemq.pool.configuration. = # See PooledConnectionFactory. spring.activemq.pool.enabled=false # Whether a PooledConnectionFactory shouldbe created instead of a regular ConnectionFactory. spring.activemq.pool.expiry-timeout=0 # Connection expiration timeout inmilliseconds. spring.activemq.pool.idle-timeout=30000 # Connection idle timeout inmilliseconds. spring.activemq.pool.max-connections=1 # Maximum number of pooledconnections. # ARTEMIS( [ArtemisProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisProperties.java))spring.artemis.embedded.cluster-password= # Cluster password. Randomlygenerated on startup by default. spring.artemis.embedded.data-directory= # Journal file directory. Notnecessary if persistence is turned off. spring.artemis.embedded.enabled=true # Enable embedded mode if the Artemisserver APIs are available. spring.artemis.embedded.persistent=false # Enable persistent store. spring.artemis.embedded.queues= # Comma-separated list of queues to create onstartup. spring.artemis.embedded.server-id= # Server id. By default, anauto-incremented counter is used. spring.artemis.embedded.topics= # Comma-separated list of topics to create onstartup. spring.artemis.host=localhost # Artemis broker host. spring.artemis.mode= # Artemis deployment mode, auto-detected by default. spring.artemis.password= # Login password of the broker. spring.artemis.port=61616 # Artemis broker port. spring.artemis.user= # Login user of the broker. # SPRING BATCH( [BatchProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java))spring.batch.initializer.enabled= # Create the required batch tables onstartup if necessary. Enabled automatically if no custom table prefix is set orif a custom schema is configured. spring.batch.job.enabled=true # Execute all Spring Batch jobs in the contexton startup. spring.batch.job.names= # Comma-separated list of job names to execute onstartup (For instance `job1,job2 `). By default, all Jobs found in the contextare executed. spring.batch.schema=classpath:org/springframework/batch/core/schema- @ @platform @ @.sql # Path to the SQL file to use to initialize the database schema. spring.batch.table-prefix= # Table prefix for all the batch meta-data tables. # JMS( [JmsProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsProperties.java))spring.jms.jndi-name= # Connection factory JNDI name. When set, takesprecedence to others connection factory auto-configurations. spring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. Bydefault, the listener is transacted with automatic acknowledgment. spring.jms.listener.auto-startup=true # Start the container automatically onstartup. spring.jms.listener.concurrency= # Minimum number of concurrent consumers. spring.jms.listener.max-concurrency= # Maximum number of concurrentconsumers. spring.jms.pub-sub-domain=false # Specify if the default destination type istopic. spring.jms.template.default-destination= # Default destination to use onsend/receive operations that do not have a destination parameter. spring.jms.template.delivery-delay= # Delivery delay to use for send calls inmilliseconds. spring.jms.template.delivery-mode= # Delivery mode. Enable QoS when set. spring.jms.template.priority= # Priority of a message when sending. Enable QoSwhen set. spring.jms.template.qos-enabled= # Enable explicit QoS when sending amessage. spring.jms.template.receive-timeout= # Timeout to use for receive calls inmilliseconds. spring.jms.template.time-to-live= # Time-to-live of a message when sending inmilliseconds. Enable QoS when set. # APACHE KAFKA( [KafkaProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java))spring.kafka.bootstrap-servers= # Comma-delimited list of host:port pairs touse for establishing the initial connection to the Kafka cluster. spring.kafka.client-id= # Id to pass to the server when making requests; usedfor server-side logging. spring.kafka.consumer.auto-commit-interval= # Frequency in milliseconds thatthe consumer offsets are auto-committed to Kafka if &apos;enable.auto.commit&apos; true. spring.kafka.consumer.auto-offset-reset= # What to do when there is no initialoffset in Kafka or if the current offset does not exist any more on the server. spring.kafka.consumer.bootstrap-servers= # Comma-delimited list of host:portpairs to use for establishing the initial connection to the Kafka cluster. spring.kafka.consumer.client-id= # Id to pass to the server when makingrequests; used for server-side logging. spring.kafka.consumer.enable-auto-commit= # If true the consumer&apos;s offset willbe periodically committed in the background. spring.kafka.consumer.fetch-max-wait= # Maximum amount of time in millisecondsthe server will block before answering the fetch request if there isn&apos;tsufficient data to im/images/mediately satisfy the requirement given by&quot;fetch.min.bytes&quot;. spring.kafka.consumer.fetch-min-size= # Minimum amount of data the servershould return for a fetch request in bytes. spring.kafka.consumer.group-id= # Unique string that identifies the consumergroup this consumer belongs to. spring.kafka.consumer.heartbeat-interval= # Expected time in millisecondsbetween heartbeats to the consumer coordinator. spring.kafka.consumer.key-deserializer= # Deserializer class for keys. spring.kafka.consumer.max-poll-records= # Maximum number of records returnedin a single call to poll(). spring.kafka.consumer.value-deserializer= # Deserializer class for values. spring.kafka.listener.ack-count= # Number of records between offset commitswhen ackMode is &quot;COUNT&quot; or &quot;COUNT_TIME&quot;. spring.kafka.listener.ack-mode= # Listener AckMode; see the spring-kafkadocumentation. spring.kafka.listener.ack-time= # Time in milliseconds between offset commitswhen ackMode is &quot;TIME&quot; or &quot;COUNT_TIME&quot;. spring.kafka.listener.concurrency= # Number of threads to run in the listenercontainers. spring.kafka.listener.poll-timeout= # Timeout in milliseconds to use whenpolling the consumer. spring.kafka.producer.acks= # Number of acknowledgments the producer requiresthe leader to have received before considering a request complete. spring.kafka.producer.batch-size= # Number of records to batch beforesending. spring.kafka.producer.bootstrap-servers= # Comma-delimited list of host:portpairs to use for establishing the initial connection to the Kafka cluster. spring.kafka.producer.buffer-memory= # Total bytes of memory the producer canuse to buffer records waiting to be sent to the server. spring.kafka.producer.client-id= # Id to pass to the server when makingrequests; used for server-side logging. spring.kafka.producer.compression-type= # Compression type for all datagenerated by the producer. spring.kafka.producer.key-serializer= # Serializer class for keys. spring.kafka.producer.retries= # When greater than zero, enables retrying offailed sends. spring.kafka.producer.value-serializer= # Serializer class for values. spring.kafka.properties. = # Additional properties used to configure theclient. spring.kafka.ssl.key-password= # Password of the private key in the key storefile. spring.kafka.ssl.keystore-location= # Location of the key store file. spring.kafka.ssl.keystore-password= # Store password for the key store file. spring.kafka.ssl.truststore-location= # Location of the trust store file. spring.kafka.ssl.truststore-password= # Store password for the trust storefile. spring.kafka.template.default-topic= # Default topic to which messages will besent. # RABBIT( [RabbitProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java))spring.rabbitmq.addresses= # Comma-separated list of addresses to which theclient should connect. spring.rabbitmq.cache.channel.checkout-timeout= # Number of milliseconds towait to obtain a channel if the cache size has been reached. spring.rabbitmq.cache.channel.size= # Number of channels to retain in thecache. spring.rabbitmq.cache.connection.mode=channel # Connection factory cachemode. spring.rabbitmq.cache.connection.size= # Number of connections to cache. spring.rabbitmq.connection-timeout= # Connection timeout, in milliseconds;zero for infinite. spring.rabbitmq.dynamic=true # Create an AmqpAdmin bean. spring.rabbitmq.host=localhost # RabbitMQ host. spring.rabbitmq.listener.acknowledge-mode= # Acknowledge mode of container. spring.rabbitmq.listener.auto-startup=true # Start the container automaticallyon startup. spring.rabbitmq.listener.concurrency= # Minimum number of consumers. spring.rabbitmq.listener.default-requeue-rejected= # Whether or not to requeuedelivery failures; default `true `. spring.rabbitmq.listener.idle-event-interval= # How often idle containerevents should be published in milliseconds. spring.rabbitmq.listener.max-concurrency= # Maximum number of consumers. spring.rabbitmq.listener.prefetch= # Number of messages to be handled in asingle request. It should be greater than or equal to the transaction size (ifused). spring.rabbitmq.listener.retry.enabled=false # Whether or not publishingretries are enabled. spring.rabbitmq.listener.retry.initial-interval=1000 # Interval between thefirst and second attempt to deliver a message. spring.rabbitmq.listener.retry.max-attempts=3 # Maximum number of attempts todeliver a message. spring.rabbitmq.listener.retry.max-interval=10000 # Maximum interval betweenattempts. spring.rabbitmq.listener.retry.multiplier=1.0 # A multiplier to apply to theprevious delivery retry interval. spring.rabbitmq.listener.retry.stateless=true # Whether or not retry isstateless or stateful. spring.rabbitmq.listener.transaction-size= # Number of messages to beprocessed in a transaction. For best results it should be less than or equal tothe prefetch count. spring.rabbitmq.password= # Login to authenticate against the broker. spring.rabbitmq.port=5672 # RabbitMQ port. spring.rabbitmq.publisher-confirms=false # Enable publisher confirms. spring.rabbitmq.publisher-returns=false # Enable publisher returns. spring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, inseconds; zero for none. spring.rabbitmq.ssl.enabled=false # Enable SSL support. spring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSLcertificate. spring.rabbitmq.ssl.key-store-password= # Password used to access the keystore. spring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates. spring.rabbitmq.ssl.trust-store-password= # Password used to access the truststore. spring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure bythe rabbit client library. spring.rabbitmq.template.mandatory=false # Enable mandatory messages. spring.rabbitmq.template.receive-timeout=0 # Timeout for `receive() `methods. spring.rabbitmq.template.reply-timeout=5000 # Timeout for `sendAndReceive() `methods. spring.rabbitmq.template.retry.enabled=false # Set to true to enable retriesin the `RabbitTemplate `. spring.rabbitmq.template.retry.initial-interval=1000 # Interval between thefirst and second attempt to publish a message. spring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts topublish a message. spring.rabbitmq.template.retry.max-interval=10000 # Maximum number of attemptsto publish a message. spring.rabbitmq.template.retry.multiplier=1.0 # A multiplier to apply to theprevious publishing retry interval. spring.rabbitmq.username= # Login user to authenticate to the broker. spring.rabbitmq.virtual-host= # Virtual host to use when connecting to thebroker. # ---------------------------------------- # ACTUATOR PROPERTIES # ---------------------------------------- # ENDPOINTS( [AbstractEndpoint](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java)subclasses)endpoints.enabled=true # Enable endpoints. endpoints.sensitive= # Default endpoint sensitive setting. endpoints.actuator.enabled=true # Enable the endpoint. endpoints.actuator.path= # Endpoint URL path. endpoints.actuator.sensitive=false # Enable security on the endpoint. endpoints.auditevents.enabled= # Enable the endpoint. endpoints.auditevents.path= # Endpoint path. endpoints.auditevents.sensitive=false # Enable security on the endpoint. endpoints.autoconfig.enabled= # Enable the endpoint. endpoints.autoconfig.id= # Endpoint identifier. endpoints.autoconfig.path= # Endpoint path. endpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.beans.enabled= # Enable the endpoint. endpoints.beans.id= # Endpoint identifier. endpoints.beans.path= # Endpoint path. endpoints.beans.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.configprops.enabled= # Enable the endpoint. endpoints.configprops.id= # Endpoint identifier. endpoints.configprops.keys-to-sanitize=password,secret,key,token,. credentials. ,vcap_services # Keys that should be sanitized. Keys can be simple strings that the propertyends with or regex expressions. endpoints.configprops.path= # Endpoint path. endpoints.configprops.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.docs.curies.enabled=false # Enable the curie generation. endpoints.docs.enabled=true # Enable actuator docs endpoint. endpoints.docs.path=/docs # endpoints.docs.sensitive=false # endpoints.dump.enabled= # Enable the endpoint. endpoints.dump.id= # Endpoint identifier. endpoints.dump.path= # Endpoint path. endpoints.dump.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.env.enabled= # Enable the endpoint. endpoints.env.id= # Endpoint identifier. endpoints.env.keys-to-sanitize=password,secret,key,token,. credentials. ,vcap_services # Keys that should be sanitized. Keys can be simple strings that the propertyends with or regex expressions. endpoints.env.path= # Endpoint path. endpoints.env.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.flyway.enabled= # Enable the endpoint. endpoints.flyway.id= # Endpoint identifier. endpoints.flyway.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.health.enabled= # Enable the endpoint. endpoints.health.id= # Endpoint identifier. endpoints.health.mapping. = # Mapping of health statuses to HttpStatus codes.By default, registered health statuses map to sensible defaults (i.e. UP maps to200). endpoints.health.path= # Endpoint path. endpoints.health.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.health.time-to-live=1000 # Time to live for cached result, inmilliseconds. endpoints.heapdump.enabled= # Enable the endpoint. endpoints.heapdump.path= # Endpoint path. endpoints.heapdump.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.hyper/images/media.enabled=false # Enable hyper/images/media support for endpoints. endpoints.info.enabled= # Enable the endpoint. endpoints.info.id= # Endpoint identifier. endpoints.info.path= # Endpoint path. endpoints.info.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.jolokia.enabled=true # Enable Jolokia endpoint. endpoints.jolokia.path=/jolokia # Endpoint URL path. endpoints.jolokia.sensitive=true # Enable security on the endpoint. endpoints.liquibase.enabled= # Enable the endpoint. endpoints.liquibase.id= # Endpoint identifier. endpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.logfile.enabled=true # Enable the endpoint. endpoints.logfile.external-file= # External Logfile to be accessed. endpoints.logfile.path=/logfile # Endpoint URL path. endpoints.logfile.sensitive=true # Enable security on the endpoint. endpoints.loggers.enabled=true # Enable the endpoint. endpoints.loggers.id= # Endpoint identifier. endpoints.loggers.path=/logfile # Endpoint path. endpoints.loggers.sensitive=true # Mark if the endpoint exposes sensitiveinformation. endpoints.mappings.enabled= # Enable the endpoint. endpoints.mappings.id= # Endpoint identifier. endpoints.mappings.path= # Endpoint path. endpoints.mappings.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.metrics.enabled= # Enable the endpoint. endpoints.metrics.filter.enabled=true # Enable the metrics servlet filter. endpoints.metrics.filter.gauge-submissions=merged # Http filter gaugesubmissions (merged, per-http-method) endpoints.metrics.filter.counter-submissions=merged # Http filter countersubmissions (merged, per-http-method) endpoints.metrics.id= # Endpoint identifier. endpoints.metrics.path= # Endpoint path. endpoints.metrics.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.shutdown.enabled= # Enable the endpoint. endpoints.shutdown.id= # Endpoint identifier. endpoints.shutdown.path= # Endpoint path. endpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitiveinformation. endpoints.trace.enabled= # Enable the endpoint. endpoints.trace.id= # Endpoint identifier. endpoints.trace.path= # Endpoint path. endpoints.trace.sensitive= # Mark if the endpoint exposes sensitiveinformation. # ENDPOINTS CORS CONFIGURATION( [EndpointCorsProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointCorsProperties.java))endpoints.cors.allow-credentials= # Set whether credentials are supported.When not set, credentials are not supported. endpoints.cors.allowed-headers= # Comma-separated list of headers to allow ina request. &apos; &apos; allows all headers. endpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow.&apos; &apos; allows all methods. endpoints.cors.allowed-origins= # Comma-separated list of origins to allow.&apos; &apos; allows all origins. When not set, CORS support is disabled. endpoints.cors.exposed-headers= # Comma-separated list of headers to includein a response. endpoints.cors.max-age=1800 # How long, in seconds, the response from apre-flight request can be cached by clients. # JMX ENDPOINT( [EndpointMBeanExportProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportProperties.java))endpoints.jmx.domain= # JMX domain name. Initialized with the value of&apos;spring.jmx.default-domain&apos; if set. endpoints.jmx.enabled=true # Enable JMX export of all endpoints. endpoints.jmx.static-names= # Additional static properties to append to allObjectNames of MBeans representing Endpoints. endpoints.jmx.unique-names=false # Ensure that ObjectNames are modified incase of conflict. # JOLOKIA( [JolokiaProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaProperties.java))jolokia.config. = # See Jolokia manual # MANAGEMENT HTTP SERVER( [ManagementServerProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java))management.add-application-context-header=true # Add the&quot;X-Application-Context&quot; HTTP header in each response. management.address= # Network address that the management endpoints shouldbind to. management.context-path= # Management endpoint context-path. For instance `/actuator ` management.cloudfoundry.enabled= # Enable extended Cloud Foundry actuatorendpoints management.cloudfoundry.skip-ssl-validation= # Skip SSL verification for CloudFoundry actuator endpoint security calls management.port= # Management endpoint HTTP port. Uses the same port as theapplication by default. Configure a different port to use management-specificSSL. management.security.enabled=true # Enable security. management.security.roles=ACTUATOR # Comma-separated list of roles that canaccess the management endpoint. management.security.sessions=stateless # Session creating policy to use(always, never, if_required, stateless). management.ssl.ciphers= # Supported SSL ciphers. Requires a custommanagement.port. management.ssl.client-auth= # Whether client authentication is wanted (&quot;want&quot;)or needed (&quot;need&quot;). Requires a trust store. Requires a custom management.port. management.ssl.enabled= # Enable SSL support. Requires a custommanagement.port. management.ssl.enabled-protocols= # Enabled SSL protocols. Requires a custommanagement.port. management.ssl.key-alias= # Alias that identifies the key in the key store.Requires a custom management.port. management.ssl.key-password= # Password used to access the key in the keystore. Requires a custom management.port. management.ssl.key-store= # Path to the key store that holds the SSLcertificate (typically a jks file). Requires a custom management.port. management.ssl.key-store-password= # Password used to access the key store.Requires a custom management.port. management.ssl.key-store-provider= # Provider for the key store. Requires acustom management.port. management.ssl.key-store-type= # Type of the key store. Requires a custommanagement.port. management.ssl.protocol=TLS # SSL protocol to use. Requires a custommanagement.port. management.ssl.trust-store= # Trust store that holds SSL certificates.Requires a custom management.port. management.ssl.trust-store-password= # Password used to access the truststore. Requires a custom management.port. management.ssl.trust-store-provider= # Provider for the trust store. Requiresa custom management.port. management.ssl.trust-store-type= # Type of the trust store. Requires a custommanagement.port. # HEALTH INDICATORS management.health.db.enabled=true # Enable database health check. management.health.cassandra.enabled=true # Enable cassandra health check. management.health.couchbase.enabled=true # Enable couchbase health check. management.health.defaults.enabled=true # Enable default health indicators. management.health.diskspace.enabled=true # Enable disk space health check. management.health.diskspace.path= # Path used to compute the available diskspace. management.health.diskspace.threshold=0 # Minimum disk space that should beavailable, in bytes. management.health.elasticsearch.enabled=true # Enable elasticsearch healthcheck. management.health.elasticsearch.indices= # Comma-separated index names. management.health.elasticsearch.response-timeout=100 # The time, inmilliseconds, to wait for a response from the cluster. management.health.jms.enabled=true # Enable JMS health check. management.health.ldap.enabled=true # Enable LDAP health check. management.health.mail.enabled=true # Enable Mail health check. management.health.mongo.enabled=true # Enable MongoDB health check. management.health.rabbit.enabled=true # Enable RabbitMQ health check. management.health.redis.enabled=true # Enable Redis health check. management.health.solr.enabled=true # Enable Solr health check. management.health.status.order=DOWN, OUT_OF_SERVICE, UP, UNKNOWN #Comma-separated list of health statuses in order of severity. # INFO CONTRIBUTORS( [InfoContributorProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorProperties.java))management.info.build.enabled=true # Enable build info. management.info.defaults.enabled=true # Enable default info contributors. management.info.env.enabled=true # Enable environment info. management.info.git.enabled=true # Enable git info. management.info.git.mode=simple # Mode to use to expose git information. # REMOTE SHELL( [ShellProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java))management.shell.auth.type=simple # Authentication type. Auto-detectedaccording to the environment. management.shell.auth.jaas.domain=my-domain # JAAS domain. management.shell.auth.key.path= # Path to the authentication key. This shouldpoint to a valid &quot;.pem&quot; file. management.shell.auth.simple.user.name=user # Login user. management.shell.auth.simple.user.password= # Login password. management.shell.auth.spring.roles=ACTUATOR # Comma-separated list of requiredroles to login to the CRaSH console. management.shell.command-path-patterns=classpath :/commands/ ,classpath :/crash/commands/ # Patterns to use to look for commands. management.shell.command-refresh-interval=-1 # Scan for changes and update thecommand if necessary (in seconds). management.shell.config-path-patterns=classpath :/crash/ # Patterns to useto look for configurations. management.shell.disabled-commands=jpa ,jdbc ,jndi # Comma-separated listof commands to disable. management.shell.disabled-plugins= # Comma-separated list of plugins todisable. Certain plugins are disabled by default based on the environment. management.shell.ssh.auth-timeout = # Number of milliseconds after user willbe prompted to login again. management.shell.ssh.enabled=true # Enable CRaSH SSH support. management.shell.ssh.idle-timeout = # Number of milliseconds after whichunused connections are closed. management.shell.ssh.key-path= # Path to the SSH server key. management.shell.ssh.port=2000 # SSH port. management.shell.telnet.enabled=false # Enable CRaSH telnet support. Enabledby default if the TelnetPlugin is available. management.shell.telnet.port=5000 # Telnet port. # TRACING( [TraceProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java))management.trace.include=request-headers,response-headers,cookies,errors #Items to be included in the trace. # METRICS EXPORT( [MetricExportProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java))spring.metrics.export.aggregate.key-pattern= # Pattern that tells theaggregator what to do with the keys from the source repository. spring.metrics.export.aggregate.prefix= # Prefix for global repository ifactive. spring.metrics.export.delay-millis=5000 # Delay in milliseconds between exportticks. Metrics are exported to external sources on a schedule with this delay. spring.metrics.export.enabled=true # Flag to enable metric export (assuming aMetricWriter is available). spring.metrics.export.excludes= # List of patterns for metric names toexclude. Applied after the includes. spring.metrics.export.includes= # List of patterns for metric names toinclude. spring.metrics.export.redis.key=keys.spring.metrics # Key for redis repositoryexport (if active). spring.metrics.export.redis.prefix=spring.metrics # Prefix for redisrepository if active. spring.metrics.export.send-latest= # Flag to switch off any availableoptimizations based on not exporting unchanged metric values. spring.metrics.export.statsd.host= # Host of a statsd server to receiveexported metrics. spring.metrics.export.statsd.port=8125 # Port of a statsd server to receiveexported metrics. spring.metrics.export.statsd.prefix= # Prefix for statsd exported metrics. spring.metrics.export.triggers. = # Specific trigger properties perMetricWriter bean name. # ---------------------------------------- # DEVTOOLS PROPERTIES # ---------------------------------------- # DEVTOOLS( [DevToolsProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java))spring.devtools.livereload.enabled=true # Enable a livereload.com compatibleserver. spring.devtools.livereload.port=35729 # Server port. spring.devtools.restart.additional-exclude= # Additional patterns that shouldbe excluded from triggering a full restart. spring.devtools.restart.additional-paths= # Additional paths to watch forchanges. spring.devtools.restart.enabled=true # Enable automatic restart. spring.devtools.restart.exclude=META-INF/maven/ ,META-INF/resources/ ,resources/ ,static/ ,public/ ,templates/ , / Test.class, / Tests.class,git.properties # Patterns that should be excluded from triggering a full restart. spring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds)to wait between polling for classpath changes. spring.devtools.restart.quiet-period=400 # Amount of quiet time (inmilliseconds) required without any classpath changes before a restart istriggered. spring.devtools.restart.trigger-file= # Name of a specific file that whenchanged will trigger the restart check. If not specified any classpath filechange will trigger the restart. # REMOTE DEVTOOLS( [RemoteDevToolsProperties](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsProperties.java))spring.devtools.remote.context-path=/. ~ ~spring-boot! ~ # Context path usedto handle the remote connection. spring.devtools.remote.debug.enabled=true # Enable remote debug support. spring.devtools.remote.debug.local-port=8000 # Local remote debug serverport. spring.devtools.remote.proxy.host= # The host of the proxy to use to connectto the remote application. spring.devtools.remote.proxy.port= # The port of the proxy to use to connectto the remote application. spring.devtools.remote.restart.enabled=true # Enable remote restart. spring.devtools.remote.secret= # A shared secret required to establish aconnection (required to enable remote support). spring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used totransfer the shared secret. # ---------------------------------------- # TESTING PROPERTIES # ---------------------------------------- spring.test.database.replace=any # Type of existing DataSource to replace. spring.test.mockmvc.print=default # MVC Print option. Starter pom Xml 配置文件 日志Spring Boot对各种日志框架都做了支持，我们可以通过配置来修改默认的日志的配置： #设置日志级别 logging.level.org.springframework=DEBUG 格式： logging.level. = # Log levels severity mapping. For instance`logging.level.org.springframework=DEBUG` Spring Boot的自动配置的原理SpringBoot在进行SpringApplication对象实例化时会加载META-INF/spring.factories文件，将该配置文件中的配置载入到Spring容器。 Maven下载源码通过 dependency:sources 该命令可以下载该项目中所有的依赖的包的源码。 源码分析org.springframework.boot.SpringApplication： org.springframework.core.io.support.SpringFactoriesLoader: 由此可见，读取该配置文件来加载内容。 Spring.factories文件 # Initializersorg.springframework.context.ApplicationContextInitializer= org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer, org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer # Application Listenersorg.springframework.context.ApplicationListener= org.springframework.boot.autoconfigure.BackgroundPreinitializer # Auto Configuration Import Listenersorg.springframework.boot.autoconfigure.AutoConfigurationImportListener= org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener # Auto Configuration Import Filtersorg.springframework.boot.autoconfigure.AutoConfigurationImportFilter= org.springframework.boot.autoconfigure.condition.OnClassCondition # Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration= org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration, org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration, org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration, org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration, org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration, org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration, org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration, org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration, org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration, org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration, org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration, org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration, org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration, org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.Hyper/images/mediaAutoConfiguration, org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration, org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration, org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration, org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration, org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration, org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration, org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration, org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration, org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration, org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration, org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration, org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration, org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration, org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration, org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration, org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration, org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration, org.springframework.boot.autoconfigure.session.SessionAutoConfiguration, org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration, org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration, org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration, org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration, org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration, org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration, org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration, org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration, org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration, org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration, org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration # Failure analyzersorg.springframework.boot.diagnostics.FailureAnalyzer= org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer, org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer, org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer # Template availability providersorg.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider= org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider, org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider, org.springframework.boot.autoconfigure.web.JspTemplateAvailabilityProvider 举例：Redis的自动配置从上述的配置中可以看出，org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration是Redis的自动配置。 内容： 】 条件注解 Spring Boot的web开发Web开发的自动配置类：org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration 自动配置的ViewResolver 视图的配置mvcProperties对象中： org.springframework.boot.autoconfigure.web.WebMvcProperties.View 自动配置静态资源进入规则为 /如果进入SpringMVC的规则为/时，Spring Boot的默认静态资源的路径为： spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ 测试： 进入规则为 .xxx 或者 不指定静态文件路径时将静态资源放置到webapp下的static目录中即可通过地址访问： 测试： 自定义消息转化器自定义消息转化器，只需要在\@Configuration的类中添加消息转化器的\@bean加入到Spring容器，就会被SpringBoot自动加入到容器中。 @Bean public StringHttpMessageConverter stringHttpMessageConverter()&#123;StringHttpMessageConverter converter = new StringHttpMessageConverter(Charset. forName (&quot;UTF-8&quot;)); return converter;&#125; 默认配置： 自定义SpringMVC的配置有些时候我们需要自已配置SpringMVC而不是采用默认，比如说增加一个拦截器，这个时候就得通过继承WebMvcConfigurerAdapter然后重写父类中的方法进行扩展。 import java.nio.charset.Charset; import java.util.List; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.context.annotation.Configuration; import org.springframework.http.converter.HttpMessageConverter; import org.springframework.http.converter.StringHttpMessageConverter; import org.springframework.web.servlet.HandlerInterceptor; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter; @Configuration //申明这是一个配置 public class MySrpingMVCConfig extends WebMvcConfigurerAdapter&#123;// 自定义拦截器 @Override public void addInterceptors(InterceptorRegistry registry) &#123;HandlerInterceptor handlerInterceptor = new HandlerInterceptor() &#123; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponseresponse, Object handler) throws Exception &#123;System. out .println(&quot;自定义拦截器............&quot;); return true ;&#125; @Override public void postHandle(HttpServletRequest request, HttpServletResponseresponse, Object handler,ModelAndView modelAndView) throws Exception &#123;&#125; @Override public void afterCompletion(HttpServletRequest request, HttpServletResponseresponse, Object handler,Exception ex) throws Exception &#123;&#125;&#125;;registry.addInterceptor(handlerInterceptor).addPathPatterns(&quot;/ &quot;);&#125;// 自定义消息转化器的第二种方法 @Override public void configureMessageConverters(List &lt;HttpMessageConverter &lt;? &gt; &gt;converters) &#123;StringHttpMessageConverter converter = new StringHttpMessageConverter(Charset. forName (&quot;UTF-8&quot;));converters.add(converter);&#125;&#125; 改造购物车系统创建购物车的Spring Boot工程 导入依赖 &lt;project xmlns= &quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi= &quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation= &quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; &gt; &lt;modelVersion &gt;4.0.0 &lt;/modelVersion &gt; &lt;parent &gt; &lt;groupId &gt;org.springframework.boot &lt;/groupId &gt; &lt;artifactId &gt;spring-boot-starter-parent &lt;/artifactId &gt; &lt;version &gt;1.5.2.RELEASE &lt;/version &gt; &lt;/parent &gt; &lt;groupId &gt;com.taotao.cart &lt;/groupId &gt; &lt;artifactId &gt; taotao -cart- springboot &lt;/artifactId &gt; &lt;version &gt;1.0.0-SNAPSHOT &lt;/version &gt; &lt;packaging &gt;war &lt;/packaging &gt; &lt;dependencies &gt; &lt;dependency &gt; &lt;groupId &gt;com.taotao.common &lt;/groupId &gt; &lt;artifactId &gt; taotao -common &lt;/artifactId &gt; &lt;version &gt;1.0.0-SNAPSHOT &lt;/version &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;com.taotao.sso &lt;/groupId &gt; &lt;artifactId &gt; taotao - sso -interface &lt;/artifactId &gt; &lt;version &gt;1.0.0-SNAPSHOT &lt;/version &gt; &lt;/dependency &gt; &lt;!-- 单元测试 -- &gt; &lt;dependency &gt; &lt;groupId &gt; junit &lt;/groupId &gt; &lt;artifactId &gt; junit &lt;/artifactId &gt; &lt;scope &gt;test &lt;/scope &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;org.springframework &lt;/groupId &gt; &lt;artifactId &gt;spring- jdbc &lt;/artifactId &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;org.springframework &lt;/groupId &gt; &lt;artifactId &gt;spring-aspects &lt;/artifactId &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;org.springframework.boot &lt;/groupId &gt; &lt;artifactId &gt;spring-boot-starter-web &lt;/artifactId &gt; &lt;/dependency &gt; &lt;!-- Mybatis -- &gt; &lt;dependency &gt; &lt;groupId &gt;org.mybatis &lt;/groupId &gt; &lt;artifactId &gt; mybatis &lt;/artifactId &gt; &lt;version &gt;3.2.8 &lt;/version &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;org.mybatis &lt;/groupId &gt; &lt;artifactId &gt; mybatis -spring &lt;/artifactId &gt; &lt;version &gt;1.2.2 &lt;/version &gt; &lt;/dependency &gt; &lt;!-- 分页助手 -- &gt; &lt;dependency &gt; &lt;groupId &gt;com.github.pagehelper &lt;/groupId &gt; &lt;artifactId &gt; pagehelper &lt;/artifactId &gt; &lt;version &gt;3.7.5 &lt;/version &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;com.github.jsqlparser &lt;/groupId &gt; &lt;artifactId &gt; jsqlparser &lt;/artifactId &gt; &lt;version &gt;0.9.1 &lt;/version &gt; &lt;/dependency &gt; &lt;!-- 通用 Mapper -- &gt; &lt;dependency &gt; &lt;groupId &gt;com.github.abel533 &lt;/groupId &gt; &lt;artifactId &gt; mapper &lt;/artifactId &gt; &lt;version &gt;2.3.4 &lt;/version &gt; &lt;/dependency &gt; &lt;!-- MySql -- &gt; &lt;dependency &gt; &lt;groupId &gt; mysql &lt;/groupId &gt; &lt;artifactId &gt; mysql -connector-java &lt;/artifactId &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;org.slf4j &lt;/groupId &gt; &lt;artifactId &gt;slf4j-log4j12 &lt;/artifactId &gt; &lt;/dependency &gt; &lt;!-- 连接池 -- &gt; &lt;dependency &gt; &lt;groupId &gt;com.jolbox &lt;/groupId &gt; &lt;artifactId &gt; bonecp -spring &lt;/artifactId &gt; &lt;version &gt;0.8.0.RELEASE &lt;/version &gt; &lt;/dependency &gt; &lt;!-- httpclient -- &gt; &lt;dependency &gt; &lt;groupId &gt;org.apache.httpcomponents &lt;/groupId &gt; &lt;artifactId &gt; httpclient &lt;/artifactId &gt; &lt;/dependency &gt; &lt;!-- JSP相关 -- &gt; &lt;dependency &gt; &lt;groupId &gt; jstl &lt;/groupId &gt; &lt;artifactId &gt; jstl &lt;/artifactId &gt; &lt;version &gt;1.2 &lt;/version &gt; &lt;/dependency &gt; &lt;!-- Apache工具组件 -- &gt; &lt;dependency &gt; &lt;groupId &gt;org.apache.commons &lt;/groupId &gt; &lt;artifactId &gt;commons-lang3 &lt;/artifactId &gt; &lt;version &gt;3.3.2 &lt;/version &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;org.apache.commons &lt;/groupId &gt; &lt;artifactId &gt;commons- io &lt;/artifactId &gt; &lt;version &gt;1.3.2 &lt;/version &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;commons-codec &lt;/groupId &gt; &lt;artifactId &gt;commons-codec &lt;/artifactId &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;org.springframework.amqp &lt;/groupId &gt; &lt;artifactId &gt;spring-rabbit &lt;/artifactId &gt; &lt;version &gt;1.4.0.RELEASE &lt;/version &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;com.alibaba &lt;/groupId &gt; &lt;artifactId &gt; dubbo &lt;/artifactId &gt; &lt;version &gt;2.5.3 &lt;/version &gt; &lt;exclusions &gt; &lt;exclusion &gt; &lt;!-- 排除传递spring依赖 -- &gt; &lt;artifactId &gt;spring &lt;/artifactId &gt; &lt;groupId &gt;org.springframework &lt;/groupId &gt; &lt;/exclusion &gt; &lt;/exclusions &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;org.apache.zookeeper &lt;/groupId &gt; &lt;artifactId &gt;zookeeper &lt;/artifactId &gt; &lt;version &gt;3.3.3 &lt;/version &gt; &lt;/dependency &gt; &lt;dependency &gt; &lt;groupId &gt;com.github.sgroschupf &lt;/groupId &gt; &lt;artifactId &gt; zkclient &lt;/artifactId &gt; &lt;version &gt;0.1 &lt;/version &gt; &lt;/dependency &gt; &lt;/dependencies &gt; &lt;build &gt; &lt;plugins &gt; &lt;!-- 资源文件拷贝插件 -- &gt; &lt;plugin &gt; &lt;groupId &gt;org.apache.maven.plugins &lt;/groupId &gt; &lt;artifactId &gt; maven -resources- plugin &lt;/artifactId &gt; &lt;configuration &gt; &lt;encoding &gt;UTF-8 &lt;/encoding &gt; &lt;/configuration &gt; &lt;/plugin &gt; &lt;!-- java编译插件 -- &gt; &lt;plugin &gt; &lt;groupId &gt;org.apache.maven.plugins &lt;/groupId &gt; &lt;artifactId &gt; maven -compiler- plugin &lt;/artifactId &gt; &lt;configuration &gt; &lt;source &gt;1.7 &lt;/source &gt; &lt;target &gt;1.7 &lt;/target &gt; &lt;encoding &gt;UTF-8 &lt;/encoding &gt; &lt;/configuration &gt; &lt;/plugin &gt; &lt;plugin &gt; &lt;groupId &gt;org.springframework.boot &lt;/groupId &gt; &lt;artifactId &gt;spring-boot- maven - plugin &lt;/artifactId &gt; &lt;/plugin &gt; &lt;/plugins &gt; &lt;/build &gt; &lt;/project &gt; 将taotao-cart中的java代码拷贝到taotao-car-springboot 拷贝完成后： 并且将properties文件也拷贝过来： 将页面也拷贝过来： 编写Spring配置类TaotaoApplication 设置tomcat端口application.properties： 读取外部的配置文件 @Configuration @PropertySource(value = &#123; &quot;classpath:jdbc.properties&quot;,&quot;classpath:env.properties&quot;,&quot;classpath:httpclient.properties&quot;, &quot;classpath:redis.properties&quot;,&quot;classpath:rabbitmq.properties&quot; &#125;, ignoreResourceNotFound = true ) public class TaotaoApplication &#123;&#125; 设置扫描包 定义数据源 @Value(&quot; $&#123;jdbc.url&#125;&quot;) private String jdbcUrl; @Value(&quot; $&#123;jdbc.driverClassName&#125;&quot;) private String jdbcDriverClassName; @Value(&quot; $&#123;jdbc.username&#125;&quot;) private String jdbcUsername; @Value(&quot; $&#123;jdbc.password&#125;&quot;) private String jdbcPassword; @Bean(destroyMethod = &quot;close&quot;) public DataSource dataSource() &#123;BoneCPDataSource boneCPDataSource = new BoneCPDataSource();// 数据库驱动boneCPDataSource.setDriverClass(jdbcDriverClassName);// 相应驱动的jdbcUrlboneCPDataSource.setJdbcUrl(jdbcUrl);// 数据库的用户名boneCPDataSource.setUsername(jdbcUsername);// 数据库的密码boneCPDataSource.setPassword(jdbcUsername);//检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0boneCPDataSource.setIdleConnectionTestPeriodInMinutes(60);// 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0boneCPDataSource.setIdleMaxAgeInMinutes(30);// 每个分区最大的连接数boneCPDataSource.setMaxConnectionsPerPartition(100);// 每个分区最小的连接数boneCPDataSource.setMinConnectionsPerPartition(5); return boneCPDataSource;&#125; 设置Mybatis和Spring Boot整合Mybatis和Spring Boot的整合有两种方式： 第一种：使用mybatis官方提供的SpringBoot整合包实现，地址：https://github.com/mybatis/spring-boot-starter 第二种：使用mybatis-spring整合的方式，也就是我们传统的方式 这里我们推荐使用第二种，因为这样我们可以很方便的控制Mybatis的各种配置。 首先，创建一个Mybatis的配置类： 代码： import javax.sql.DataSource; import org.mybatis.spring.SqlSessionFactoryBean; import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.core.io.Resource; import org.springframework.core.io.support.PathMatchingResourcePatternResolver; import org.springframework.core.io.support.ResourcePatternResolver; @Configuration public class MyBatisConfig &#123; @Bean @ConditionalOnMissingBean //当容器里没有指定的Bean的情况下创建该对象 public SqlSessionFactoryBean sqlSessionFactory(DataSource dataSource) &#123;SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();// 设置数据源sqlSessionFactoryBean.setDataSource(dataSource);// 设置 mybatis 的主配置文件ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();Resource mybatisConfigXml =resolver.getResource(&quot;classpath:mybatis/mybatis-config.xml&quot;);sqlSessionFactoryBean.setConfigLocation(mybatisConfigXml);// 设置别名包sqlSessionFactoryBean.setTypeAliasesPackage(&quot;com.taotao.cart.pojo&quot;); return sqlSessionFactoryBean;&#125;&#125; 然后，创建Mapper接口的扫描类MapperScannerConfig： 代码： import org.mybatis.spring.mapper.MapperScannerConfigurer; import org.springframework.boot.autoconfigure.AutoConfigureAfter; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration @AutoConfigureAfter(MyBatisConfig. class )//保证在MyBatisConfig实例化之后再实例化该类 public class MapperScannerConfig &#123;// mapper 接口的扫描器 @Bean public MapperScannerConfigurer mapperScannerConfigurer() &#123;MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();mapperScannerConfigurer.setBasePackage(&quot;com.taotao.cart.mapper&quot;); return mapperScannerConfigurer;&#125;&#125; 设置事务管理在Spring Boot中推荐使用\@Transactional注解来申明事务。 首先需要导入依赖： &lt;dependency &gt;&lt;groupId &gt;org.springframework.boot &lt;/groupId &gt;&lt;artifactId &gt;spring-boot-starter- jdbc &lt;/artifactId &gt;&lt;/dependency &gt; 当引入jdbc依赖之后，SpringBoot会自动默认分别注入DataSourceTransactionManager或JpaTransactionManager，所以我们不需要任何额外配置就可以用\@Transactional注解进行事务的使用。 在Service中添加\@Transactional注解： 设置Redis和Spring的整合在SpringBoot中提供了RedisTempplate的操作，我们暂时不做学习，先按照我们之前的实现来完成。 代码： import java.util.ArrayList; import java.util.List; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import redis.clients.jedis.JedisPoolConfig; import redis.clients.jedis.JedisShardInfo; import redis.clients.jedis.ShardedJedisPool; @Configuration @PropertySource(value = &quot;classpath:redis.properties&quot;) public class RedisSpringConfig &#123; @Value(&quot; $&#123;redis.maxTotal&#125;&quot;) private Integer redisMaxTotal; @Value(&quot; $&#123;redis.node1.host&#125;&quot;) private String redisNode1Host; @Value(&quot; $&#123;redis.node1.port&#125;&quot;) private Integer redisNode1Port; private JedisPoolConfig jedisPoolConfig() &#123;JedisPoolConfig jedisPoolConfig = new JedisPoolConfig ();jedisPoolConfig.setMaxTotal(redisMaxTotal); return jedisPoolConfig;&#125; @Bean public ShardedJedisPool shardedJedisPool() &#123;List &lt;JedisShardInfo &gt; jedisShardInfos = new ArrayList &lt;JedisShardInfo &gt;();jedisShardInfos.add( new JedisShardInfo(redisNode1Host, redisNode1Port)); return new ShardedJedisPool(jedisPoolConfig(), jedisShardInfos);&#125;&#125; 设置Httpclient和Spring的整合 import org.apache.http.client.config.RequestConfig; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClients; import org.apache.http.impl.conn.PoolingHttpClientConnectionManager; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.context.annotation.Scope; import com.taotao.common.httpclient.IdleConnectionEvictor; @Configuration @PropertySource(value = &quot;classpath:httpclient.properties&quot;) public class HttpclientSpringConfig &#123; @Value(&quot; $&#123;http.maxTotal&#125;&quot;) private Integer httpMaxTotal; @Value(&quot; $&#123;http.defaultMaxPerRoute&#125;&quot;) private Integer httpDefaultMaxPerRoute; @Value(&quot; $&#123;http.connectTimeout&#125;&quot;) private Integer httpConnectTimeout; @Value(&quot; $&#123;http.connectionRequestTimeout&#125;&quot;) private Integer httpConnectionRequestTimeout; @Value(&quot; $&#123;http.socketTimeout&#125;&quot;) private Integer httpSocketTimeout; @Value(&quot; $&#123;http.staleConnectionCheckEnabled&#125;&quot;) private Boolean httpStaleConnectionCheckEnabled; @Autowired private PoolingHttpClientConnectionManager manager; @Bean public PoolingHttpClientConnectionManagerpoolingHttpClientConnectionManager() &#123;PoolingHttpClientConnectionManager poolingHttpClientConnectionManager = new PoolingHttpClientConnectionManager();// 最大连接数poolingHttpClientConnectionManager.setMaxTotal(httpMaxTotal);// 每个主机的最大并发数poolingHttpClientConnectionManager.setDefaultMaxPerRoute(httpDefaultMaxPerRoute); return poolingHttpClientConnectionManager;&#125;// 定期关闭无效连接 @Bean public IdleConnectionEvictor idleConnectionEvictor() &#123; return new IdleConnectionEvictor(manager);&#125;// 定义 Httpclient 对 @Bean @Scope(&quot;prototype&quot;) public CloseableHttpClient closeableHttpClient() &#123; return HttpClients. custom ().setConnectionManager( this .manager).build();&#125;// 请求配置 @Bean public RequestConfig requestConfig() &#123; return RequestConfig. custom ().setConnectTimeout(httpConnectTimeout) //创建连接的最长时间.setConnectionRequestTimeout(httpConnectionRequestTimeout) //从连接池中获取到连接的最长时间.setSocketTimeout(httpSocketTimeout) // 数据传输的最长时间. setStaleConnectionCheckEnabled(httpStaleConnectionCheckEnabled) //提交请求前测试连接是否可用.build();&#125;&#125; 设置RabbitMQ和Spring的整合我们之前使用的Spring-Rabbit的xml方式，现在我们要改造成java方式，并且SpringBoot对RabbitMQ的使用做了自动配置，更加的简化了我们的使用。 在导入spring-boot-starter-amqp的依赖； 在application.properties文件中配置RabbitMQ的连接信息 编写Rabbit的Spring配置类 import org.springframework.amqp.core.Queue;&gt; import org.springframework.amqp.rabbit.connection.ConnectionFactory;&gt; import org.springframework.amqp.rabbit.core.RabbitAdmin;&gt; import org.springframework.beans.factory.annotation.Autowired;&gt; import org.springframework.context.annotation.Bean;&gt; import org.springframework.context.annotation.Configuration;&gt; @Configuration&gt; public class RabbitMQSpringConfig &#123;&gt; @Autowired&gt; private ConnectionFactory connectionFactory;&gt; // 管理&gt; @Bean&gt; public RabbitAdmin rabbitAdmin() &#123;&gt; return new RabbitAdmin(connectionFactory);&gt; &#125;&gt; // 声明队列&gt; @Bean&gt; public Queue taotaoCartLoginQueue() &#123;&gt; // 默认就是自动声明的&gt; return new Queue(&quot;TAOTAO-CART-LOGIN-QUEUE&quot;, true );&gt; &#125;&gt; // 声明队列&gt; @Bean&gt; public Queue taotaoCartOrderSuccessQueue() &#123;&gt; // 默认就是自动声明的&gt; return new Queue(&quot;TAOTAO-CART-ORDER-SUCCESS-QUEUE&quot;, true );&gt; &#125;&gt; &#125; 设置监听 设置SpringMVC的配置原有配置： 具体实现： 视图解析器配置： 自定义拦截器： import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter; import com.taotao.cart.interceptors.UserLoginHandlerInterceptor; @Configuration public class SpringMVCConfig extends WebMvcConfigurerAdapter &#123; @Override public void addInterceptors(InterceptorRegistry registry) &#123;// 判断用户是否登录的拦截器registry.addInterceptor( new UserLoginHandlerInterceptor()).addPathPatterns(&quot;/cart/ &quot;);&#125;&#125; 设置dubbo的配置Dubbo目前只能使用xml配置的方式，所以我们需要保留xml，并且需要将该xml加入到现有的Spring容器中才能生效。 将dubbo目录以及下面的xml配置文件拷贝到taotao-cat-springboot中 将dubbo的xml文件加入到spring容器 编写入口类 编写main方法： 启动错误1关键错误（丢失了web容器的工厂，也就是说我们并没有把它作为一个web应用来启动）： org.springframework.context.ApplicationContextException: Unable to startembedded container; nested exception isorg.springframework.context.ApplicationContextException: Unable to startEmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactorybean. 解决： 让Spring Boot来自动选择并且完成web的相关加载工作。 Slf4j日志警告 提示我们当前的项目中slf4j引入了2个，导致了jar冲突。 解决： 删除自己引入到slf4j的依赖 将taotao-common中传递的依赖排除掉 再次启动，发现警告没了： 解决jsp访问404的问题由于Springboot使用的内嵌的tomcat，而内嵌的tamcat是不支持jsp页面的，所有需要导入额外的包才能解决。 &lt;dependency &gt;&lt;groupId &gt;org.apache.tomcat.embed &lt;/groupId &gt;&lt;artifactId &gt; tomcat -embed- jasper &lt;/artifactId &gt;&lt;scope &gt;provided &lt;/scope &gt;&lt;/dependency &gt; 重新启动进行测试： 拦截器中的UserService空指针异常分析：由于添加拦截器时，直接对UserLoginHandlerInterceptor进行new操作，导致UserService无法注入，所以有空指针异常。 解决： 路径问题现在我们进入Servlet的路径为”/”，访问 .html页面没问题，但是，访问 /service/就会有问题，所以需要改一下js，将原有的/service/ 改为 / 测试，功能一切ok。 发布到独立的tomcat中运行在开发阶段我们推荐使用内嵌的tomcat进行开发，因为这样会方便很多，但是到生成环境，我希望在独立的tomcat容器中运行，因为我们需要对tomcat做额外的优化，这时我们需要将工程打包成war包发进行发布。 工程的打包方式为war 将spring-boot-starter-tomcat的范围设置为provided设置为provided是在打包时会将该包排除，因为要放到独立的tomcat中运行，是不需要的。 &lt;dependency &gt;&lt;groupId &gt;org.springframework.boot &lt;/groupId &gt;&lt;artifactId &gt;spring-boot-starter- tomcat &lt;/artifactId &gt;&lt;scope &gt;provided &lt;/scope &gt;&lt;/dependency &gt; 修改代码，设置启动配置需要集成SpringBootServletInitializer，然后重写configure，将SpringBoot的入口类设置进去。 打war包 打包成功： 部署到tomcat解压apache-tomcat-7.0.57.tar.gz，将war包解压到webapps下的ROOT目录中，启动： 完美！]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[家里的八卦钟]]></title>
    <url>%2Fposts%2F9632%2F</url>
    <content type="text"><![CDATA[“叮咚.叮咚..叮咚…”躺在长长的座椅上，眯眼午憩。这是墙上挂着的八卦钟发出的细腻清脆的声音。只有半睡眠，四周宁静，才听得清楚。想起这老东西已经走了40年了，听说1978年买的，当初花了7块钱买的。当初刚刚从茅草房子到盖了泥砖瓦房，新添了这东西。这老东西就是耐操，从旧房子到新房子，再从新房子到旧房子，它依然在走。期间换过几个电子挂钟，没用多久就坏了，还要老换电池。那看东西硬是没坏过，一停，给它加上链就可以了，像小时候的玩具车，扭几下能跑一下，这货扭几下能跑半个月(上面印了3个5，还标了15天的字样)。它还有闹钟的功能，铛.铛..铛…十分锐耳响亮，以前住泥砖瓦房的时候，基本在用闹钟，现在就不用了。以前的房子氛围跟这声音很搭，现在的房子倒觉得不太和谐了。不懂是不是习惯了在那样的环境下特有的感觉。夏夜，夜虫鸣伴着钟摆的声音，催眠曲。那年仲夏，午夜起床撒尿，见啊爷坐在躺椅上看电视，我问几点了，他说两点，我说还有多久天亮，他指了指八卦钟，短的那根指针指到那个位置就天亮了。那时候开始，才知道夜有多长，用指针跑了多长，衡量夜大概有多长。除了镜面老化，不知道什么时候自己裂开已外，没有什么破烂的地方。啊婆曾催啊爷买一块镜换掉坏了的镜，但是一直没买，直到爷爷去世，估计是忘了，现在只是用透明胶粘着，能看清楚就可以了(现在想买估计也买不到了吧！)。最终我们摒弃了电子钟，重新挂上它。估计它还能走十几年吧！刚刚买的时候，是开始可以买奖那一年，福利彩票还是什么鬼，不知道。啊爷被人调侃，买这东西要缴税咯！ 时间在变，老钟还在走，钟摆的声音没变，一直都没变，但愿还能跑几十年！]]></content>
      <categories>
        <category>me</category>
      </categories>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中的接口]]></title>
    <url>%2Fposts%2F34737%2F</url>
    <content type="text"><![CDATA[这个我在知乎上偶然看到的问答，，，哈哈哈哈，，，简单粗暴 原因就在于，接口这个翻译太二逼了。。。其实就是协议。。。协议双方根据协议内容工作我有一个方法，需要一个参数，这个参数是某个类的对象，我们要调用这个参数的fuck方法让他干起来。void ml(Animal a)&#123;a.fuckMe();&#125; 如果这个动物对象a，没有fuckME函数，会发生什么。。。。。。程序根本通不过编译。 所以此时需要一个接口interface Fuckable&#123;void fuckMe():&#125;void ml(Fuckable a)&#123;a.fuckMe();&#125; 我要求传入进来的必须是有fuckme方法的，要不然我这个函数体就失败了。按理来说可以在文档里面说明，但是万一有个二逼传入进来一条母狗，母猩猩，女螃蟹，我咋办，下得去手吗？所以我强制规定，必须是能草的！！什么是能草的呢？这就是实现这个接口的。。只要你实现了这个Fuckable 接口，就必须实现fuckMe方法。要不就报错。你想要让我草，你就实现这个接口，你就要实现fuckme方法。如果你实现了，当你传入进来后，我不管你是人是兽是水壶,ok，你实现这个接口了，意味着你一定有fuckme方法，那我就可以继续了。。。所以接口就是协议。调用者和被调用者之间的协议。。当你调用者要求被调用的必须能做某些时，你就用接口。。接口也意味着想有资格被调用，就要实现规定好的方法。。 接口也有泛化的意思也就是说让一个类成员可以是多个对象。举个例子一个成员Dog d = new Dog 好了，以后这个成员没法变了，就是Dog了。 但是如果用接口Animal a那么传入什么都行，只要实现接口，也就是说只要具有我跟你协定好的功能就能来。。易于扩展。。新的功能，只要实现了这个接口就行。 class 网民 &#123;public void 上网 (能上网的 东西) &#123; 东西.上网(); &#125;&#125; 那么当你使用这个类的时候，你可以给它一部电脑，也可以给一台ipad。如果你把”能上网“这个接口变成某一个类的方法，那网民类就要改写：class 网民 &#123;public void 用电脑上网 (电脑) &#123; 电脑.上网(); &#125;public void 用iPad上网 (iPad) &#123; iPad.上网(); &#125;&#125; 忽然有一天，智能家居出现了，你发现家里的电视也能上网了，你就不得不更改”网民“类，加入另一个方法好让它能使用电视上网。 你能问出这个问题是因为你没有设计API的经验，如果”网民“类是在一个API中，你就不能随意更改了，于是导致了即便出现了能上网的电视，网民还是无法使用的情况。 作者：知乎用户链接：https://www.zhihu.com/question/20111251/answer/30093183来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Layui 多文件上传]]></title>
    <url>%2Fposts%2F65299%2F</url>
    <content type="text"><![CDATA[layui多文件上传的时候，其实并没有一次全部提交，而是逐个文件上上传。以下是文件上传的代码实现，每次选择文件时，在上传前能预览本地图片，点击绑定按钮再发送请求上传文件。 //layui目前版本上传每个文件都要发送一次请求//设置变量累加每次请求返回的数据,统一做后续处理var resultData = new Array();function initUpload() &#123; layui.use(['upload'], function () &#123; var upload = layui.upload,layer = layui.layer; var seqNo = $('#attachedSeq').val(); var url = '/ecm/anon/uploadFile/' + seqNo; var uploadInst = upload.render(&#123; elem: '#drapUpload', url: url, accept: 'file', size: 100 * 1024, //限制文件大小，单位 KB multiple: true, //允许多文件上传 auto: false, //选完文件后不要自动上传 bindAction: '#doUpload', //指定一个按钮触发上传 choose: function (obj) &#123; var files = this.files = obj.pushFile();//将每次选择的文件追加到文件队列 //图像预览，如果是多文件，会逐个添加。(不支持ie8/9) obj.preview(function(index, file, result)&#123; if (files.size &gt; 0 &amp;&amp; $('#div_prev').find('img').length === 0) &#123; $('#div_prev').empty(); &#125; // 添加图片 ImgPreview-预览的dom元素的id $('#div_prev').append('&lt;div class="image-container" id="container'+index+'"&gt;' + '&lt;div style="dispaly:inline-block" class="delete-css"&gt;' + '&lt;button id="upload_img_'+index+'" class="layui-btn layui-btn-danger layui-btn-xs"&gt;删除&lt;/button&gt;&lt;/div&gt;' + '&lt;img id="showImg'+index+'" style="width: 150px;height: 98px; margin:10px;cursor:pointer;"src="' + result + '" alt="' + file.name + '"&gt;&lt;/div&gt;'); //删除某图片 $("#upload_img_" + index).bind('click', function () &#123; delete files[index]; $("#container"+index).remove(); &#125;); //某图片放大预览 $("#showImg"+index).bind('click',function () &#123; var width = $("#showImg"+index).width(); var height = $("#showImg"+index).height(); var scaleWH = width/height; var bigH = 600; var bigW = scaleWH*bigH; if(bigW&gt;900)&#123; bigW = 900; bigH = bigW/scaleWH; &#125; // 放大预览图片 layer.open(&#123; type: 1, title: false, closeBtn: 1, shadeClose: true, area: [800 + 'px', 400 + 'px'], //宽高 content: "&lt;img width='"+bigW+"' height='"+bigH+"' src=" + result + " /&gt;" &#125;); &#125;); &#125;); &#125;, before: function (obj) &#123; //obj参数包含的信息，跟 choose回调完全一致，可参见上文。 &#125;, done: function (res, index, upload) &#123; layer.closeAll('loading'); var data = res.data; if (res.code == 1) &#123; for (var i = 0; i &lt; data.length; i++) &#123; resultData[resultData.length + i] = data[i]; &#125; &#125; /* $("#upload_img_" + index).trigger("click"); $("#container"+index).remove();*/ &#125;, allDone: function(obj)&#123; //当文件全部被提交后，才触发 layer.msg('上传成功'); setAttachedTable(resultData); resultData = [];//清空 /* console.log(obj.total); //得到总文件数 console.log(obj.successful); //请求成功的文件数 console.log(obj.aborted); //请求失败的文件数*/ &#125; ,error: function () &#123; layer.msg('上传失败'); layer.closeAll('loading'); &#125; &#125;); &#125;);&#125;]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取随机图]]></title>
    <url>%2Fposts%2F2671%2F</url>
    <content type="text"><![CDATA[突然发现一个可以获取随机图片的网站: Unsplash Source最简单的使用： https://source.unsplash.com/random/ + 图片规格例如： https://source.unsplash.com/random/800x600这样，页面每次刷新都是不同的随机图片]]></content>
  </entry>
  <entry>
    <title><![CDATA[oop]]></title>
    <url>%2Fposts%2F2332%2F</url>
    <content type="text"><![CDATA[设计原则 概述在运用面向对象的思想进行软件设计时，需要遵循的原则一共有7个，他们是： 单一职责原则（Single Responsibility Principle） 每一个类应该专注于做一件事情。 里氏替换原则（Liskov Substitution Principle） 超类存在的地方，子类是可以替换的。 依赖倒置原则（Dependence Inversion Principle） 实现尽量依赖抽象，不依赖具体实现。 接口隔离原则（Interface Segregation Principle） 应当为客户端提供尽可能小的单独的接口，而不是提供大的总的接口。 迪米特法则（Law Of Demeter） 又叫最少知识原则，一个软件实体应当尽可能少的与其他实体发生相互作用。 开闭原则（Open Close Principle） 面向扩展开放，面向修改关闭。 组合/聚合复用原则（Composite/Aggregate Reuse Principle CARP） 尽量使用合成/聚合达到复用，尽量少用继承。原则： 一个类中有另一个类的对象。 细则单一职责原则（Single Responsibility Principle）因为： 可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；提高类的可读性，提高系统的可维护性；变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。需要说明的一点是单一职责原则不只是面向对象编程思想所特有的，只要是模块化的程序设计，都适用单一职责原则。 所以： 从大局上看Android中的Paint和Canvas等类都遵守单一职责原则，Paint和Canvas各司其职。 里氏替换原则（Liskov Substitution Principle）因为： 里氏替换原则告诉我们，在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。里氏替换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。 所以： 使用里氏替换原则时需要注意，子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。 从大局看Java的多态就属于这个原则。 依赖倒置原则（Dependence Inversion Principle）因为： 具体依赖抽象，上层依赖下层。假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类；而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口；这样就达到了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖。 所以： 采用依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，减少并行开发引起的风险，提高代码的可读性和可维护性。 从大局看Java的多态就属于这个原则。 接口隔离原则（Interface Segregation Principle）因为： 提供尽可能小的单独接口，而不要提供大的总接口。暴露行为让后面的实现类知道的越少越好。譬如类ProgramMonkey通过接口CodeInterface依赖类CodeC，类ProgramMaster通过接口CodeInterface依赖类CodeAndroid，如果接口CodeInterface对于类ProgramMonkey和类CodeC来说不是最小接口，则类CodeC和类CodeAndroid必须去实现他们不需要的方法。将臃肿的接口CodeInterface拆分为独立的几个接口，类ProgramMonkey和类ProgramMaster分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。 所以： 建立单一接口，不要建立庞大的接口，尽量细化接口，接口中的方法尽量少。也就是要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。依赖几个专用的接口要比依赖一个综合的接口更灵活。接口是设计时对外部设定的约定，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。 从大局来说Java的接口可以实现多继承就是接口隔离原则的基础保障。 迪米特法则（Law Of Demeter）因为： 类与类之间的关系越密切，耦合度也就越来越大，只有尽量降低类与类之间的耦合才符合设计模式；对于被依赖的类来说，无论逻辑多复杂都要尽量封装在类的内部；每个对象都会与其他对象有耦合关系，我们称出现成员变量、方法参数、方法返回值中的类为直接的耦合依赖，而出现在局部变量中的类则不是直接耦合依赖，也就是说，不是直接耦合依赖的类最好不要作为局部变量的形式出现在类的内部。 所以： 一个对象对另一个对象知道的越少越好，即一个软件实体应当尽可能少的与其他实体发生相互作用，在一个类里能少用多少其他类就少用多少，尤其是局部变量的依赖类，能省略尽量省略。同时如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一方法的话，可以通过第三者转发这个调用。 从大局来说Android App开发中的多Fragment与依赖的Activity间交互通信遵守了这一法则。 开闭原则（Open Close Principle）因为： 开放封闭原则主要体现在对扩展开放、对修改封闭，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。软件需求总是变化的，世界上没有一个软件的是不变的，因此对软件设计人员来说，必须在不需要对原有系统进行修改的情况下，实现灵活的系统扩展。 所以： 可以通过Template Method模式和Strategy模式进行重构，实现对修改封闭，对扩展开放的设计思路。封装变化，是实现开放封闭原则的重要手段，对于经常发生变化的状态，一般将其封装为一个抽象，拒绝滥用抽象，只将经常变化的部分进行抽象。 组合/聚合复用原则（Composite/Aggregate Reuse Principle CARP）因为： 其实整个设计模式就是在讲如何类与类之间的组合/聚合。在一个新的对象里面通过关联关系（包括组合关系和聚合关系）使用一些已有的对象，使之成为新对象的一部分，新对象通过委派调用已有对象的方法达到复用其已有功能的目的。也就是，要尽量使用类的合成复用，尽量不要使用继承。 如果为了复用，便使用继承的方式将两个不相干的类联系在一起，违反里氏代换原则，哪是生搬硬套，忽略了继承了缺点。继承复用破坏数据封装性，将基类的实现细节全部暴露给了派生类，基类的内部细节常常对派生类是透明的，白箱复用；虽然简单，但不安全，不能在程序的运行过程中随便改变；基类的实现发生了改变，派生类的实现也不得不改变；从基类继承而来的派生类是静态的，不可能在运行时间内发生改变，因此没有足够的灵活性。 所以： 组合/聚合复用原则可以使系统更加灵活，类与类之间的耦合度降低，一个类的变化对其他类造成的影响相对较少，因此一般首选使用组合/聚合来实现复用；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾 忆]]></title>
    <url>%2Fposts%2F52058%2F</url>
    <content type="text"><![CDATA[班级: 软件工程2013级135班级小伙伴们的合影 募捐: 萤火虫虽小，但它的尾部代表者希望柳州市五星街 科创： 大学生科技创新中心小伙伴们的合影 青协： 青年志愿者协会小伙伴们的合影, 有无数美好的回忆 徒步： 柳州桥的故事20公里徒步小伙伴们的合影 校运会: 每年一届的校运会小伙伴们的合影]]></content>
      <categories>
        <category>photo</category>
      </categories>
      <tags>
        <tag>photo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[without any reason]]></title>
    <url>%2Fposts%2F46473%2F</url>
    <content type="text"><![CDATA[没有为什么的为什么 我以前超级喜欢喝可乐突然有一天我不喜欢喝了不喜欢就是不喜欢了我没有错可乐也没有错]]></content>
      <categories>
        <category>me</category>
      </categories>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[75道逻辑思维题目]]></title>
    <url>%2Fposts%2F55598%2F</url>
    <content type="text"><![CDATA[75道逻辑思维题【1】 假设有一个池塘，里面有无穷多的水。现有2个空水壶，容积分别为5升和6升。问题是如何只用这2个水壶从池塘里取得3升的水。 答案：5升水壶我们称为A，6升水壶为B.1.A装满往B倒 （A: 空，B: 5L）2.A再装满往B倒直到满(A: 4L B: 满)3.倒出B,A剩余的水往B倒(A: 空 B: 4L)4.A装满往B倒满 （A:3L B:满） 【2】 周雯的妈妈是豫林水泥厂的化验员。 一天，周雯来到化验室做作业。做完后想出去玩。 “等等，妈妈还要考你一个题目，”她接着说，”你看这6只做化验用的玻璃杯，前面3只盛满了水，后面3只是空的。你 能只移动1只玻璃杯，就便盛满水的杯子和空杯子间隔起来 吗?” 爱动脑筋的周雯，是学校里有名的”小机灵”，她只想了一会儿就做到了。 请你想想看，”小机灵”是怎样做的?【3】 三个小伙子同时爱上了一 个姑娘，为了决定他们谁能娶这个姑娘，他们决定用手枪进行一次决斗。小李的命中率是30％，小黄比他好些，命中率是50％，最出色的枪手是小林，他从不失 误，命中率是100％。由于这个显而易见的事实，为公平起见，他们决定按这样的顺序：小李先开枪，小黄第二，小林最后。然后这样循环，直到他们只剩下一个 人。那么这三个人中谁活下来的机会最大呢？他们都应该采取什么样的策略？【4】 一间囚房里关押着两个犯人。每天监狱都会为这间囚房提供一罐汤，让这两个犯人自己来分。起初，这两个 人经常会发生争执，因为他们总是有人认为对方的汤比自己的多。后来他们找到了一个两全其美的办法：一个人分汤，让另一个人先选。于是争端就这么解决了。可 是，现在这间囚房里又加进来一个新犯人，现在是三个人来分汤。必须寻找一个新的方法来维持他们之间的和平。该怎么办呢？按：心理问题，不是逻辑问题【5】 在一张长方形的桌面上放了n个一样大小的圆形硬币。这些硬币中可能有一些不完全在桌面内，也可能有一些彼此重叠；当再多放一个硬币而它的圆心在桌面内时，新放的硬币便必定与原先某些硬币重叠。请证明整个桌面可以用4n个硬币完全覆盖【6】一个球、一把长度大约是球的直径2/3长度的直尺.你怎样测出球的半径？方法很多，看看谁的比较巧妙【7】五个大小相同的一元人民币硬币。要求两两相接触，应该怎么摆？四个靠在一起，一个放在四个的上面。 【8】猜牌问题S先生、P先生、Q先生他们知道桌子的抽屉里有16张扑克牌：红桃A、Q、4 黑桃J、8、4、2、7、3 草花K、Q、5、4、6 方块A、5。约翰教授从这16张牌中挑出一张牌来，并把这张牌的点数告诉 P先生，把这张牌的花色告诉Q先生。这时，约翰教授问P先生和Q 先生：你们能从已知的点数或花色中推知这张牌是什么牌吗？ 于是，S先生听到如下的对话：P先生：我不知道这张牌。Q先生：我知道你不知道这张牌。P先生：现在我知道这张牌了。Q先生：我也知道了。听罢以上的对话，S先生想了一想之后，就正确地推出这张牌是什么牌。请问：这张牌是什么牌？ 【9】一个教授逻辑学的教授，有三个学生，而且三个学生均非常聪明！一天教授给他们出了一个题，教授在每个人脑门上贴了一张纸条并告诉他们，每个人的纸条上都写了一个正整数，且某两个数的和等于第三个！（每个人可以看见另两个数，但看不见自己的）教授问第一个学生：你能猜出自己的数吗？回答：不能，问第二个，不能，第三个，不能，再问第一个，不能，第二个，不能，第三个：我猜出来了，是144！教授很满意的笑了。请问您能猜出另外两个人的数吗？ 【10】某城市发生了一起汽车撞人逃跑事件该城市只有两种颜色的车,蓝色15% 绿色85%事发时有一个人在现场看见了他指证是蓝车但是根据专家在现场分析,当时那种条件能看正确的可能性是80%那么,肇事的车是蓝车的概率到底是多少? 【11】有一人有240公斤水，他想运往干旱地区赚钱。他每次最多携带60公斤，并且每前进一公里须耗水1公斤（均匀耗水）。假设水的价格在出发地为0，以后，与运输路程成正比， （即在10公里处为10元/公斤，在20公里处为20元/公斤……），又假设他必须安全返回，请问，他最多可赚多少钱？【12】现在共有100匹马跟100块石头，马分3种，大型马；中型马跟小型马。其中一匹大马一次可以驮3块石头，中型马可以驮2块，而小型马2头可以驮一块石头。问需要多少匹大马，中型马跟小型马？（问题的关键是刚好必须是用完100匹马）【13】1=5 2=15 3=215 4=2145 那么5=?【14】有2n个人排队进电影院，票价是50美分。在这2n个人当中，其中n个人只有50美分，另外n个人有1美元（纸票子）。愚蠢的电影院开始卖票时1分钱也没有。问： 有多少种排队方法 使得 每当一个拥有1美元买票时，电影院都有50美分找钱注： 1美元=100美分，拥有1美元的人，拥有的是纸币，没法破成2个50美分 【15】一个人花8块钱买了一只鸡，9块钱卖掉了，然后他觉得不划算，花10块钱又买回来了，11块卖给另外一个人。问他赚了多少?【16】有一种体育竞赛共含M个项目，有运动员A，B，C参加，在每一项目中，第一,第二,第三名分别的X，Y，Z分，其中X,Y,Z为正整数且X&gt;Y&gt;Z。最后A得22分，B与C均得9分，B在百米赛中取得第一。求M的值，并问在跳高中谁得第二名。【17】前提：1 有五栋五种颜色的房子2 每一位房子的主人国籍都不同3 这五个人每人只喝一种饮料，只抽一种牌子的香烟，只养一种宠物4 没有人有相同的宠物，抽相同牌子的香烟，喝相同的饮料提示：１ 英国人住在红房子里２ 瑞典人养了一条狗３ 丹麦人喝茶４ 绿房子在白房子左边５ 绿房子主人喝咖啡６ 抽ＰＡＬＬ ＭＡＬＬ烟的人养了一只鸟７ 黄房子主人抽ＤＵＮＨＩＬＬ烟８ 住在中间那间房子的人喝牛奶９ 挪威人住第一间房子１０ 抽混合烟的人住在养猫人的旁边１１ 养马人住在抽ＤＵＮＨＩＬＬ烟的人旁边１２ 抽ＢＬＵＥ ＭＡＳＴＥＲ烟的人喝啤酒１３ 德国人抽ＰＲＩＮＣＥ烟１４ 挪威人住在蓝房子旁边１５ 抽混合烟的人的邻居喝矿泉水 问题是：谁养鱼？？？ 【18】5个人来自不同地方，住不同房子，养不同动物，吸不同牌子香烟，喝不同饮料，喜欢不同食物。根据以下线索确定谁是养猫的人。1． 红房子在蓝房子的右边，白房子的左边（不一定紧邻）2． 黄房子的主人来自香港，而且他的房子不在最左边。3． 爱吃比萨的人住在爱喝矿泉水的人的隔壁。4． 来自北京的人爱喝茅台，住在来自上海的人的隔壁。5． 吸希尔顿香烟的人住在养马人的右边隔壁。6． 爱喝啤酒的人也爱吃鸡。7． 绿房子的人养狗。8． 爱吃面条的人住在养蛇人的隔壁。9． 来自天津的人的邻居（紧邻）一个爱吃牛肉，另一个来自成都。10．养鱼的人住在最右边的房子里。11．吸万宝路香烟的人住在吸希尔顿香烟的人和吸“555”香烟的人的中间（紧邻）12．红房子的人爱喝茶。13．爱喝葡萄酒的人住在爱吃豆腐的人的右边隔壁。14．吸红塔山香烟的人既不住在吸健牌香烟的人的隔壁，也不与来自上海的人相邻。15．来自上海的人住在左数第二间房子里。16．爱喝矿泉水的人住在最中间的房子里。17．爱吃面条的人也爱喝葡萄酒。18．吸“555”香烟的人比吸希尔顿香烟的人住的靠右 【19】斗地主附残局地主手中牌2、K、Q、J、10、9、8、8、6、6、5、5、3、3、3、3、7、7、7、7长工甲手中牌大王、小王、2、A、K、Q、J、10、Q、J、10、9、8、5、5、4、4长工乙手中牌2、2、A、A、A、K、K、Q、J、10、9、9、8、6、6、4、4三家都是明手，互知底牌。要求是：在三家都不打错牌的情况下，地主必须要么输要么赢。问：哪方会赢？ 【20】一楼到十楼的每层电梯门口都放着一颗钻石，钻石大小不一。你乘坐电梯从一楼到十楼，每层楼电梯门都会打开一次，只能拿一次钻石，问怎样才能拿到最大的一颗？【21】U2合唱团在17分钟 内得赶到演唱会场，途中必需跨过一座桥，四个人从桥的同一端出发，你得帮助他们到达另一端，天色很暗，而他们只有一只手电筒。一次同时最多可以有两人一起 过桥，而过桥的时候必须持有手电筒，所以就得有人把手电筒带来带去，来回桥两端。手电筒是不能用丢的方式来传递的。四个人的步行速度各不同，若两人同行则 以较慢者的速度为准。Bono需花1分钟过桥，Edge需花2分钟过桥，Adam需花5分钟过桥，Larry需花10分钟过桥。他们要如何在17分钟内过 桥呢？【22】一个家庭有两个小孩，其中有一个是女孩，问另一个也是女孩的概率（假定生男生女的概率一样） 【23】为什么下水道的盖子是圆的？【24】有7克、2克砝码各一个，天平一只，如何只用这些物品三次将140克的盐分成50、90克各一份？【25】芯片测试：有2k块芯片，已知好芯片比坏芯片多．请设计算法从其中找出一片好芯片，说明你所用的比较次数上限．其中：好芯片和其它芯片比较时，能正确给出另一块芯片是好还是坏．坏芯片和其它芯片比较时，会随机的给出好或是坏。 【26】话说有十二个鸡蛋，有一个是坏的（重量与其余鸡蛋不同），现要求用天平称三次，称出哪个鸡蛋是坏的！【27】100个人回答五道试题，有81人答对第一题，91人答对第二题，85人答对第三题，79人答对第四题，74人答对第五题，答对三道题或三道题以上的人算及格， 那么，在这100人中，至少有（ ）人及格。【28】陈奕迅有首歌叫十年吕珊有首歌叫3650夜那现在问,十年可能有多少天? 【29】11 12 11 2 1 11 1 1 2 2 1下一行是什么？ 【30】烧一根不均匀的绳要用一个小时，如何用它来判断半个小时？烧一根不均匀的绳,从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子,问如何用烧绳的方法来计时一个小时十五分钟呢? （微软的笔试题） 【31】共有三类药，分别重1g,2g,3g，放到若干个瓶子中，现在能确定每个瓶子中只有其中一种药，且每瓶中的药片足够多，能只称一次就知道各个瓶子中都是盛的哪类药吗？如果有4类药呢？5类呢？N类呢(N可数)？如果是共有m个瓶子盛着n类药呢(m，n为正整数，药的质量各不相同但各种药的质量已知)？你能只称一次就知道每瓶的药是什么吗？注：当然是有代价的，称过的药我们就不用了 【32】假设在桌上有三个密封 的盒，一个盒中有2枚银币(1银币=10便士)，一个盒中有2枚镍币(1镍币=5便士)，还有一个盒中有1枚银币和1枚镍币。这些盒子被标上10便士、 15便士和20便士，但每个标签都是错误的。允许你从一个盒中拿出1枚硬币放在盒前，看到这枚硬币，你能否说出每个盒内装的东西呢？【33】有一个大西瓜,用水果刀平整地切,总共切9刀,最多能切成多少份,最少能切成多少份?主要是过程，结果并不是最重要的 【34】一个巨大的圆形水池，周围布满了老鼠洞。猫追老鼠到水池边，老鼠未来得及进洞就掉入水池里。猫继续沿水池边缘企图捉住老鼠（猫不入水）。已知V猫=4V鼠。问老鼠是否有办法摆脱猫的追逐？【35】有三个桶，两个大的可装8斤的水，一个小的可装3斤的水，现在有16斤水装满了两大桶就是8斤的桶，小桶空着，如何把这16斤水分给4个人，每人4斤。没有其他任何工具，4人自备容器，分出去的水不可再要回来。【36】从前有一位老钟表匠， 为一个教堂装一只大钟。他年老眼花，把长短针装配错了，短针走的速度反而是长针的12倍。装配的时候是上午6点，他把短针指在“6 ”上，长针指在“12”上。老钟表匠装好就回家去了。人们看这钟一会儿7点，过了不一会儿就8点了，都很奇怪，立刻去找老钟表匠。等老钟表匠赶到，已经是 下午7点多钟。他掏出怀表来一对，钟准确无误，疑心人们有意捉弄他，一生气就回去了。这钟还是8点、9点地跑，人们再去找钟表匠。老钟表匠第二天早晨8点 多赶来用表一对，仍旧准确无误。 请你想一想，老钟表匠第一次对表的时候是7点几分？第二次对表又是8点几分？【37】今有2匹马、3头牛和4只羊，它们各自的总价都不满10000文钱（古时的货币单位）。如果2匹马加上1头牛，或者3 头牛加上1只羊，或者4只羊加上1匹马，那么它们各自的总价都正好是10000文钱了。问：马、牛、羊的单价各是多少文钱？【38】一天，harlan的 店里来了一位顾客，挑了25元的货，顾客拿出100元，harlan没零钱找不开，就到隔壁飞白的店里把这100元换成零钱，回来给顾客找了75元零钱。 过一会，飞白来找harlan，说刚才的是假钱，harlan马上给飞白换了张真钱，问harlan赔了多少钱？【39】猴子爬绳这道力学怪题乍看非常简单，可是据说它却使刘易斯．卡罗尔感到困惑。至于这道怪题是否由这位因《爱丽丝漫游奇境记》而闻名的牛津大学数学专家提出来的，那就不清楚了。总之，在一个不走运的时刻，他就下述问题征询人们的意见:一根绳子穿过无摩擦力的滑轮，在其一端悬挂着一只10磅重的砝码，绳子的另一端有只猴子，同砝码正好取得平衡。当猴子开始向上爬时，砝码将如何动作呢?“真奇怪，”卡罗尔写道，”许多优秀的数学家给出了截然不同的答案。普赖斯认为砝码将向上升，而且速度越来越快。克利夫顿(还有哈考特)则认为，砝码将以与猴子一样的速度向上升起，然而桑普森却说，砝码将会向下降!”一位杰出的机械工程师说”这不会比苍蝇在绳子上爬更起作用”，而一位科学家却认为”砝码的上升或下降将取决于猴子 吃苹果速度的倒数”，然而还得从中求出猴子尾巴的平方根。严肃地说，这道题目非常有趣，值得认真推敲。它很能说明趣题与力学问题之间的紧密联系。 【40】两个空心球，大小及重量相同，但材料不同。一个是金，一个是铅。空心球表面图有相同颜色的油漆。现在要求在不破坏表面油漆的条件下用简易方法指出哪个是金的，哪个是铅的。【41】有23枚硬币在桌上，10枚正面朝上。假设别人蒙住你的眼睛，而你的手又摸不出硬币的反正面。让你用最好的方法把这些硬币分成两堆，每堆正面朝上的硬币个数相同。 【42】三个村庄A、B、C和三个城镇A、B、C坐落在如图所示的环形山内。由于历史原因，只有同名的村与镇之间才有来往。为方便交通，他们准备修铁路。问题是：如何在这个环形山内修三条铁路连通A村与A镇，B村与B镇，C村与C镇。而这些铁路相互不能相交。（挖山洞、修立交桥都不算，绝对是平面问题）。想出答案再想想这个题说明什么问题。 ●●●●●●●●●Ｃ●●●●●●●●●●● ●● ●● ●● ●● ●● ●Ａ Ｃ Ｂ● ● ●● ● ●● ● ●● ● ●● ● ●● ● ●● ● ●●●●●●●●●●●●●●●●●●●●● 【43】屋里三盏灯,屋外三个开关,一个开关仅控制一盏灯,屋外看不到屋里怎样只进屋一次,就知道哪个开关控制哪盏灯?四盏呢~【44】2+7-2+7全部有火柴根组成，移动其中任何一根，答案要求为30说明：因为书写问题作如下解释，2是由横折横三根组成，7是由横折两根组成 【45】5名海盗抢得了窖藏的100块金子，并打算瓜分这些战利品。这是一些讲民主的海盗（当然是他们自己特有的民主），他们的习惯是按下面的方式进行分配：最厉害的一名海盗提出分配方案，然后所有的海盗（包括提出方案者本人）就此方案进行表决。如果50%或更多的海盗赞同此方案，此方案就获得通过并据此分配战利品。否则提出方案的海盗将被扔到海里，然后下一名最厉害的海盗又重复上述过程。所有的海盗都乐于看到他们的一位同伙被扔进海里，不过，如果让他们选择的话，他们还是宁可得一笔现金。他们当然也不愿意自己被扔到海里。所有的海盗都是有理性的，而且知道其他的海盗也是有理性的。此外，没有两名海盗是同等厉害的——这些海盗按照完全由上到下的等级排好了座次，并且每个人都清楚自己和其他所有人的等级。这些金块不能再分，也不允许几名海盗共有金块，因为任何海盗都不相信他的同伙会遵守关于共享金块的安排。这是一伙每人都只为自己打算的海盗。最凶的一名海盗应当提出什么样的分配方案才能使他获得最多的金子呢？ 【46】他们中谁的存活机率最大？5个囚犯，分别按1-5号在装有100颗绿豆的麻袋抓绿豆，规定每人至少抓一颗，而抓得最多和最少的人将被处死，而且，他们之间不能交流，但在抓的时候，可以摸出剩下的豆子数。问他们中谁的存活几率最大？提示：1，他们都是很聪明的人 2，他们的原则是先求保命，再去多杀人 3，100颗不必都分完 4，若有重复的情况，则也算最大或最小，一并处死【47】有5只猴子在海边发现 一堆桃子,决定第二天来平分.第二天清晨,第一只猴子最早来到,它左分右分分不开,就朝海里扔了一只,恰好可以分成5份,它拿上自己的一份走了.第 2,3,4,5只猴子也遇到同样的问题,采用了同样的方法,都是扔掉一只后,恰好可以分成5份.问这堆桃子至少有多少只？【48】话说某天一艘海盗船被天下砸下来的一头牛给击中了,5个倒霉的家伙只好逃难到一个孤岛,发现岛上孤零零的,幸好有有棵椰子树,还有一只猴子!大家把椰子全部采摘下来放在一起,但是天已经很晚了,所以就睡觉先.晚上某个家伙悄悄的起床,悄悄的将椰子分成5份,结果发现多一个椰子,顺手就给了幸运的猴子,然后又悄悄的藏了一份,然后把剩下的椰子混在一起放回原处,最后还是悄悄滴回去睡觉了.过了会儿,另一个家伙也悄悄的起床,悄悄的将剩下的椰子分成5份,结果发现多一个椰子,顺手就又给了幸运的猴子,然后又悄悄滴藏了一份,把剩下的椰子混在一起放回原处,最后还是悄悄滴回去睡觉了.又过了一会 ……又过了一会 …总之5个家伙都起床过,都做了一样的事情早上大家都起床,各自心怀鬼胎的分椰子了,这个猴子还真不是一般的幸运,因为这次把椰子分成5分后居然还是多一个椰子,只好又给它了.问题来了,这堆椰子最少有多少个?【49】小明和小强都是张老师的学生，张老师的生日是M月N日， 2人都知道张老师的生日是下列10组中的一天，张老师把M值告诉了小明，把N值告诉了小强，张老师问他们知道他的生日是那一天吗3月4日 3月5日3月8日6月4日6月7日9月1日9月5日12月1日12月2日12月8日小明说：如果我不知道的话，小强肯定也不知道小强说：本来我也不知道，但是现在我知道了小明说：哦，那我也知道了请根据以上对话推断出张老师的生日是哪一天 【50】一逻辑学家误入某部 落，被囚于牢狱，酋长欲意放行，他对逻辑学家说：“今有两门，一为自由，一为死亡，你可任意开启一门。现从两个战士中选择一人负责解答你所提的任何一个问 题（Y/N），其中一个天性诚实，一人说谎成性，今后生死任你选择。”逻辑学家沉思片刻，即向一战士发问，然后开门从容离去。逻辑学家应如何发问？【51】说从前啊,有一个富 人,他有30个孩子,其中15个是已故的前妻所生,其余15个是继室所生,这后一个妇人很想让她自己所生的最年长的儿子继承财产,于是,有一天,他就向他 说:”亲爱的丈夫啊,你就要老了,我们应该定下来谁将是你的继承人,让我们把我们的30个孩子排成一个圆圈,从他们中的一个数起,每逢到10就让那个孩子 站出去,直到最后剩下哪个孩子,哪个孩子就继承你的财产吧!”富人一想,我靠,这个题意相当有内涵了,不错,仿佛很公平,就这么办吧~不过,当剔选过程不 断进行下去的时候,这个富人傻眼了,他发现前14个被剔除的孩子都是前妻生的,而且下一个要被剔除的还是前妻生的,富人马上大手一挥,停,现在从这个孩子 倒回去数, 继室,就是这个歹毒的后妈一想,倒数就倒数,我15个儿子还斗不过你一个啊~她立即同意了富人的动议,你猜,到底谁做了继承人### 【52】“有一牧场，已知养牛27头，6天把草吃尽；养牛23头，9天把草吃尽。如果养牛21头，那么几天能把牧场上的草吃尽呢？并且牧场上的草是不断生长的。”【53】一个商人骑一头驴要穿越1000公里长的沙漠，去卖3000根胡萝卜。已知驴一次性可驮1000根胡萝卜，但每走一公里又要吃掉一根胡萝卜。问：商人共可卖出多少胡萝卜？【54】10箱黄金，每箱100块，每块一两有贪官，把某一箱的每块都磨去一钱请称一次找到不足量的那个箱子 【55】你让工人为你工作７天，给工人的回报是一根金条。金条平分成相连的７段，你必须在每天结束时都付费，如果只许你两次把金条弄断，你如何给你的工人付费？【56】有十瓶药，每瓶里都装有100片药（仿佛现在装一百片的少了，都是十片二十片的，不管，咱们就这么来了），其中有八瓶里的药每片重10克，另有两瓶里的药每片重9克。用一个蛮精确的小秤，只称一次，如何找出份量较轻的那两个药瓶？【57】一个经理有三个女儿， 三个女儿的年龄加起来等于13，三个女儿的年龄乘起来等于经理自己的年龄，有一个下属已知道经理的年龄，但仍不能确定经理三个女儿的年龄，这时经理说只有 一个女儿的头发是黑的，然后这个下属就知道了经理三个女儿的年龄。请问三个女儿的年龄分别是多少？为什么？【58】有三个人去住旅馆，住 三间房，每一间房$10元，于是他们一共付给老板$30，第二天，老板觉得三间房只需要$25元就够了于是叫小弟退回$5给三位客人，谁知小弟贪心,只退 回每人$1，自己偷偷拿了$2，这样一来便等于那三位客人每人各花了九元，于是三个人一共花了$27，再加上小弟独吞了不$2，总共是$29。可是当初他 们三个人一共付出$30那么还有$1呢？【59】有两位盲人，他们都各自买了两对黑袜和两对白袜，八对袜了的布质、大小完全相同， 而每对袜了都有一张商标纸连着。两位盲人不小心将八对袜了混在一起。他们每人怎样才能取回黑袜和白袜各两对呢？【60】有一辆火车以每小时 15公里的速度离开洛杉矶直奔纽约，另一辆火车以每小时20公里的速度从纽约开往洛杉矶。如果有一只鸟，以30公里每小时的速度和两辆火车同时启动，从洛 杉矶出发，碰到另一辆车后返回，依次在两辆火车来回飞行，直到两辆火车相遇，请问，这只小鸟飞行了多长距离？【61】你有两个罐子，50个红色弹球，50个蓝色弹球，随机选出一个罐子，随机选取出一个弹球放入罐子，怎么给红色弹球最大的选中机会？在你的计划中，得到红球的准确几率是多少？【62】你有四个装药丸的罐子，每个药丸都有一定的重量，被污染的药丸是没被污染的重量＋1.只称量一次，如何判断哪个罐子的药被污染了？【63】对一批编号为1～100，全部开关朝上(开)的灯进行以下*作：凡是1的倍数反方向拨一次开关；2的倍数反方向又拨一次开关；3的倍数反方向又拨一次开关……问：最后为关熄状态的灯的编号。【64】想象你在镜子前，请问，为什么镜子中的影像可以颠倒左右，却不能颠倒上下？【65】一群人开舞会，每人头 上都戴着一顶帽子。帽子只有黑白两种，黑的至少有一顶。每个人都能看到其它人帽子的颜色，却看不到自己的。主持人先让大家看看别人头上戴的是什幺帽子，然 后关灯，如果有人认为自己戴的是黑帽子，就打自己一个耳光。第一次关灯，没有声音。于是再开灯，大家再看一遍，关灯时仍然鸦雀无声。一直到第三次关灯，才 有劈劈啪啪打耳光的声音响起。问有多少人戴着黑帽子？【66】两个圆环，半径分别是1和2，小圆在大圆内部绕大圆圆周一周，问小圆自身转了几周？如果在大圆的外部，小圆自身转几周呢？【67】 1元钱一瓶汽水，喝完后两个空瓶换一瓶汽水，问：你有20元钱，最多可以喝到几瓶汽水？【68】有3顶红帽子，4顶黑 帽子，5顶白帽子。让10个人从矮到高站成一队，给他们每个人头上戴一顶帽子。每个人都看不见自己戴的帽子的颜色，却只能看见站在前面那些人的帽子颜色。 （所以最后一个人可以看见前面9个人头上帽子的颜色，而最前面那个人谁的帽子都看不见。现在从最后那个人开始，问他是不是知道自己戴的帽子颜色，如果他回 答说不知道，就继续问他前面那个人。假设最前面那个人一定会知道自己戴的是黑帽子。为什么？【69】假设排列着100个乒乓球，由两个人轮流拿球装入口袋，能拿到第100个乒乓球的人为胜利者。条件是：每次拿球者至少要拿1个，但最多不能超过5个，问：如果你是最先拿球的人，你该拿几个？以后怎么拿就能保证你能得到第100个乒乓球？【70】卢姆教授说：“有一次 我目击了两只山羊的一场殊死决斗，结果引出了一个有趣的数学问题。我的一位邻居有一只山羊，重54磅，它已有好几个季度在附近山区称王称霸。后来某个好事 之徒引进了一只新的山羊，比它还要重出3磅。开始时，它们相安无事，彼此和谐相处。可是有一天，较轻的那只山羊站在陡峭的山路顶上，向它的竞争对手猛扑过 去，那对手站在土丘上迎接挑战，而挑战者显然拥有居高临下的优势。不幸的是，由于猛烈碰撞，两只山羊都一命呜呼了。现在要讲一讲本题的奇妙之处。对饲养山羊颇有研究，还写过书的乔治．阿伯克龙比说道：“通过反复实验，我发现，动量相当于一个自20英尺高处坠落下来 的30磅重物的一次撞击，正好可以打碎山羊的脑壳，致它死命。”如果他说得不错，那么这两只山羊至少要有多大的逼近速度，才能相互撞破脑壳？你能算出来 吗？【71】据说有人给酒肆的老板娘出了一个难题：此人明明知道店里只有两个舀酒的勺子，分别能舀7两和11两酒，却硬要老板娘卖给他2两酒。聪明的老板娘毫不含糊，用这两个勺子在酒缸里舀酒，并倒来倒去，居然量出了2两酒，聪明的你能做到吗？【72】已知： 每个飞机只有一个油箱， 飞机之间可以相互加油（注意是相互，没有加油机） 一箱油可供一架飞机绕地球飞半圈，问题：为使至少一架飞机绕地球一圈回到起飞时的飞机场，至少需要出动几架飞机？（所有飞机从同一机场起飞，而且必须安全 返回机场，不允许中途降落，中间没有飞机场）【73】在9个点上画10条直线，要求每条直线上至少有三个点？【74】一个岔路口分别通向诚实国和说谎国。来了两个人，已知一个是诚实国的，另一个是说谎国的。诚实国永远说实话，说谎国永远说谎话。现在你要去说谎国，但不知道应该走哪条路，需要问这两个人。请问应该怎么问？【75】在一天的24小时之中，时钟的时针、分针和秒针完全重合在一起的时候有几次？都分别是什么时间？你怎样算出来的？]]></content>
      <categories>
        <category>think</category>
      </categories>
      <tags>
        <tag>think</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[停止过度思考，开始付诸行动]]></title>
    <url>%2Fposts%2F62791%2F</url>
    <content type="text"><![CDATA[6个方法，让你停止过度思考，开始付诸行动每个人或多或少的都会遇到过度思考的情况，这很正常。但是，有些人却深受过度思考的困扰：他们整天重复回想昨天的对话，反复思考做出的每个决定，并设想相应的影响和结果。过度思考所涉及的往往不止是一些只言片语，还会浮现图像。他们的思想就像一部电影，他们想象汽车冲出路面，或者他们反复重放一些痛苦或尴尬的事件。过度思考阻止他们去完成任何事情，并且严重影响他们的情绪。破坏性的思维模式过度思考往往涉及2个破坏性的思维模式——反思和持续的担忧。反思总是停留在过去，这样的想法包括：我昨天不应该在会议上说那些事情。大家一定会认为我是个蠢货。我应该待在我的上一份工作中，那样的话我现在一定会更快乐。我的父母并没有教会我如何变得自信，我总是被不安全感包围着。持续的担忧包括对未来的消极预测，这样的想法包括：我一定会弄砸明天的演讲，我知道我一定会把我要说的内容全都忘了。别人会比我先得到晋升。我知道我永远不会攒够退休的钱，总有一天我会病得无法工作，同时也没有积蓄了。如何摆脱过度思考就像改变习惯一样，改变你固有的破坏性思维模式确实是一个挑战。但是通过一定的训练，你可以使你的大脑用不同的方式进行思考。下面有6种方法，可以帮助你停止过度思考： 1.意识到你在过度思考过度思考可能已经成为了一种习惯，甚至在你不知不觉的时候，你已经在这样做了。开始关注你的思维，当大脑又开始过度思考时，你会及时发现。当你在头脑中不断的重演某件事情时，或者不停的担心你不能控制的事情时，告诉你自己，这样的想法不会产生任何用处。思考只有在它有利于积极行动是才真正有用。 2.关注于问题的解决停留在问题本身没有任何帮助，你需要的是寻找解决方案。如果事情在能控制的范围之内，考虑如何避免问题或者问自己能否想出5个可行的解决方案。如果事情本身你根本无法控制，比如自然灾害，想想你要如何合理的接受它，以及在发生之后应对它。关注与你能够控制的部分，比如你的态度和你的努力。 3.质疑你的想法我们的大脑很容易被消极的想法所占据。在你认为请病假会导致你被开除之前，在你觉得忘记了某个最后期限会让你变得无家可归之前，认识到你的想法可能是被过度夸张的。记住，你的情绪会影响你观察客观情况的能力。在假想灾难性后果之前，不妨退一步，想想看造成这些后果的证据是否充分。你有哪些证据证明你的想法是正确的？你又有哪些证据能够证明你的想法不是正确的？ 4.为反思设定时间花费漫长的时间去思考一个问题不会有什么成效，但是短暂的反思是有帮助的。思考如何以不同的方式解决问题，或者识别计划中的潜在缺陷，可以帮助你在未来表现的更好。将20分钟的“思考时间”纳入你的时间表。在那段时间里让自己担忧、沉思或者思考任何你想思考的东西。当你的“思考时间”用完之后，将注意力转移到别的东西上。当你的思想像脱缰的野马开始不由自主的与目前工作无关的事情时，你只需要提醒自己，你需要等到“思考时间”来解决这些在你头脑中的问题。 5.学会保持正念技巧当你全身心的活在当下的时候是不可能去回顾昨天或者担心明天的。正念会帮助你更加专注于此时此刻。就像其他的技巧一项，保持正念也需要练习，但是随着时间的推移，它可以有效的减少过度思考。有很多的书籍、软件、课程和视频可以帮助你学会正念的技巧。 6.换个频道不停的告诉自己停止思考一些事情有可能会适得其反。你越是努力的试图阻止一个想法进入你的大脑，它越有可能不断的在你的大脑中出现，就像是：“不要想那只粉色大象。”你可以通过改变你的行动来改变你大脑所在的频道。进行锻炼，参与完全不同问题或者的讨论，着手解决你工作上的难题。做一些不同的事情，这将会终结消极的想法。 训练你的大脑关注你的思维方式，可以帮助你更容易的意识到自己不良的心理习惯。通过练习，你可以训练你的大脑用不同的方式思考。随着时间推移，构建健康的习惯将帮助建立你所需要的精神力量，让你成为拥有精神力量的强者。]]></content>
      <categories>
        <category>thought</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript 从浏览器url获取参数]]></title>
    <url>%2Fposts%2F13348%2F</url>
    <content type="text"><![CDATA[function getParamFromUrl (name) { name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]"); var regexS = "[\\?&amp;]" + name + "=([^&amp;#]*)"; var regex = new RegExp(regexS); var results = regex.exec(window.location.href); if (results == null) { return ""; } else { return results[1]; } }]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器端Session和客户端Session]]></title>
    <url>%2Fposts%2F24523%2F</url>
    <content type="text"><![CDATA[Session其实分为客户端Session和服务器端Session。当用户首次与Web服务器建立连接的时候，服务器会给用户分发一个 SessionID作为标识。SessionID是一个由24个字符组成的随机字符串。用户每次提交页面，浏览器都会把这个SessionID包含在 HTTP头中提交给Web服务器，这样Web服务器就能区分当前请求页面的是哪一个客户端。这个SessionID就是保存在客户端的，属于客户端Session。其实客户端Session默认是以cookie的形式来存储的，所以当用户禁用了cookie的话，服务器端就得不到SessionID。这时我们可以使用url的方式来存储客户端Session。也就是将SessionID直接写在了url中，当然这种方法不常用。 sessionid如何产生？由谁产生？保存在哪里？sessionid是一个会话的key，浏览器第一次访问服务器会在服务器端生成一个session，有一个sessionid和它对应。tomcat生成的sessionid叫做jsessionid。session在访问tomcat服务器HttpServletRequest的getSession(true)的时候创建，tomcat的ManagerBase类提供创建sessionid的方法：随机数+时间+jvmid；它存储在服务器的内存中，tomcat的StandardManager类将session存储在内存中，也可以持久化到file，数据库，memcache，Redis等。客户端只保存sessionid到cookie中，而不会保存session，session销毁只能通过invalidate或超时，关掉浏览器并不会关闭session。 session会因为浏览器的关闭而删除吗？Cookie分为内存中Cookie（也可以说是进程中Cookie）和硬盘中Cookie。大部分的Session机制都使用进程中Cookie来保存Sessionid的，关闭浏览器后这个进程也就自动消失了，进程中的Cookie自然就消失了，那么Session id也跟着消失了，再次连接到服务器时也就无法找到原来的Session了。当然，我们可以在登陆时点击下次自动登录，比如说CSDN的“记住我一周”，或者我们的购物车信息可以在切换不同浏览器时依然可用。这就要用到我们上文提到的另一种Cookie了——硬盘中Cookie，这时Session id将长期保存在硬盘上的Cookie中，直到失效为止。 tomcat中session的创建：ManagerBase是所有session管理工具类的基类，它是一个抽象类，所有具体实现session管理功能的类都要继承这个类，该类有一个受保护的方法，该方法就是创建sessionId值的方法：（tomcat的session的id值生成的机制是一个随机数加时间加上jvm的id值，jvm的id值会根据服务器的硬件信息计算得来，因此不同jvm的id值都是唯一的）， StandardManager类是tomcat容器里默认的session管理实现类，它会将session的信息存储到web容器所在服务器的内存里。PersistentManagerBase也是继承ManagerBase类，它是所有持久化存储session信息的基类，PersistentManager继承了PersistentManagerBase，但是这个类只是多了一个静态变量和一个getName方法，目前看来意义不大，对于持久化存储session，tomcat还提供了StoreBase的抽象类，它是所有持久化存储session的基类，另外tomcat还给出了文件存储FileStore和数据存储JDBCStore两个实现。 session是解决http协议无状态问题的服务端解决方案，它能让客户端和服务端一系列交互动作变成一个完整的事务，能使网站变成一个真正意义上的软件 扩展： 会话cookie和持久cookie的区别如果不设置过期时间，则表示这个cookie生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。这种生命期为浏览会话期的cookie被称为会话cookie。会话cookie一般不保存在硬盘上而是保存在内存里。如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存的cookie，不同的浏览器有不同的处理方式。 保存session id的几种方式A．保存session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。B．由于cookie可以被人为的禁止，必须有其它的机制以便在cookie被禁止时仍然能够把session id传递回服务器，经常采用的一种技术叫做URL重写，就是把session id附加在URL路径的后面，附加的方式也有两种，一种是作为URL路径的附加信息，另一种是作为查询字符串附加在URL后面。网络在整个交互过程中始终保持状态，就必须在每个客户端可能请求的路径后面都包含这个session id。C．另一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。 session什么时候被创建一个常见的错误是以为session在有客户端访问时就被创建，然而事实是直到某server端程序(如Servlet)调用HttpServletRequest.getSession(true)这样的语句时才会被创建。 session何时被删除session在下列情况下被删除：A．程序调用HttpSession.invalidate()B．距离上一次收到客户端发送的session id时间间隔超过了session的最大有效时间C．服务器进程被停止再次注意关闭浏览器只会使存储在客户端浏览器内存中的session cookie失效，不会使服务器端的session对象失效。 getSession()/getSession(true)、getSession(false)的区别getSession()/getSession(true)：当session存在时返回该session，否则新建一个session并返回该对象getSession(false)：当session存在时返回该session，否则不会新建session，返回null 使用isNew来判断用户是否为新旧用户的错误做法public boolean isNew()方法如果会话尚未和客户程序(浏览器)发生任何联系，则这个方法返回true，这一般是因为会话是新建的，不是由输入的客户请求所引起的。但如果isNew返回false，只不过是说明他之前曾经访问该Web应用，并不代表他们曾访问过我们的servlet或JSP页面。因为session是与用户相关的，在用户之前访问的每一个页面都有可能创建了会话。因此isNew为false只能说用户之前访问过该Web应用，session可以是当前页面创建，也可能是由用户之前访问过的页面创建的。正确的做法是判断某个session中是否存在某个特定的key且其value是否正确 session cookie和session对象的生命周期是一样的吗当用户关闭了浏览器虽然session cookie已经消失，但session对象仍然保存在服务器端 是否只要关闭浏览器，session就消失了程序一般都是在用户做log off的时候发个指令去删除session，然而浏览器从来不会主动在关闭之前通知服务器它将要被关闭，因此服务器根本不会有机会知道浏览器已经关闭。服务器会一直保留这个会话对象直到它处于非活动状态超过设定的间隔为止。之所以会有这种错误的认识，是因为大部分session机制都使用会话cookie来保存session id，而关闭浏览器后这个session id就消失了，再次连接到服务器时也就无法找到原来的session。如果服务器设置的cookie被保存到硬盘上，或者使用某种手段改写浏览器发出的HTTP请求报头，把原来的session id发送到服务器，则再次打开浏览器仍然能够找到原来的session。恰恰是由于关闭浏览器不会导致session被删除，迫使服务器为session设置了一个失效时间，当距离客户上一次使用session的时间超过了这个失效时间时，服务器就可以认为客户端已经停止了活动，才会把session删除以节省存储空间。 由此我们可以得出如下结论： 关闭浏览器，只会是浏览器端内存里的session cookie消失，但不会使保存在服务器端的session对象消失，同样也不会使已经保存到硬盘上的持久化cookie消失。 session共享问题当下的互联网网站为了提高网站安全性和并发量，服务端的部署的服务器的数量往往是大于或等于两台，多台服务器对外提供的服务是等价的，但是不同的服务器上面肯定会有不同的web容器，由上面的讲述我们知道session的实现机制都是web容器里内部机制，这就导致一个web容器里所生成的session的id值是不同的，因此当一个请求到了A服务器，浏览器得到响应后，客户端存下的是A服务器上所生成的session的id，当在另一个请求分发到了B服务器，B服务器上的web容器是不能识别这个session的id值，更不会有这个sessionID所对应记录下来的信息，这个时候就需要两个不同web容器之间进行session的同步。一般大型互联公司的网站都是有一个个独立的频道所组成的，例如我们常用的百度，会有百度搜索，百度音乐，百度百科等等，我相信他们不会把这些不同频道都给一个开发团队完成，应该每个频道都是一个独立开发团队，因为每个频道的应用的都是独立的web应用，那么就存在一个跨站点的session同步的问题，跨站点的登录可以使用单点登录的（SSO）的解决方案，但是不管什么解决方案，跨站点的session共享任然是逃避不了的问题。 解决session相关问题的技术方案由上所述，session一共有两个问题需要解决：1) session的存储应该独立于web容器，也要独立于部署web容器的服务器；2）如何进行高效的session同步。 在讲到解决这些问题之前，我们首先要考虑下session如何存储才是高效，是存在内存、文件还是数据库了？文件和数据库的存储方式都是将session的数据固化到硬盘上，操作硬盘的方式就是IO，IO操作的效率是远远低于操作内存的数据，因此文件和数据库存储方式是不可取的，所以将session数据存储到内存是最佳的选择。因此最好的解决方案就是使用分布式缓存技术，例如：memcached和redis，将session信息的存储独立出来也是解决session同步问题的方法。 ps：来源于网络]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[夜空中最亮的星]]></title>
    <url>%2Fposts%2F22781%2F</url>
    <content type="text"><![CDATA[var ap = new APlayer({ element: document.getElementById("aplayer-qpWvTfXq"), narrow: false, autoplay: false, showlrc: false, music: { title: "夜空中最亮的星", author: "逃跑计划", url: "http://phhpvehb1.bkt.clouddn.com/nightstart.mp3", pic: "", lrc: "" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap);]]></content>
      <categories>
        <category>music</category>
      </categories>
      <tags>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot热部署：spring-boot-devtools]]></title>
    <url>%2Fposts%2F3667%2F</url>
    <content type="text"><![CDATA[spring-boot-devtools 是一个为开发者服务的一个模块，其中最重要的功能就是热部署。当我们修改了classpath下的文件（包括类文件、属性文件、页面等）时，会重新启动应用（由于其采用的双类加载器机制，这个启动会非常快，另外也可以选择使用jrebel）。spring-boot-devtools使用了两个类加载器来实现重启（restart）机制： base类加载器（base ClassLoader）, restart类加载器（restart ClassLoader）。 base ClassLoader：用于加载不会改变的jar（eg.第三方依赖的jar）restart ClassLoader：用于加载我们正在开发的jar（eg.整个项目里我们自己编写的类）。当应用重启后，原先的restart ClassLoader被丢掉、重新new一个restart ClassLoader来加载这些修改过的东西，而base ClassLoader却不需要动一下。这就是devtools重启速度快的原因。使用devtools ,只需要添加其依赖即可 : Maven&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt;&lt;/dependencies&gt; devtools的功能在命令行运行jar包 java -jar XXX.jar或者，当应用运行在指定的 classloader的时候, 自动失效（考虑到，或许是在生产环境）。 DevTools通过检测classpath的资源文件 resources的变动来触发应用的重启。这个跟我们在 IntelliJ IDEA中, 使用Build -&gt; Make Project，重新构建工程的效果是一样的。 默认情况下，/META-INF/maven，/META-INF/resources，/resources，/static，/templates，/public 这些文件夹下的文件修改不会使应用重启，但是会重新加载（devtools内嵌了一个LiveReload server，当资源发生改变时，浏览器刷新）。 如果想改变默认的设置，可以自己设置不重启的目录：spring.devtools.restart.exclude=static/**,public/** 这样的话，就只有这两个目录下的文件修改不会导致restart操作了。如果要在保留默认设置的基础上还要添加其他的排除目录：spring.devtools.restart.additional-exclude 如果想要使得当非classpath下的文件发生变化时应用得以重启，使用：spring.devtools.restart.additional-paths 这样devtools就会将该目录列入了监听范围。 在application.properties文件中，关于DevTools的键值如下：# ----------------------------------------# DEVTOOLS PROPERTIES# ----------------------------------------# DEVTOOLS (DevToolsProperties)spring.devtools.livereload.enabled=true # Enable a livereload.com compatible server.spring.devtools.livereload.port=35729 # Server port.spring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.spring.devtools.restart.additional-paths= # Additional paths to watch for changes.spring.devtools.restart.enabled=true # Enable automatic restart.spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties # Patterns that should be excluded from triggering a full restart.spring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait between polling for classpath changes.spring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.spring.devtools.restart.trigger-file= # Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.# REMOTE DEVTOOLS (RemoteDevToolsProperties)spring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.spring.devtools.remote.debug.enabled=true # Enable remote debug support.spring.devtools.remote.debug.local-port=8000 # Local remote debug server port.spring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.spring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.spring.devtools.remote.restart.enabled=true # Enable remote restart.spring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).spring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret. 另外，使用Intellij的可能会遇到这个问题，即使项目使用了spring-boot-devtools，修改了类或者html、js等，idea还是不会自动重启，非要手动去make一下或者重启，就更没有使用热部署一样。出现这种情况，并不是你的配置问题，其根本原因是因为Intellij IEDA和Eclipse不同，Eclipse设置了自动编译之后，修改类它会自动编译，而IDEA在非RUN或DEBUG情况下才会自动编译（前提是你已经设置了Auto-Compile）。]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js操作cookie]]></title>
    <url>%2Fposts%2F61964%2F</url>
    <content type="text"><![CDATA[使用js处理cookievar cookie_operation = (function()&#123; var get = function(name)&#123; var arr,reg=new RegExp("(^| )"+name+"=([^;]*)(;|$)"); if(arr=document.cookie.match(reg))&#123; return unescape(arr[2]); &#125; else &#123; return null; &#125; &#125;; var del = function(name) &#123; var exp = new Date(); exp.setTime(exp.getTime() - 1); var cval=getCookie(name); if(cval!=null) &#123; document.cookie= name + "="+cval+";expires="+exp.toGMTString(); &#125; &#125;; var set = function(name,value) &#123; var Days = 30; var exp = new Date(); exp.setTime(exp.getTime() + Days*24*60*60*1000); document.cookie = name + "="+ escape (value) + ";expires=" + exp.toGMTString(); &#125; return &#123; set : set, get : get, del : del &#125;&#125;)();]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[失格]]></title>
    <url>%2Fposts%2F38616%2F</url>
    <content type="text"><![CDATA[我今天要跟大家讲的其实就是人间社会的失格，是人种的退化，或者是我们以前常常讲的东亚病夫的状态，是我们在人生社会中生活着,如何变成了大同小异的闰土。 那我就直截了当地跟大家一起讲一讲，我们生活中被耽误的岁月。你比如说按今天下午的安排，我应该在下午三点多开讲，现在已经五点多了，耽误了两个小时。而且我这么跟大家讲是更有发言权，因为我自己都觉得我这一辈子，活到人到中年，我自己感觉已经耽误了五年六年，在座的诸位有很多是我的朋友，大家都是年轻人，你们的人生可能还在开始，还没有像我有这么痛切的感受，所以我觉得我有义务跟大家来分享这种被耽误的状况。 我们每个人都在走自己的人生旅途，但有时候走着走着，你就会发现，我们自己掉队了，落伍了。或者是因为贪看沿路的风景，忘记了走路。或者有时候因为迷路了，误入了歧途。我们有时候感觉自己像做了一场大梦一样，梦醒之后，我们发现自己最好的人生岁月已经被耽误掉了。 就在三十年前，也就是70年代末80年代初，当时的中国人都在控诉、揭露文革，都在伤感自己的人生被文革耽误了十年。所以当时流行的是伤痕文学和寻根文学，就是从文学的角度来控诉中国人的人生被耽误了。所以当时的政治家也顺应民意，全面的否定文革，开启了改革开放的新时代。而且很快，我们整个社会各个阶层都感受到了社会快速发展的活力。流行歌曲甚至称赞年轻人赶上了好时候，那个时候像我们这样的年轻人被称为“80年代的新一辈”。不知道诸位听过当时那首流行歌曲没有，那个可是我们那个年代的主旋律，当时以为那种歌曲就唱出了我们心目中的梦想，或者说也唱出了我们对音乐的一种极致的理解。它是这么唱的，可惜我不会唱歌，不然就唱给大家听了，它大概意思就是：再过二十年，大家来相会，光荣属于80年代的新一辈。 但是到了今天，你们可能其实也知道，像我这一代人，其实都在检讨人生的理想成了梦幻泡影，当年唱得那么激动人心的歌，现在想想是非常傻非常天真的，包括那种旋律，现在想想都是很傻很天真的。而且我们这一代人，都是人到中年，上有老，下有小，几乎都是心力交瘁，疲于奔命，很难得有自在的生活。 不仅仅是我们，就是今天的你们，特别是我这两年回北京之后，遇到不少年轻人，80后、90后，刚走上社会的年轻人，也都在说自己的生活被耽误掉了。他们说他们把自己抵押给了银行，抵押给了老板，不得不为巨大的生存压力疲于奔命。所以我看到更多的年轻人都在不可知的时代命运面前让步，或者说投降的时候，确实觉得挺难过的。而且更为荒唐的是，很多人生活在这种所谓的时代氛围里面，他还为这种生活辩护，认为这才是，或者这就是，人生社会的常态。其实我们换一个角度，我们把自己的生命抵押出去了，我们听任超经济强制地压榨自己和剥削自己，我们在过一种没有人格、没有尊严的生活，这其实就是人生被耽误掉了，而且已经导致了我们几代人的，可以说是，心智的蒙昧，重新蒙昧，心智的退化。 所以观察我们社会的方方面面，可以说，人生被耽误的情形是非常多的。这种耽误的后果很少有人想过。其实我有时候作为生活的旁观者，我每次看到那么多的现象，真是很难受很难受，看我这个白发，很多人说我忧心过多，就像梁启超引用庄子的话：吾朝受命而夕饮冰，我其内热与？就是心里面有太多热烈的东西，完全无法释放。 但是我看到周围的朋友，包括年轻的朋友，人生被耽误，我觉得有个非常重要的，就是在身心发育方面，在社会人格的权利义务方面，几乎是全面滞后，或者说全面退化。换一个词，人生一旦被耽误了，不仅仅是你赶不上趟了，而且是心智蒙昧、人种退化。我们经常说，人生如逆水行舟，不进则退。但我们因为拜金主义、因为功利、因为受外界的不良影响而停止了人生的精进之路，那我们可以说自己就是没有进步，只有退化。 我也可以举一个例子。这个例子我前几天的微博也跟大家披露过。我有一个朋友，他的儿子在中学的时候成绩很好，但是他特别讨厌政治课，后来发展到一听说要考政治就有一种生理和心理上的反感。他这样的人就很难通过高考，很难上中国的大学。好在他的父母比较开明，比较通融，所以就让他自己做主，这样的话他的同学都在备战高考，他自己就无所事事，在网上东看西看，后来看到奥地利的一所大学招考，他就试着申请，考试通过了，这样去奥地利读书。读了一年，他回来之后，他就跟他的同学交流，那些同学都上了国内一流的大学，或二类大学，他就发现，那些同学跟他相比，还是小孩，还是中学生，而他已经是大学生了，他自己觉得自己独立自主了，自己对很多问题都可以有自己的主见，有自己的主意，他那些同学也愿意听他的，也愿意听他的意见。后来发生的更有意思，大家都毕业了，他的同学拼命的挤在、留在北上广这些地方打工，而他在父母的支持下，跑到江西的农村，去跟茶农合作，买农民的茶园，自己做了茶农。一两年之后，他不仅成了茶叶领域的行家，也成了一个小老板。 所以我就经常在想，这两种生活道路，它带来了两种完全不同的人生。我们可以说，无论是学校教育、家庭教育还是社会教育，它其实都在深刻影响我们的人生，只不过很多人都想当然地接受了所谓现实的合理性，以为自己大学一毕业，就成人才了，他没有想到，自己跟另一种教育制度下的人生的差别。当然，他更没有想到，社会同样还在影响他，甚至在欺骗他、愚弄他，最后，他就会发现自己跟自己的理想渐行渐远。他的人生被耽误了。他的心智其实也是退化了。 社科院的学者资中筠曾经说过，在中国现在的问题当中，她认为最严峻的问题是教育。资中筠先生已经80多岁的高龄了，她原来是（社科院）美国（研究）所的所长，她的丈夫是陈乐民先生，也是个大学者。资中筠先生就说过，她说，中国现在的教育，从幼儿园开始，传授的就是一种极端扼杀人的创造性、想象力的功利主义。中国现在的教育现状如果再不改变，中国的人种都会退化，资中筠说：“这个过程，就像退化土豆一样。” 然后我的老师，北京大学的钱理群（教授），他前不久也说过这样的话，他说，我们的大学，包括北京大学在内，正在培养一大批“精致的利己主义者”，这些人高智商，世俗，老道，善于表演，懂得配合，尤其善于利用体制来达到自己的目的。这种人一旦掌握权力，钱理群说，比一般的贪官污吏的危害更大。但是很可惜，我们的教育体制，正在大批地培养这样的“有毒的罂粟花”。 假如我们把资中筠先生、钱理群先生谈论的话题放大的话，延伸到我们的家庭教育和社会教育当中，可以说，他们的结论同样是成立的。当然从表面上看，学校教育的危害，学校教育的失误是一目了然的，像我们前面说的，我那个同学的孩子和他的中学同学，他们相互之间的差距，几乎可以说彼此都是心知肚明的。我们大家也知道这个道理，也知道这个事实，所以我们这个社会里稍有条件的家庭，都在想办法把自己的孩子送到国外去读书、受教育。 但是，家庭教育和社会教育的危害，或者它的失误，不是那么明显，一时看不出来。所以当大家走上社会的时候，我们可能又在受蒙骗，又在受蒙蔽，特别是很多人走上社会，他会想当然地以为一切都是自己做主，无论成功还是失败，都是自己挣来的。又有一句话，自己混得不好，也是咎由自取。这个观念，其实在文明社会是一个错误的观念。因为他不明白，他对社会有责任，更重要的，这个社会首先要对他有责任。这个社会对他应尽的最为基本的责任是什么？是免于匮乏、免于恐惧。他失业了、他饥寒交迫了，这个社会是有责任的。 我记得汶川地震的时候有一个细节，有一个小孩，她被军人救出来了，那个解放军叔叔递给这个小孩一瓶矿泉水，这个小孩开口说的第一句话是，叔叔，多少钱？我当时看到这个报道，特别难过、辛酸，因为你们可能都知道，在发达国家，在这样的灾难面前，难民和国民最常问的，就是责问政府和救援者，你们为什么来得这么晚？也可以说，我们现在国民的心智和现代公民的心智之间是不可同日而语的。 所以说因为我们这个社会，它在欺骗人，它在失格，它培养了很多很傻很天真的国民，同时也培养了前面钱理群教授说的很精很自私的国民。特别是后一种，他们现在是认为只要自己活好了，就对社会有贡献了，而且据说这叫消极自由，但是这些人忘了，在目前这样一个国家，甚至在现代社会这样一个人际关系、阶层关系依存度非常高的社会里生活，一个人的生活肯定与他人相关，一个人的生活质量是与周围发生关系的。我们不能把消极自由跟自私划等号，这是不成立的，这种自私的人生，可以说，你们也学过诗人臧克家的有一首诗，叫“有的人”，“有的人活着，他已经死了” 可以说，我们今天社会上有太多这样精致自私的国民，但是好在无论他们多么成功，在我们这些人眼里，在网络，目前看中国最有效的舆论监督里，这些人是缺德的，他们是专横的，是丧失人生正义和社会正义的，而且他们是没有品格和人格的。当然我们总体上看，今天的社会，既有我们穷苦人的失格，也有所谓精明自私人的失格，这种人我们可以说他们是暴发户。但是无论哪一种失格，都带来，我觉得是心智的蒙昧，人种的退化，人生社会（的演进）都被耽误了。 所以我今天想跟大家探讨的，其实就是这种人生社会的失格。国有国格，人有人格，如果一个社会失格了，一个国家失格了，我们人都失格了，那么我们的言论，我们的行为，就会经常出格，也就是失格了。所以我们经常看到网络上，大家总结最雷人的语言，因为它出格所以把人雷倒了，中国和中国人，在目前的文明世界，为什么这么容易雷人，因为大家都是失格的。我们也因此说，我们的大陆中国目前遭受了生态环境、心态环境、还有世态环境的空前的污染，其实更准确地说，是生态、心态、世态退化掉了，完全退化掉了，刚才诸位也都看到文大川给我们展示的中国的山川，它其实已经在退化。 大家也知道，我们中国在改革开放三十年来已经发生了很多很大的变化，其中一个变化就是，我们很多人都觉得中国跟西方平起平坐了，中国人跟西方人也平起平坐了。这在80年代不是这么想的，80年代我们觉得一切都应该认真地向西方学习，当时甚至有人讽刺说我们中国人崇洋媚外到以为外国的月亮都比中国的圆。 但是到现在，我们就没有这么想了，我们以为自己站起来了，以为自己可以说不，可以拉下脸来不高兴了。而且我们甚至在嘲笑西方发达国家，我们认为它们有政治的、经济的、社会的危机，它们危机不断。我们有腐败，你们也有腐败；我们有通账通缩的压力，你们也有经济危机；我们有人欲横流，你们也有沉沦堕落。 而且我自己都听过不少人，所谓的成功人士跟我在讲，说，哎呀，发达了又有什么用啊，发达国家跟我们中国遭受的问题都是一样的。所以我就经常在想，抱着这种逻辑、这种心智来生活，他肯定是跟现实同流合污，肯定是一种堕落，他们不知道，他们跟文明人之间的差距。但是他们有一种本能，他们比我们更有本能的是什么呢？他们要把孩子送出国，他们自己要想办法去移民。 大家也都知道鲁迅笔下的闰土，这也是我今天的一个关键词之一。一个小时候一起玩的伙伴，后来分道扬镳，形同陌路，成了两个阶层的人，更重要的，成了两种不同生命质量的人，一个是麻木的、愚昧的，一个是生活在现代，呼吸着现代的空气。 我有时候想，其实我们今天的中国人，从本质上来讲，大家都是闰土。一种是麻木的、愚昧的闰土，一种是精明自私的、愚蠢的闰土。所以，我经常想，我们不应该在小康生活、物质生活中陶醉，我们要去了解我们和文明人之间的差距。我们不能让自己活成了闰土，因为很悲惨的是什么，闰土永远不知道自己只是活成了闰土。比如说，那种精明自私的闰土，他不知道自己的位格，不知道自己的义务，也不知道自己在他人心中的形象；还有一种是麻木的闰土，他不知道自己的权利，不知道自己的尊严。 有年轻人也曾经问过我，说他未来五到十年要把理想放在一边去打拼，该怎么办？其实我有时候也很无奈，因为我觉得我自己已经被这个社会耽误了，我无法给年轻的朋友提供一个唯一的解决之道。所以我也只能说，我们知道自己的人生被耽误就好了，在大家不得不为稻粱谋的时候，应该保护好自己的精神、自己的心智不要被外界污染，不要被它们破坏掉。 今天大家来跟我分享（我）这点心得，我也是希望说，大家在这个被耽误的人生岁月里真正的有所收获，就是说，这个环境是很糟糕，但是自己要知道。而且从我现在对中国社会的判断来讲，我是希望我们不要去作恶，用我们中国人的话说，我们活着不要去造业，不要去作孽。 还有一点很重要，在这种很苦难的岁月，在这种，用网络语言说，很悲催的生活当中，我们不要怨天尤人，而且也不要吝惜我们这种正面的情绪，明亮的东西，要回归明亮的东西。借用英国的作家、政治家丘吉尔的话说，在严峻的岁月里，我们也不要吝惜赞美。这个话我觉得很好，就是凡事我们知道就好，我们的人生被耽误了，心智可能比别人要落后了很多年。可能有时候是赶不上趟的，特别是对我们人生来讲，是赶不上趟的，但我们要努力去守住我们自己的那点东西，守住我们的良知，我们的尊严，我们的权利，而且要去礼赞，要去赞美那些，用我的话是，自由和文明的、善和正义的事物。 我曾经看过很多知青的回忆文字，也看过很多80年代的伤痕文学，我就觉得那几代人可以说是白活了，他们让我非常理解俄国作家陀思妥耶夫斯的一句话，我唯一担心一件事，我是否配得上我所经受的苦难。很可惜，很多中国人，他经受了苦难，但是这个受苦是白白受苦，（受难是）白白受难。 我最后跟诸位分享马克思的女儿燕妮的一个故事。马克思的大女儿燕妮曾经问一个历史学家维特克，你们可能有人已经知道这个故事，她说，“你能用最简明的语言，把人的历史浓缩在一本小册子里吗？”维特克说：“不必，只要四句德国谚语就够了：1、上帝让谁灭亡，总是先让他膨胀；2、时间是筛子，最终会淘去一切沉渣；3、蜜蜂盗花，结果却使花开茂盛；4、暗透了，更能看得见星光。”]]></content>
      <categories>
        <category>inspire</category>
      </categories>
      <tags>
        <tag>inspire</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时间就像金钱一样，你得学会投资时间]]></title>
    <url>%2Fposts%2F6768%2F</url>
    <content type="text"><![CDATA[&emsp;其实，时间就像金钱一样，你得学会投资时间。把时间投资在有价值有意义的地方，你就会有更多的时间。&emsp;每个人都有同样多的时间，而有的人能够把时间用好，有的人则没有把时间用好。日积月累，人和人的差距就越来越大。而看似忙碌的我们似乎在这一年中也没有做太多事，尤其是让自己成长的事情。工作强度很大的情况下，更要找到时间来学习和提升自己，除了依靠短期的热情外，有没有什么好方法呢？对此，左耳朵耗子在极客时间专栏中分享了自己的这些心得和方法，希望对你有帮助。 &emsp;其实，时间就像金钱一样，你得学会投资时间。把时间投资在有价值有意义的地方，你就会有更多的时间。花时间学习基础知识，花时间读文档。 在参加工作的这近 20 年来，我发现，很多程序员把时间都浪费在了查错上。究其根本原因就是基础知识不完整，没有好好地把技术相关的用户文档读完整就仓促上手做事。其实只要把基础打扎实，认真读一下文档，你会省出很多很多的时间。系统地学习一门技术是非常关键的，所以这个时间是值得投资的。花时间在解放自己生产力的事上。 在自动化、可配置、可重用、可扩展上要多花时间。对于软件开发来说，能自动化的事，就算多花点时间也要自动化，因为下次就不用花时间了。让自己的软件模块可以更灵活地配置和扩展，这样如果有需求变更或是有新需求的时候，可以不用改代码，就算要改代码也很容易。花时间在解放自己的事上是最有意义的了。花时间在让自己成长的事上。 注意，晋升并不代表成长，成长不应该只看在一个公司内，而是要看在行业内，在行业内的成长才是真正的成长。所以，把时间花在能让自己成长，能让自己有更强的竞争力，能让自己有更大的视野，能让自己有更多可能性的事情上。这样的时间投资才是有价值的。花时间在建立高效的环境上。 &emsp;我相信你和我会有一样的一个习惯，那就“工欲善其事，必先利其器”。我们程序员在做事之前都喜欢把自己的工作环境整理到自己喜欢的状态下。比如使用趁手的开发工具，使用趁手的设备。花些时间在影响你身边的人上。 比如你的同事，你的产品经理，你的老板，去影响他们，让他们理解你，让他们配合你来建立更好的流程和管理方法。在这个方向上花时间也是很值得的。总之，你要学会规划自己的行动计划，不是短期的，而是一个中长期的。可以按季度来规划，这个季度做什么，达到什么目标，而不是只考虑眼下。技术人应该关注长期利益规划。要多关注长远可以节省多少时间，而不是当前会花费多少时间。长期成本会比短期成本大得多。宁可在短期延期，也不要透支未来。]]></content>
      <categories>
        <category>me</category>
      </categories>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路漫漫其修远兮 吾将上下而求索]]></title>
    <url>%2Fposts%2F50448%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;写点什么呢？总想写点什么又无从下手！窗外黑云压城，暗无天日，狂风暴雨即将袭来！每次看到这副景象，内心泛起阵阵涟漪。&nbsp;&nbsp;&nbsp;&nbsp;这一周没干活，基本没干活，确切的说，前两天完成小任务，直到现在，我在埋头自己的东西。看教程，搞自己的博客，折腾折腾，危机感满满。&nbsp;&nbsp;&nbsp;&nbsp;我时不时提醒自己，还能待多久？&nbsp;&nbsp;&nbsp;&nbsp;这样的生活是不是我想要的，又或者它是一个必须的过程？&nbsp;&nbsp;&nbsp;&nbsp;思绪慢慢回到过去，且让它飘得远一些。&nbsp;&nbsp;&nbsp;&nbsp;我怎么就踏上了这一条路，跟数据打上交道了。当年报考志愿的时候，纯粹是因为根本不了解专业，平时又喜欢看电脑报、关注手机之类的电子产品。故报此专业，无他雄心壮志。以至于入学的时候，一个志愿者学长问到为什么报了这个专业，我说乱报，他说你们这些高考生就知道考试。（其实在中国大多数考生类似我这样估计不在少数，这是大环境使然）&nbsp;&nbsp;&nbsp;&nbsp;后来的计算机课程确实让我够呛的,从有点懂到完全不懂讲什么鬼。甚至上课除了玩手机不知道干什么。逃课又有点罪恶感，去了教室就假装自己上课了的自我安慰。（其实学没学好跟听不听课程没多大关系）&nbsp;&nbsp;&nbsp;&nbsp;一个老师跟我讲过，作为大学老师身上的压力也是很大的，科研方面，家庭方面，教学方面。可以将精力放在教学上的很少，何况课时少。（这好像多了个听不懂课的理由）&nbsp;&nbsp;&nbsp;&nbsp;时间匆匆，大二暑假期间在老师实验室待过在一段时间，明白一个团队的意义，什么样的群体才适合自己。晚上经常凌晨2点回去，我忘了我做过什么事情，就是一股解决不了又不愿意放弃的傻里傻气的劲，强迫症重症患者。（现在回头想想根本没必要钻牛角尖，解决的方式需要改变。说白了，缺乏的是计算机思维而不是因为知识量的不足。我平时解决问题，不懂查看文档，这些死的“规则”。而面对问题的整个思维过程相当重要）&nbsp;&nbsp;&nbsp;&nbsp;期间在学校科创中心担任网络技术部部长，说白了，让自己有点事做，跟专业相关的。也算是认识了几个优秀的学弟学妹。（嗯！我眼光还是不差的） 看学长留下的网站源码，压根没懂任何关于php,数据库等东西，前端方面也是认识几个标签的前提下，自学看懂了。（心累啊，都是度娘出来的）不过也算是恶补了一下。&nbsp;&nbsp;&nbsp;&nbsp;大三在学校有两个项目实训，一个项目是文件上传下载的项目，jdbc实现增删改查。一个是网上书城，差不多项目。完后进行了为其四个月的培训。（很基础，基本学过，或者完全能在网上整理类似的教程，现在想想，如果清楚学习路线，完全可以自己搞定）&nbsp;&nbsp;&nbsp;&nbsp;接下来培训还没结束就有公司招聘了，好吧，就是现在待的公司。并且录用了。算是比较幸运吧，不用到处奔波投简历。（到现在为止，压根没投过简历，不知道算好还是不好）&nbsp;&nbsp;&nbsp;&nbsp;接下来就是实习，直到毕业。我该庆幸的是一脱离学校，就没有伸手问过家里要钱。毕业后直接转正。没有什么大坎坷。&nbsp;&nbsp;&nbsp;&nbsp;下面是经历过的项目。第一个真实的大坑项目，让我清楚了为什么程序员被调侃为搬砖。我第一次看到十几年前的代码，jsp里写java代码的恶心，而且jstl的滥用。越看越心烦躁。还要继续往里面堆代码，有轻微洁癖症的我看的难受啊。已经是千疮百孔的代码堆里堆代码，而且要处理的是写一堆js堆dom操作，替换值（实现多语言改造）。其中的工作量，花在查找已经定义好key-value是费劲的事情。堆页面的改造过程也算是正在踩进门，直到数据的流向以及对问题的定位。事情搞完就是测试了，测试居然消耗了那么大的工作量，几个月，包括功能测试，静态页面测试。还用兼容不同浏览器，ie8-11,还有三个语言版本。也就是每条测试用例之至少执行12遍。太认真去纠结细节或者了解业务本身，是很痛苦而且根本无法按时完成的。&nbsp;&nbsp;&nbsp;&nbsp;接下来是珠江新城的一个门户项目，刚开始处理jboss集群问题，原本一直使用的社区版jboss中间件，发现集群方案很旧了，而且没有集群的域管理概念。于是下载了比较新版的企业版。这个算比较新的，网上只能找到英文官方文档。对于四级踩线的我来说，呵呵呵哒！吃力地硬着头皮看了点。发现根本无济于事。于是搜索各种博客，csdn等等，大多雷同的方案，可是就是无法解决我的问题。搞了几天，才把驱动加载成功！事情有点棘手，虽然leader没有给什么明确的deadline,可是自己心里焦虑不安（真是强迫症），解决不了就是很不爽，这天时间过去了，什么进展也没有，就觉得没有价值感存在感（自己将自己逼死）好吧，放弃了。用老方式做负载均衡集群（参照着文档操作，也还能达到一定目的）。后续做的单点登陆，就有点坑了，公司的单点登陆的包写法是jdk1.5的语法写的。客户那边使用的OA网站还是jdk1.4的，我直接吐血…我日，还有那么老的东西，jdk10都出来了。不能随便改项目代码（事实上也根本不可能改）毕竟出事谁都承担不起。那就修改包吧，修改的过程才发现了很多语法区别，必读jdk5才有集合泛型、自动拆箱装箱等问题。这玩意看着改，也不知道改的对不对，因为没有测试过程。当改到剩下几个地方的时候，突然通知去深圳协助修改多语言问题。&nbsp;&nbsp;&nbsp;&nbsp;突然觉得小庆幸，不用搞那些繁琐的东西了。接下来就是一个月的出差之旅。刚开始是新鲜感满满的，去了之后，呵呵呵呵哒！面对完全不懂的逻辑，要看代码，问实施人员沟通。基本是整个业务通了，也就能解决一半问题了。但是确实代码不好改。你可能看懂的是部分逻辑，根据经验修改。突然发现改出新的问题（看别人写的代码真是很痛苦的，心里总有一匹草泥马在奔腾）。期间也见证了甲方乙方的各种“博弈”，各种甩锅。更多的是无效的沟通，繁琐的处理流程（可能站在管理者的角度很重要，但是对于开发者来说，简直消耗我们的资源）。大公司的项目质量管控严格的一逼，稍微改动一句代码，刨根问底的追究，出了事情谁负责，你们为什么要改等等（我没经历过，先前的开发人员经历过）。多语言本身引发的问题大多数比较容易解决。难处理的还是原本系统存在的问题（当时测试多语言的时候，上千个问题记录，后来公司被黑客工具，数据被删除了）。原本的问题也有几百个。之间还夹着新的需求。&nbsp;&nbsp;&nbsp;&nbsp;好吧，没等到这个项目上线，被告知要去贵阳中烟出差。怀着几分出省的新鲜感以及逃离深圳项目的快感，去到贵阳中烟。这个项目第一次接触比较新鲜感，代码是从零开始构建的，技术比较主流，freemarker、layui、springMVC、mybaits。简约干净看着就舒服。去了一个月被告知返回公司（原本的同事要过去，床位不够）。期间本来想去黄果树瀑布，青岩古镇玩下，都没去成，基本在贵阳市区逛逛。上班时间896，每天坐着的时间太长了，就算一天什么也不干，光坐着就腰酸背痛。这算是通病吧！程序员的经常性疲劳！虽然说没很大压力，但是总觉得哪里不对。&nbsp;&nbsp;&nbsp;&nbsp;回到广州，几分亲切感。估计是待久了，对广州的感觉比较浓一点，朋友同学多数在这边，周末还可以约上一餐。&nbsp;&nbsp;&nbsp;&nbsp;一路走来，时不时冒出一个想法，又自己将其扑灭了。我是不是应该重新思考软件开发这个工作。如果人只知道漫无目的工作，将毫无意义。【可能是某人眼中中华传统文化男性的价值观】 var password = prompt("请输入密码:"); if(password == "123456"){ document.getElementById("page").style.display="block"; }else{ alert("密码错误"); history.back(); }]]></content>
      <categories>
        <category>me</category>
      </categories>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring方法入参检测工具类]]></title>
    <url>%2Fposts%2F47078%2F</url>
    <content type="text"><![CDATA[方法入参检测工具类 Web 应用在接受表单提交的数据后都需要对其进行合法性检查，如果表单数据不合法，请求将被驳回。类似的，当我们在编写类的方法时，也常常需要对方法入参进行合 法性检查，如果入参不符合要求，方法将通过抛出异常的方式拒绝后续处理。举一个例子：有一个根据文件名获取输入流的方法：InputStream getData(String file)，为了使方法能够成功执行，必须保证 file 入参不能为 null 或空白字符，否则根本无须进行后继的处理。这时方法的编写者通常会在方法体的最前面编写一段对入参进行检测的代码，如下所示：public InputStream getData(String file) &#123; if (file == null || file.length() == 0|| file.replaceAll("\\s", "").length() == 0) &#123; throw new IllegalArgumentException("file入参不是有效的文件地址"); &#125; … &#125; 类似以上检测方法入参的代码是非常常见，但是在每个方法中都使用手工编写检测逻辑的方式并不是一个好主意。阅读 Spring 源码，您会发现 Spring 采用一个 org.springframework.util.Assert 通用类完成这一任务。 Assert 翻译为中文为“断言”，使用过 JUnit 的读者都熟知这个概念，它断定某一个实际的运行值和预期想一样，否则就抛出异常。Spring 对方法入参的检测借用了这个概念，其提供的 Assert 类拥有众多按规则对方法入参进行断言的方法，可以满足大部分方法入参检测的要求。这些断言方法在入参不满足要求时就会抛出 IllegalArgumentException。下面，我们来认识一下 Assert 类中的常用断言方法： 断言方法 说明 notNull(Object object)当 object 不为 null 时抛出异常，notNull(Object object, String message) 方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null； isTrue(boolean expression) / isTrue(boolean expression, String message)当 expression 不为 true 抛出异常； notEmpty(Collection collection) / notEmpty(Collection collection, String message)当集合未包含元素时抛出异常。notEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断； hasLength(String text) / hasLength(String text, String message) 当 text 为 null 或长度为 0 时抛出异常； hasText(String text) / hasText(String text, String message) text 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常； isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message) 如果 obj 不能被正确造型为 clazz 指定的类将抛出异常； isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message) subType 必须可以按类型匹配于 superType，否则将抛出异常； 使用 Assert 断言类可以简化方法入参检测的代码，如 InputStream getData(String file) 在应用 Assert 断言类后，其代码可以简化为以下的形式：public InputStream getData(String file)&#123; Assert.hasText(file,"file入参不是有效的文件地址"); ① 使用 Spring 断言类进行方法入参检测 … &#125; 可见使用 Spring 的 Assert 替代自编码实现的入参检测逻辑后，方法的简洁性得到了不少的提高。Assert 不依赖于 Spring 容器，您可以大胆地在自己的应用中使用这个工具类.]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[进程和线程]]></title>
    <url>%2Fposts%2F4339%2F</url>
    <content type="text"><![CDATA[&emsp;进程（process）和线程（thread）是操作系统的基本概念，但是它们比较抽象，不容易掌握。最近，我读到一篇材料，发现有一个很好的类比，可以把它们解释地清晰易懂。1.计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。 2.假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。 3.进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。 4.一个车间里，可以有很多工人。他们协同完成一个任务。 5.线程就好比车间里的工人。一个进程可以包括多个线程。 6.车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。 7.可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。 8.一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。 9.还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。 10.这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做”信号量”（Semaphore），用来保证多个线程不会互相冲突。不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。 11.操作系统的设计，因此可以归结为三点： （1）以多进程形式，允许多个任务同时运行； （2）以多线程形式，允许单个任务分成不同的部分运行； （3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[愿你三冬暖，愿你春不寒]]></title>
    <url>%2Fposts%2F13321%2F</url>
    <content type="text"><![CDATA[愿你三冬暖，愿你春不寒 愿你三冬暖，愿你春不寒；愿你天黑有灯，下雨有伞。愿你路上有良人相伴，愿你所有快乐无需假装，愿你此生尽兴、赤诚善良。愿时光能缓，愿故人不散；愿有人陪你颠沛流离，愿你惦念的人能和你道早安，愿你独闯的日子里不觉得孤单。愿你人间走一遭，圆满了三界六道，看透了是非善恶；从此福来心至，皆是逍遥。 note danger, note danger, note dangernote danger, note danger, note dangernote danger, note danger, note danger note danger, note danger, note dangernote danger, note danger, note dangernote danger, note danger, note danger note danger, note danger, note dangernote danger, note danger, note dangernote danger, note danger, note danger note danger, note danger, note dangernote danger, note danger, note dangernote danger, note danger, note danger note danger, note danger, note dangernote danger, note danger, note dangernote danger, note danger, note danger note danger, note danger, note dangernote danger, note danger, note dangernote danger, note danger, note danger default primary success info warning danger 点击下载百度 选项卡 1选项卡 2选项卡 3这是选项卡 1 呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……这是选项卡 2这是选项卡 3 哇，你找到我了！φ(≧ω≦*)♪～]]></content>
      <categories>
        <category>me</category>
      </categories>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
</search>
