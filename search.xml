<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring Boot热部署：spring-boot-devtools]]></title>
    <url>%2F2018%2F07%2F25%2Fspring-boot-devtools%2F</url>
    <content type="text"><![CDATA[spring-boot-devtools 是一个为开发者服务的一个模块，其中最重要的功能就是热部署。 当我们修改了classpath下的文件（包括类文件、属性文件、页面等）时，会重新启动应用（由于其采用的双类加载器机制，这个启动会非常快，另外也可以选择使用jrebel）。spring-boot-devtools使用了两个类加载器来实现重启（restart）机制： base类加载器（base ClassLoader）, restart类加载器（restart ClassLoader）。 base ClassLoader：用于加载不会改变的jar（eg.第三方依赖的jar）restart ClassLoader：用于加载我们正在开发的jar（eg.整个项目里我们自己编写的类）。当应用重启后，原先的restart ClassLoader被丢掉、重新new一个restart ClassLoader来加载这些修改过的东西，而base ClassLoader却不需要动一下。这就是devtools重启速度快的原因。使用devtools ,只需要添加其依赖即可 : Maven&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt;&lt;/dependencies&gt; devtools的功能在命令行运行jar包 java -jar XXX.jar或者，当应用运行在指定的 classloader的时候, 自动失效（考虑到，或许是在生产环境）。 DevTools通过检测classpath的资源文件 resources的变动来触发应用的重启。这个跟我们在 IntelliJ IDEA中, 使用Build -&gt; Make Project，重新构建工程的效果是一样的。 默认情况下，/META-INF/maven，/META-INF/resources，/resources，/static，/templates，/public 这些文件夹下的文件修改不会使应用重启，但是会重新加载（devtools内嵌了一个LiveReload server，当资源发生改变时，浏览器刷新）。 如果想改变默认的设置，可以自己设置不重启的目录：spring.devtools.restart.exclude=static/**,public/** 这样的话，就只有这两个目录下的文件修改不会导致restart操作了。如果要在保留默认设置的基础上还要添加其他的排除目录：spring.devtools.restart.additional-exclude 如果想要使得当非classpath下的文件发生变化时应用得以重启，使用：spring.devtools.restart.additional-paths 这样devtools就会将该目录列入了监听范围。 在application.properties文件中，关于DevTools的键值如下：# ----------------------------------------# DEVTOOLS PROPERTIES# ----------------------------------------# DEVTOOLS (DevToolsProperties)spring.devtools.livereload.enabled=true # Enable a livereload.com compatible server.spring.devtools.livereload.port=35729 # Server port.spring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.spring.devtools.restart.additional-paths= # Additional paths to watch for changes.spring.devtools.restart.enabled=true # Enable automatic restart.spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties # Patterns that should be excluded from triggering a full restart.spring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait between polling for classpath changes.spring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.spring.devtools.restart.trigger-file= # Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.# REMOTE DEVTOOLS (RemoteDevToolsProperties)spring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.spring.devtools.remote.debug.enabled=true # Enable remote debug support.spring.devtools.remote.debug.local-port=8000 # Local remote debug server port.spring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.spring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.spring.devtools.remote.restart.enabled=true # Enable remote restart.spring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).spring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret. 另外，使用Intellij的可能会遇到这个问题，即使项目使用了spring-boot-devtools，修改了类或者html、js等，idea还是不会自动重启，非要手动去make一下或者重启，就更没有使用热部署一样。出现这种情况，并不是你的配置问题，其根本原因是因为Intellij IEDA和Eclipse不同，Eclipse设置了自动编译之后，修改类它会自动编译，而IDEA在非RUN或DEBUG情况下才会自动编译（前提是你已经设置了Auto-Compile）。]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js操作cookie]]></title>
    <url>%2F2018%2F07%2F22%2Fcookie-javascript%2F</url>
    <content type="text"><![CDATA[使用js处理cookie//写cookiesfunction setCookie(name,value) &#123; var Days = 30; var exp = new Date(); exp.setTime(exp.getTime() + Days*24*60*60*1000); document.cookie = name + "="+ escape (value) + ";expires=" + exp.toGMTString(); &#125; //读取cookiesfunction getCookie(name) &#123; var arr,reg=new RegExp("(^| )"+name+"=([^;]*)(;|$)"); if(arr=document.cookie.match(reg))&#123; return unescape(arr[2]); &#125; else &#123; return null; &#125;&#125; //删除cookies function delCookie(name) &#123; var exp = new Date(); exp.setTime(exp.getTime() - 1); var cval=getCookie(name); if(cval!=null) &#123; document.cookie= name + "="+cval+";expires="+exp.toGMTString(); &#125;&#125;]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[失格]]></title>
    <url>%2F2018%2F07%2F22%2Fspeech-RJSG%2F</url>
    <content type="text"><![CDATA[我今天要跟大家讲的其实就是人间社会的失格，是人种的退化，或者是我们以前常常讲的东亚病夫的状态，是我们在人生社会中生活着,如何变成了大同小异的闰土。 那我就直截了当地跟大家一起讲一讲，我们生活中被耽误的岁月。你比如说按今天下午的安排，我应该在下午三点多开讲，现在已经五点多了，耽误了两个小时。而且我这么跟大家讲是更有发言权，因为我自己都觉得我这一辈子，活到人到中年，我自己感觉已经耽误了五年六年，在座的诸位有很多是我的朋友，大家都是年轻人，你们的人生可能还在开始，还没有像我有这么痛切的感受，所以我觉得我有义务跟大家来分享这种被耽误的状况。 我们每个人都在走自己的人生旅途，但有时候走着走着，你就会发现，我们自己掉队了，落伍了。或者是因为贪看沿路的风景，忘记了走路。或者有时候因为迷路了，误入了歧途。我们有时候感觉自己像做了一场大梦一样，梦醒之后，我们发现自己最好的人生岁月已经被耽误掉了。 就在三十年前，也就是70年代末80年代初，当时的中国人都在控诉、揭露文革，都在伤感自己的人生被文革耽误了十年。所以当时流行的是伤痕文学和寻根文学，就是从文学的角度来控诉中国人的人生被耽误了。所以当时的政治家也顺应民意，全面的否定文革，开启了改革开放的新时代。而且很快，我们整个社会各个阶层都感受到了社会快速发展的活力。流行歌曲甚至称赞年轻人赶上了好时候，那个时候像我们这样的年轻人被称为“80年代的新一辈”。不知道诸位听过当时那首流行歌曲没有，那个可是我们那个年代的主旋律，当时以为那种歌曲就唱出了我们心目中的梦想，或者说也唱出了我们对音乐的一种极致的理解。它是这么唱的，可惜我不会唱歌，不然就唱给大家听了，它大概意思就是：再过二十年，大家来相会，光荣属于80年代的新一辈。 但是到了今天，你们可能其实也知道，像我这一代人，其实都在检讨人生的理想成了梦幻泡影，当年唱得那么激动人心的歌，现在想想是非常傻非常天真的，包括那种旋律，现在想想都是很傻很天真的。而且我们这一代人，都是人到中年，上有老，下有小，几乎都是心力交瘁，疲于奔命，很难得有自在的生活。 不仅仅是我们，就是今天的你们，特别是我这两年回北京之后，遇到不少年轻人，80后、90后，刚走上社会的年轻人，也都在说自己的生活被耽误掉了。他们说他们把自己抵押给了银行，抵押给了老板，不得不为巨大的生存压力疲于奔命。所以我看到更多的年轻人都在不可知的时代命运面前让步，或者说投降的时候，确实觉得挺难过的。而且更为荒唐的是，很多人生活在这种所谓的时代氛围里面，他还为这种生活辩护，认为这才是，或者这就是，人生社会的常态。其实我们换一个角度，我们把自己的生命抵押出去了，我们听任超经济强制地压榨自己和剥削自己，我们在过一种没有人格、没有尊严的生活，这其实就是人生被耽误掉了，而且已经导致了我们几代人的，可以说是，心智的蒙昧，重新蒙昧，心智的退化。 所以观察我们社会的方方面面，可以说，人生被耽误的情形是非常多的。这种耽误的后果很少有人想过。其实我有时候作为生活的旁观者，我每次看到那么多的现象，真是很难受很难受，看我这个白发，很多人说我忧心过多，就像梁启超引用庄子的话：吾朝受命而夕饮冰，我其内热与？就是心里面有太多热烈的东西，完全无法释放。 但是我看到周围的朋友，包括年轻的朋友，人生被耽误，我觉得有个非常重要的，就是在身心发育方面，在社会人格的权利义务方面，几乎是全面滞后，或者说全面退化。换一个词，人生一旦被耽误了，不仅仅是你赶不上趟了，而且是心智蒙昧、人种退化。我们经常说，人生如逆水行舟，不进则退。但我们因为拜金主义、因为功利、因为受外界的不良影响而停止了人生的精进之路，那我们可以说自己就是没有进步，只有退化。 我也可以举一个例子。这个例子我前几天的微博也跟大家披露过。我有一个朋友，他的儿子在中学的时候成绩很好，但是他特别讨厌政治课，后来发展到一听说要考政治就有一种生理和心理上的反感。他这样的人就很难通过高考，很难上中国的大学。好在他的父母比较开明，比较通融，所以就让他自己做主，这样的话他的同学都在备战高考，他自己就无所事事，在网上东看西看，后来看到奥地利的一所大学招考，他就试着申请，考试通过了，这样去奥地利读书。读了一年，他回来之后，他就跟他的同学交流，那些同学都上了国内一流的大学，或二类大学，他就发现，那些同学跟他相比，还是小孩，还是中学生，而他已经是大学生了，他自己觉得自己独立自主了，自己对很多问题都可以有自己的主见，有自己的主意，他那些同学也愿意听他的，也愿意听他的意见。后来发生的更有意思，大家都毕业了，他的同学拼命的挤在、留在北上广这些地方打工，而他在父母的支持下，跑到江西的农村，去跟茶农合作，买农民的茶园，自己做了茶农。一两年之后，他不仅成了茶叶领域的行家，也成了一个小老板。 所以我就经常在想，这两种生活道路，它带来了两种完全不同的人生。我们可以说，无论是学校教育、家庭教育还是社会教育，它其实都在深刻影响我们的人生，只不过很多人都想当然地接受了所谓现实的合理性，以为自己大学一毕业，就成人才了，他没有想到，自己跟另一种教育制度下的人生的差别。当然，他更没有想到，社会同样还在影响他，甚至在欺骗他、愚弄他，最后，他就会发现自己跟自己的理想渐行渐远。他的人生被耽误了。他的心智其实也是退化了。 社科院的学者资中筠曾经说过，在中国现在的问题当中，她认为最严峻的问题是教育。资中筠先生已经80多岁的高龄了，她原来是（社科院）美国（研究）所的所长，她的丈夫是陈乐民先生，也是个大学者。资中筠先生就说过，她说，中国现在的教育，从幼儿园开始，传授的就是一种极端扼杀人的创造性、想象力的功利主义。中国现在的教育现状如果再不改变，中国的人种都会退化，资中筠说：“这个过程，就像退化土豆一样。” 然后我的老师，北京大学的钱理群（教授），他前不久也说过这样的话，他说，我们的大学，包括北京大学在内，正在培养一大批“精致的利己主义者”，这些人高智商，世俗，老道，善于表演，懂得配合，尤其善于利用体制来达到自己的目的。这种人一旦掌握权力，钱理群说，比一般的贪官污吏的危害更大。但是很可惜，我们的教育体制，正在大批地培养这样的“有毒的罂粟花”。 假如我们把资中筠先生、钱理群先生谈论的话题放大的话，延伸到我们的家庭教育和社会教育当中，可以说，他们的结论同样是成立的。当然从表面上看，学校教育的危害，学校教育的失误是一目了然的，像我们前面说的，我那个同学的孩子和他的中学同学，他们相互之间的差距，几乎可以说彼此都是心知肚明的。我们大家也知道这个道理，也知道这个事实，所以我们这个社会里稍有条件的家庭，都在想办法把自己的孩子送到国外去读书、受教育。 但是，家庭教育和社会教育的危害，或者它的失误，不是那么明显，一时看不出来。所以当大家走上社会的时候，我们可能又在受蒙骗，又在受蒙蔽，特别是很多人走上社会，他会想当然地以为一切都是自己做主，无论成功还是失败，都是自己挣来的。又有一句话，自己混得不好，也是咎由自取。这个观念，其实在文明社会是一个错误的观念。因为他不明白，他对社会有责任，更重要的，这个社会首先要对他有责任。这个社会对他应尽的最为基本的责任是什么？是免于匮乏、免于恐惧。他失业了、他饥寒交迫了，这个社会是有责任的。 我记得汶川地震的时候有一个细节，有一个小孩，她被军人救出来了，那个解放军叔叔递给这个小孩一瓶矿泉水，这个小孩开口说的第一句话是，叔叔，多少钱？我当时看到这个报道，特别难过、辛酸，因为你们可能都知道，在发达国家，在这样的灾难面前，难民和国民最常问的，就是责问政府和救援者，你们为什么来得这么晚？也可以说，我们现在国民的心智和现代公民的心智之间是不可同日而语的。 所以说因为我们这个社会，它在欺骗人，它在失格，它培养了很多很傻很天真的国民，同时也培养了前面钱理群教授说的很精很自私的国民。特别是后一种，他们现在是认为只要自己活好了，就对社会有贡献了，而且据说这叫消极自由，但是这些人忘了，在目前这样一个国家，甚至在现代社会这样一个人际关系、阶层关系依存度非常高的社会里生活，一个人的生活肯定与他人相关，一个人的生活质量是与周围发生关系的。我们不能把消极自由跟自私划等号，这是不成立的，这种自私的人生，可以说，你们也学过诗人臧克家的有一首诗，叫“有的人”，“有的人活着，他已经死了” 可以说，我们今天社会上有太多这样精致自私的国民，但是好在无论他们多么成功，在我们这些人眼里，在网络，目前看中国最有效的舆论监督里，这些人是缺德的，他们是专横的，是丧失人生正义和社会正义的，而且他们是没有品格和人格的。当然我们总体上看，今天的社会，既有我们穷苦人的失格，也有所谓精明自私人的失格，这种人我们可以说他们是暴发户。但是无论哪一种失格，都带来，我觉得是心智的蒙昧，人种的退化，人生社会（的演进）都被耽误了。 所以我今天想跟大家探讨的，其实就是这种人生社会的失格。国有国格，人有人格，如果一个社会失格了，一个国家失格了，我们人都失格了，那么我们的言论，我们的行为，就会经常出格，也就是失格了。所以我们经常看到网络上，大家总结最雷人的语言，因为它出格所以把人雷倒了，中国和中国人，在目前的文明世界，为什么这么容易雷人，因为大家都是失格的。我们也因此说，我们的大陆中国目前遭受了生态环境、心态环境、还有世态环境的空前的污染，其实更准确地说，是生态、心态、世态退化掉了，完全退化掉了，刚才诸位也都看到文大川给我们展示的中国的山川，它其实已经在退化。 大家也知道，我们中国在改革开放三十年来已经发生了很多很大的变化，其中一个变化就是，我们很多人都觉得中国跟西方平起平坐了，中国人跟西方人也平起平坐了。这在80年代不是这么想的，80年代我们觉得一切都应该认真地向西方学习，当时甚至有人讽刺说我们中国人崇洋媚外到以为外国的月亮都比中国的圆。 但是到现在，我们就没有这么想了，我们以为自己站起来了，以为自己可以说不，可以拉下脸来不高兴了。而且我们甚至在嘲笑西方发达国家，我们认为它们有政治的、经济的、社会的危机，它们危机不断。我们有腐败，你们也有腐败；我们有通账通缩的压力，你们也有经济危机；我们有人欲横流，你们也有沉沦堕落。 而且我自己都听过不少人，所谓的成功人士跟我在讲，说，哎呀，发达了又有什么用啊，发达国家跟我们中国遭受的问题都是一样的。所以我就经常在想，抱着这种逻辑、这种心智来生活，他肯定是跟现实同流合污，肯定是一种堕落，他们不知道，他们跟文明人之间的差距。但是他们有一种本能，他们比我们更有本能的是什么呢？他们要把孩子送出国，他们自己要想办法去移民。 大家也都知道鲁迅笔下的闰土，这也是我今天的一个关键词之一。一个小时候一起玩的伙伴，后来分道扬镳，形同陌路，成了两个阶层的人，更重要的，成了两种不同生命质量的人，一个是麻木的、愚昧的，一个是生活在现代，呼吸着现代的空气。 我有时候想，其实我们今天的中国人，从本质上来讲，大家都是闰土。一种是麻木的、愚昧的闰土，一种是精明自私的、愚蠢的闰土。所以，我经常想，我们不应该在小康生活、物质生活中陶醉，我们要去了解我们和文明人之间的差距。我们不能让自己活成了闰土，因为很悲惨的是什么，闰土永远不知道自己只是活成了闰土。比如说，那种精明自私的闰土，他不知道自己的位格，不知道自己的义务，也不知道自己在他人心中的形象；还有一种是麻木的闰土，他不知道自己的权利，不知道自己的尊严。 有年轻人也曾经问过我，说他未来五到十年要把理想放在一边去打拼，该怎么办？其实我有时候也很无奈，因为我觉得我自己已经被这个社会耽误了，我无法给年轻的朋友提供一个唯一的解决之道。所以我也只能说，我们知道自己的人生被耽误就好了，在大家不得不为稻粱谋的时候，应该保护好自己的精神、自己的心智不要被外界污染，不要被它们破坏掉。 今天大家来跟我分享（我）这点心得，我也是希望说，大家在这个被耽误的人生岁月里真正的有所收获，就是说，这个环境是很糟糕，但是自己要知道。而且从我现在对中国社会的判断来讲，我是希望我们不要去作恶，用我们中国人的话说，我们活着不要去造业，不要去作孽。 还有一点很重要，在这种很苦难的岁月，在这种，用网络语言说，很悲催的生活当中，我们不要怨天尤人，而且也不要吝惜我们这种正面的情绪，明亮的东西，要回归明亮的东西。借用英国的作家、政治家丘吉尔的话说，在严峻的岁月里，我们也不要吝惜赞美。这个话我觉得很好，就是凡事我们知道就好，我们的人生被耽误了，心智可能比别人要落后了很多年。可能有时候是赶不上趟的，特别是对我们人生来讲，是赶不上趟的，但我们要努力去守住我们自己的那点东西，守住我们的良知，我们的尊严，我们的权利，而且要去礼赞，要去赞美那些，用我的话是，自由和文明的、善和正义的事物。 我曾经看过很多知青的回忆文字，也看过很多80年代的伤痕文学，我就觉得那几代人可以说是白活了，他们让我非常理解俄国作家陀思妥耶夫斯的一句话，我唯一担心一件事，我是否配得上我所经受的苦难。很可惜，很多中国人，他经受了苦难，但是这个受苦是白白受苦，（受难是）白白受难。 我最后跟诸位分享马克思的女儿燕妮的一个故事。马克思的大女儿燕妮曾经问一个历史学家维特克，你们可能有人已经知道这个故事，她说，“你能用最简明的语言，把人的历史浓缩在一本小册子里吗？”维特克说：“不必，只要四句德国谚语就够了：1、上帝让谁灭亡，总是先让他膨胀；2、时间是筛子，最终会淘去一切沉渣；3、蜜蜂盗花，结果却使花开茂盛；4、暗透了，更能看得见星光。”]]></content>
      <categories>
        <category>inspire</category>
      </categories>
      <tags>
        <tag>inspire</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时间就像金钱一样，你得学会投资时间]]></title>
    <url>%2F2018%2F07%2F21%2Finvestment-time%2F</url>
    <content type="text"><![CDATA[&emsp;其实，时间就像金钱一样，你得学会投资时间。把时间投资在有价值有意义的地方，你就会有更多的时间。&emsp;每个人都有同样多的时间，而有的人能够把时间用好，有的人则没有把时间用好。日积月累，人和人的差距就越来越大。而看似忙碌的我们似乎在这一年中也没有做太多事，尤其是让自己成长的事情。工作强度很大的情况下，更要找到时间来学习和提升自己，除了依靠短期的热情外，有没有什么好方法呢？对此，左耳朵耗子在极客时间专栏中分享了自己的这些心得和方法，希望对你有帮助。 &emsp;其实，时间就像金钱一样，你得学会投资时间。把时间投资在有价值有意义的地方，你就会有更多的时间。花时间学习基础知识，花时间读文档。 在参加工作的这近 20 年来，我发现，很多程序员把时间都浪费在了查错上。究其根本原因就是基础知识不完整，没有好好地把技术相关的用户文档读完整就仓促上手做事。其实只要把基础打扎实，认真读一下文档，你会省出很多很多的时间。系统地学习一门技术是非常关键的，所以这个时间是值得投资的。花时间在解放自己生产力的事上。 在自动化、可配置、可重用、可扩展上要多花时间。对于软件开发来说，能自动化的事，就算多花点时间也要自动化，因为下次就不用花时间了。让自己的软件模块可以更灵活地配置和扩展，这样如果有需求变更或是有新需求的时候，可以不用改代码，就算要改代码也很容易。花时间在解放自己的事上是最有意义的了。花时间在让自己成长的事上。 注意，晋升并不代表成长，成长不应该只看在一个公司内，而是要看在行业内，在行业内的成长才是真正的成长。所以，把时间花在能让自己成长，能让自己有更强的竞争力，能让自己有更大的视野，能让自己有更多可能性的事情上。这样的时间投资才是有价值的。花时间在建立高效的环境上。 &emsp;我相信你和我会有一样的一个习惯，那就“工欲善其事，必先利其器”。我们程序员在做事之前都喜欢把自己的工作环境整理到自己喜欢的状态下。比如使用趁手的开发工具，使用趁手的设备。花些时间在影响你身边的人上。 比如你的同事，你的产品经理，你的老板，去影响他们，让他们理解你，让他们配合你来建立更好的流程和管理方法。在这个方向上花时间也是很值得的。总之，你要学会规划自己的行动计划，不是短期的，而是一个中长期的。可以按季度来规划，这个季度做什么，达到什么目标，而不是只考虑眼下。技术人应该关注长期利益规划。要多关注长远可以节省多少时间，而不是当前会花费多少时间。长期成本会比短期成本大得多。宁可在短期延期，也不要透支未来。]]></content>
      <categories>
        <category>me</category>
      </categories>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路漫漫其修远兮 吾将上下而求索]]></title>
    <url>%2F2018%2F07%2F20%2Fabout-myself-java%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;写点什么呢？总想写点什么又无从下手！窗外黑云压城，暗无天日，狂风暴雨即将袭来！每次看到这副景象，内心泛起阵阵涟漪。&nbsp;&nbsp;&nbsp;&nbsp;这一周没干活，基本没干活，确切的说，前两天完成小任务，直到现在，我在埋头自己的东西。看教程，搞自己的博客，折腾折腾，危机感满满。 &nbsp;&nbsp;&nbsp;&nbsp;我时不时提醒自己，还能待多久？ &nbsp;&nbsp;&nbsp;&nbsp;这样的生活是不是我想要的，又或者它是一个必须的过程？ &nbsp;&nbsp;&nbsp;&nbsp;思绪慢慢回到过去，且让它飘得远一些。 &nbsp;&nbsp;&nbsp;&nbsp;我怎么就踏上了这一条路，跟数据打上交道了。当年报考志愿的时候，纯粹是因为根本不了解专业，平时又喜欢看电脑报、关注手机之类的电子产品。故报此专业，无他雄心壮志。以至于入学的时候，一个志愿者学长问到为什么报了这个专业，我说乱报，他说你们这些高考生就知道考试。（其实在中国大多数考生类似我这样估计不在少数，这是大环境使然） &nbsp;&nbsp;&nbsp;&nbsp;后来的计算机课程确实让我够呛的,从有点懂到完全不懂讲什么鬼。甚至上课除了玩手机不知道干什么。逃课又有点罪恶感，去了教室就假装自己上课了的自我安慰。（其实学没学好跟听不听课程没多大关系） &nbsp;&nbsp;&nbsp;&nbsp;一个老师跟我讲过，作为大学老师身上的压力也是很大的，科研方面，家庭方面，教学方面。可以将精力放在教学上的很少，何况课时少。（这好像多了个听不懂课的理由） &nbsp;&nbsp;&nbsp;&nbsp;时间匆匆，大二暑假期间在老师实验室待过在一段时间，明白一个团队的意义，什么样的群体才适合自己。晚上经常凌晨2点回去，我忘了我做过什么事情，就是一股解决不了又不愿意放弃的傻里傻气的劲，强迫症重症患者。（现在回头想想根本没必要钻牛角尖，解决的方式需要改变。说白了，缺乏的是计算机思维而不是因为知识量的不足。我平时解决问题，不懂查看文档，这些死的“规则”。而面对问题的整个思维过程相当重要） &nbsp;&nbsp;&nbsp;&nbsp;期间在学校科创中心担任网络技术部部长，说白了，让自己有点事做，跟专业相关的。也算是认识了几个优秀的学弟学妹。（嗯！我眼光还是不差的） 看学长留下的网站源码，压根没懂任何关于php,数据库等东西，前端方面也是认识几个标签的前提下，自学看懂了。（心累啊，都是度娘出来的）不过也算是恶补了一下。 &nbsp;&nbsp;&nbsp;&nbsp;大三在学校有两个项目实训，一个项目是文件上传下载的项目，jdbc实现增删改查。一个是网上书城，差不多项目。完后进行了为其四个月的培训。（很基础，基本学过，或者完全能在网上整理类似的教程，现在想想，如果清楚学习路线，完全可以自己搞定） &nbsp;&nbsp;&nbsp;&nbsp;接下来培训还没结束就有公司招聘了，好吧，就是现在待的公司。并且录用了。算是比较幸运吧，不用到处奔波投简历。（到现在为止，压根没投过简历，不知道算好还是不好） &nbsp;&nbsp;&nbsp;&nbsp;接下来就是实习，直到毕业。我该庆幸的是一脱离学校，就没有伸手问过家里要钱。毕业后直接转正。没有什么大坎坷。 &nbsp;&nbsp;&nbsp;&nbsp;下面是经历过的项目。第一个真实的大坑项目，让我清楚了为什么程序员被调侃为搬砖。我第一次看到十几年前的代码，jsp里写java代码的恶心，而且jstl的滥用。越看越心烦躁。还要继续往里面堆代码，有轻微洁癖症的我看的难受啊。已经是千疮百孔的代码堆里堆代码，而且要处理的是写一堆js堆dom操作，替换值（实现多语言改造）。其中的工作量，花在查找已经定义好key-value是费劲的事情。堆页面的改造过程也算是正在踩进门，直到数据的流向以及对问题的定位。事情搞完就是测试了，测试居然消耗了那么大的工作量，几个月，包括功能测试，静态页面测试。还用兼容不同浏览器，ie8-11,还有三个语言版本。也就是每条测试用例之至少执行12遍。太认真去纠结细节或者了解业务本身，是很痛苦而且根本无法按时完成的。 &nbsp;&nbsp;&nbsp;&nbsp;接下来是珠江新城的一个门户项目，刚开始处理jboss集群问题，原本一直使用的社区版jboss中间件，发现集群方案很旧了，而且没有集群的域管理概念。于是下载了比较新版的企业版。这个算比较新的，网上只能找到英文官方文档。对于四级踩线的我来说，呵呵呵哒！吃力地硬着头皮看了点。发现根本无济于事。于是搜索各种博客，csdn等等，大多雷同的方案，可是就是无法解决我的问题。搞了几天，才把驱动加载成功！事情有点棘手，虽然leader没有给什么明确的deadline,可是自己心里焦虑不安（真是强迫症），解决不了就是很不爽，这天时间过去了，什么进展也没有，就觉得没有价值感存在感（自己将自己逼死）好吧，放弃了。用老方式做负载均衡集群（参照着文档操作，也还能达到一定目的）。后续做的单点登陆，就有点坑了，公司的单点登陆的包写法是jdk1.5的语法写的。客户那边使用的OA网站还是jdk1.4的，我直接吐血…我日，还有那么老的东西，jdk10都出来了。不能随便改项目代码（事实上也根本不可能改）毕竟出事谁都承担不起。那就修改包吧，修改的过程才发现了很多语法区别，必读jdk5才有集合泛型、自动拆箱装箱等问题。这玩意看着改，也不知道改的对不对，因为没有测试过程。当改到剩下几个地方的时候，突然通知去深圳协助修改多语言问题。 &nbsp;&nbsp;&nbsp;&nbsp;突然觉得小庆幸，不用搞那些繁琐的东西了。接下来就是一个月的出差之旅。刚开始是新鲜感满满的，去了之后，呵呵呵呵哒！面对完全不懂的逻辑，要看代码，问实施人员沟通。基本是整个业务通了，也就能解决一半问题了。但是确实代码不好改。你可能看懂的是部分逻辑，根据经验修改。突然发现改出新的问题（看别人写的代码真是很痛苦的，心里总有一匹草泥马在奔腾）。期间也见证了甲方乙方的各种“博弈”，各种甩锅。更多的是无效的沟通，繁琐的处理流程（可能站在管理者的角度很重要，但是对于开发者来说，简直消耗我们的资源）。大公司的项目质量管控严格的一逼，稍微改动一句代码，刨根问底的追究，出了事情谁负责，你们为什么要改等等（我没经历过，先前的开发人员经历过）。多语言本身引发的问题大多数比较容易解决。难处理的还是原本系统存在的问题（当时测试多语言的时候，上千个问题记录，后来公司被黑客工具，数据被删除了）。原本的问题也有几百个。之间还夹着新的需求。 &nbsp;&nbsp;&nbsp;&nbsp;好吧，没等到这个项目上线，被告知要去贵阳中烟出差。怀着几分出省的新鲜感以及逃离深圳项目的快感，去到贵阳中烟。这个项目第一次接触比较新鲜感，代码是从零开始构建的，技术比较主流，freemarker、layui、springMVC、mybaits。简约干净看着就舒服。去了一个月被告知返回公司（原本的同事要过去，床位不够）。期间本来想去黄果树瀑布，青岩古镇玩下，都没去成，基本在贵阳市区逛逛。上班时间896，每天坐着的时间太长了，就算一天什么也不干，光坐着就腰酸背痛。这算是通病吧！程序员的经常性疲劳！虽然说没很大压力，但是总觉得哪里不对。 &nbsp;&nbsp;&nbsp;&nbsp;回到广州，几分亲切感。估计是待久了，对广州的感觉比较浓一点，朋友同学多数在这边，周末还可以约上一餐。 &nbsp;&nbsp;&nbsp;&nbsp;一路走来，时不时冒出一个想法，又自己将其扑灭了。我是不是应该重新思考软件开发这个工作。如果人只知道漫无目的工作，将毫无意义。【可能是某人眼中中华传统文化男性的价值观】]]></content>
      <categories>
        <category>me</category>
      </categories>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring方法入参检测工具类]]></title>
    <url>%2F2018%2F07%2F05%2Fspring-Assert%2F</url>
    <content type="text"><![CDATA[方法入参检测工具类 Web 应用在接受表单提交的数据后都需要对其进行合法性检查，如果表单数据不合法，请求将被驳回。类似的，当我们在编写类的方法时，也常常需要对方法入参进行合 法性检查，如果入参不符合要求，方法将通过抛出异常的方式拒绝后续处理。举一个例子：有一个根据文件名获取输入流的方法：InputStream getData(String file)，为了使方法能够成功执行，必须保证 file 入参不能为 null 或空白字符，否则根本无须进行后继的处理。这时方法的编写者通常会在方法体的最前面编写一段对入参进行检测的代码，如下所示：public InputStream getData(String file) &#123; if (file == null || file.length() == 0|| file.replaceAll("\\s", "").length() == 0) &#123; throw new IllegalArgumentException("file入参不是有效的文件地址"); &#125; … &#125; 类似以上检测方法入参的代码是非常常见，但是在每个方法中都使用手工编写检测逻辑的方式并不是一个好主意。阅读 Spring 源码，您会发现 Spring 采用一个 org.springframework.util.Assert 通用类完成这一任务。 Assert 翻译为中文为“断言”，使用过 JUnit 的读者都熟知这个概念，它断定某一个实际的运行值和预期想一样，否则就抛出异常。Spring 对方法入参的检测借用了这个概念，其提供的 Assert 类拥有众多按规则对方法入参进行断言的方法，可以满足大部分方法入参检测的要求。这些断言方法在入参不满足要求时就会抛出 IllegalArgumentException。下面，我们来认识一下 Assert 类中的常用断言方法： 断言方法 说明 notNull(Object object)当 object 不为 null 时抛出异常，notNull(Object object, String message) 方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null； isTrue(boolean expression) / isTrue(boolean expression, String message)当 expression 不为 true 抛出异常； notEmpty(Collection collection) / notEmpty(Collection collection, String message)当集合未包含元素时抛出异常。notEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断； hasLength(String text) / hasLength(String text, String message) 当 text 为 null 或长度为 0 时抛出异常； hasText(String text) / hasText(String text, String message) text 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常； isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message) 如果 obj 不能被正确造型为 clazz 指定的类将抛出异常； isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message) subType 必须可以按类型匹配于 superType，否则将抛出异常； 使用 Assert 断言类可以简化方法入参检测的代码，如 InputStream getData(String file) 在应用 Assert 断言类后，其代码可以简化为以下的形式：public InputStream getData(String file)&#123; Assert.hasText(file,"file入参不是有效的文件地址"); ① 使用 Spring 断言类进行方法入参检测 … &#125; 可见使用 Spring 的 Assert 替代自编码实现的入参检测逻辑后，方法的简洁性得到了不少的提高。Assert 不依赖于 Spring 容器，您可以大胆地在自己的应用中使用这个工具类.]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[进程和线程]]></title>
    <url>%2F2018%2F07%2F03%2Fthread-process%2F</url>
    <content type="text"><![CDATA[&emsp;进程（process）和线程（thread）是操作系统的基本概念，但是它们比较抽象，不容易掌握。最近，我读到一篇材料，发现有一个很好的类比，可以把它们解释地清晰易懂。1.计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。 2.假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。 3.进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。 4.一个车间里，可以有很多工人。他们协同完成一个任务。 5.线程就好比车间里的工人。一个进程可以包括多个线程。 6.车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。 7.可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。 8.一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。 9.还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。 10.这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做”信号量”（Semaphore），用来保证多个线程不会互相冲突。不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。 11.操作系统的设计，因此可以归结为三点： （1）以多进程形式，允许多个任务同时运行； （2）以多线程形式，允许单个任务分成不同的部分运行； （3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[愿你三冬暖，愿你春不寒]]></title>
    <url>%2F2018%2F07%2F01%2Flittle-poems%2F</url>
    <content type="text"><![CDATA[愿你三冬暖，愿你春不寒 愿你三冬暖，愿你春不寒；愿你天黑有灯，下雨有伞。愿你路上有良人相伴，愿你所有快乐无需假装，愿你此生尽兴、赤诚善良。愿时光能缓，愿故人不散；愿有人陪你颠沛流离，愿你惦念的人能和你道早安，愿你独闯的日子里不觉得孤单。愿你人间走一遭，圆满了三界六道，看透了是非善恶；从此福来心至，皆是逍遥。]]></content>
      <categories>
        <category>me</category>
      </categories>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
</search>
